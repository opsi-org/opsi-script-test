
;C:\gitwork\opsi-script-test\CLIENT_DATA\standalone-tests\json-test2.opsiscript
[actions]

DefVar $mystr$
DefVar $tmpstr$
DefVar $countobj$
Defstringlist $list$
set $mystr$ = '["7z.exe","%ProgramFiles32Dir%\7-Zip\7zFM.exe",true,1.5,42,{"key":"value"},[1,2,3]]'
set $mystr$ = RegString($mystr$)

;set $mystr$ =  EscapeString: [{"Class": {"Type":   "VIRTUAL","Opsi":   "DEVICE_ID"}}],   "Values": [      {         "Type":   "varchar(10)",         "Scope":  "g",         "Opsi":   "deviceType",         "WMI":    "PNPDeviceID.split('\\\\')[0]"      },      {         "Type":   "varchar(4)",         "Scope":  "g",         "Opsi":   "vendorId",         "WMI":    "PNPDeviceID.split('\\\\')[1].replace('FUNC_01&', '').split('&')[0].split('_')[1]",         "Linux":  "vendorId"      },      {         "Type":   "varchar(4)",         "Scope":  "g",         "Opsi":   "deviceId",         "WMI":    "PNPDeviceID.split('\\\\')[1].replace('FUNC_01&', '').split('&')[1].split('_')[1]",         "Linux":  "deviceId"      },      {         "Type":   "varchar(4)",         "Scope":  "g",         "Opsi":   "subsystemVendorId",         "WMI":    "PNPDeviceID.split('\\\\')[1].replace('FUNC_01&', '').split('&')[2].split('_')[1][:4]",         "Linux":  "subsystemVendorId"      },      {         "Type":   "varchar(4)",         "Scope":  "g",         "Opsi":   "subsystemDeviceId",         "WMI":    "PNPDeviceID.split('\\\\')[1].replace('FUNC_01&', '').split('&')[2].split('_')[1][4:]",         "Linux":  "subsystemDeviceId"      },      {         "Type":   "varchar(8)",         "Scope":  "g",         "Opsi":   "revision",         "WMI":    "PNPDeviceID.split('\\\\')[1].replace('FUNC_01&', '').split('&')[3].split('_')[1]",         "Linux":  "revision"      }  ]}]

if jsonIsValid ($mystr$)
	comment "valid json"
else
	comment "no valid json"
	;isfatalError "no valid json"
endif	

if jsonIsObject ($mystr$)
	comment "valid json object"
else
	comment "no valid json object"
	;isfatalError "no valid json object"
endif	

if jsonIsArray($mystr$)
	comment "valid json array"
else
	comment "no valid json array."
	;isfatalError "no valid json array"
endif	

set $countobj$ = jsonAsArrayCountElements($mystr$)

comment "Number of objects in Array: "+$countobj$

set $list$ = jsonAsArrayToStringList($mystr$)

comment "Number of objects in list: "+count($list$)

set $tmpstr$ = jsonStringListToJsonArray($list$)

