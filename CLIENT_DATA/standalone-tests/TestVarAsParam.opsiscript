[Actions]
SetLogLevel = 7

DefVar $Architecture$
DefVar $Modifier$

DefStringList $Architectures$

Set $Architectures$ = CreateStringList("32Bit", "64Bit", "SysNative")

;###################################################### Registry ######################################################
DefVar $RegKey$
DefVar $RegType$
DefVar $RegVar$
DefVar $RegVal$

;for %Element% in $Architectures$ do Sub_TestVarAsParam_Registry



;###################################################### Files #########################################################
DefVar $Source$
DefVar $Destination$
DefVar $Target$
DefVar $Options$
DefVar $ProgramFilesDir$

for %Element% in $Architectures$ do Sub_TestVarAsParam_Files



;###################################################### ExecWith ######################################################

;DefVar $DisplayName$

;DefStringList $ExecWith_Result$

;Set $DisplayName$ = "*TestVarAsParam*"

;Fails in all combinations :-/
;Is supposed to read the RegVar DisplayName from the registry key generated in the previous section
;for %Element% in $Architectures$ do Sub_TestVarAsParam_ExecWith








;###################################################### Registry ######################################################
[Sub_TestVarAsParam_Registry]
	Set $Architecture$ = "%Element%"
	Set $RegKey$ = "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\TestVarAsParam_" + $Architecture$
	Set $RegType$ = "REG_SZ"
	Set $RegVar$ = "DisplayName"
	Set $RegVal$ = "TestVarAsParam_" + $Architecture$
	Set $Modifier$ = ""

	;Works
	Registry_TestVarAsParam_Create "/" + $Architecture$ + $Modifier$

	;Fails
	;Registry_TestVarAsParam_Create "/" + $Architecture$ $Modifier$

	if GetRegistryValue($RegKey$, $RegVar$, $Architecture$) = $RegVal$
		Comment "Registry_TestVarAsParam_Create passed"
		Registry_TestVarAsParam_Delete "/" + $Architecture$ + $Modifier$
	else
		LogError "Registry_TestVarAsParam_Create failed"
		IsFatalError "Registry_TestVarAsParam_Create failed"
	endif

	Set $Modifier$ = "/AllNTUserDats"
	Set $RegKey$ = "SOFTWARE\TestVarAsParam_" + $Architecture$

	;Works
	Registry_TestVarAsParam_Create "/" + $Architecture$  $Modifier$
	Registry_TestVarAsParam_Delete "/" + $Architecture$  $Modifier$

	;Fails
	;Registry_TestVarAsParam_Create "/" + $Architecture$ + $Modifier$
	;Registry_TestVarAsParam_Delete "/" + $Architecture$ + $Modifier$

[Registry_TestVarAsParam_Create]
	OpenKey [$RegKey$]
	Set "$RegVar$" = $RegType$:"$RegVal$"

[Registry_TestVarAsParam_Delete]
	DeleteKey [$RegKey$]


;###################################################### Files #########################################################
[Sub_TestVarAsParam_Files]
	Set $Architecture$ = "%Element%"

	Switch $Architecture$
		Case "32Bit"
			Set $ProgramFilesDir$ = "%ProgramFiles32Dir%"
		EndCase

		Case "64Bit"
			Set $ProgramFilesDir$ = "%ProgramFiles64Dir%"
		EndCase

		Case "SysNative"
			Set $ProgramFilesDir$ = "%ProgramFilesSysNativeDir%"
		EndCase
	EndSwitch

	Set $Modifier$ = ""
	Set $Source$ = "%opsiTmpDir%\Testfolder"
	Set $Destination$ = $ProgramFilesDir$
	Set $Target$ = $ProgramFilesDir$ + "\TestFolder"
	Set $Options$ = "-se"

	;Works
	Files_TestVarAsParam_Copy "/" + $Architecture$ + $Modifier$

	;Works but logs: "Syntaxerror: "$Modifier$" is no valid parameter"
	;Files_TestVarAsParam_Copy "/" + $Architecture$ $Modifier$

	if DirectoryExists($Target$, $Architecture$)
		Comment "Files_TestVarAsParam_Copy passed"
		Set $Options$ = "-s"
		Files_TestVarAsParam_Delete "/" + $Architecture$ + $Modifier$
		if DirectoryExists($Target$, $Architecture$)
			LogError "Files_TestVarAsParam_Delete failed"
			IsFatalError "Files_TestVarAsParam_Delete failed"
		else
			Comment "Files_TestVarAsParam_Delete passed"
		endif
	else
		LogError "Files_TestVarAsParam_Copy failed"
		IsFatalError "Files_TestVarAsParam_Copy failed"
	endif

	Set $Modifier$ = "/AllNTUserProfiles"
	Set $Destination$ = ""
	Set $Target$ = "%CurrentProfileDir%\TestFolder"
	Set $Options$ = "-se"

	;Works
	Files_TestVarAsParam_Copy "/" + $Architecture$ $Modifier$

	;Fails with:
	;Syntaxerror: ""/" + $Architecture$ + $Modifier$" is no valid parameter
	;Files_TestVarAsParam_Copy "/" + $Architecture$ + $Modifier$

	Set $Options$ = "-s"
	Files_TestVarAsParam_Delete "/" + $Architecture$ $Modifier$

[Files_TestVarAsParam_Copy]
	copy $Options$ $Source$ $Destination$

[Files_TestVarAsParam_Delete]
	del $Options$ $Target$



;###################################################### ExecWith ######################################################
[Sub_TestVarAsParam_ExecWith]
	Set $Architecture$ = "%Element%"

	;Most basic test I can come up with....
	Set $ExecWith_Result$ = GetOutStreamFromSection("ExecWith_Powershell_HelloWorld powershell.exe -ExecutionPolicy Bypass")

	;Set $ExecWith_Result$ = GetOutStreamFromSection("ExecWith_Powershell_SearchUninstallInfos 'powershell.exe -ExecutionPolicy Bypass' winst /64Bit")
	;Set $ExecWith_Result$ = GetOutStreamFromSection("ExecWith_Powershell_SearchUninstallInfos powershell.exe -ExecutionPolicy Bypass")
	;ExecWith_Powershell_SearchUninstallInfos "powershell.exe" winst /64Bit
	;ExecWith_Powershell_SearchUninstallInfos "powershell.exe -ExecutionPolicy Bypass" winst /64Bit


	;Test with VarAsParams:

	;Set $ExecWith_Result$ = GetOutStreamFromSection(ExecWith_Powershell_SearchUninstallInfos powershell.exe -ExecutionPolicy Bypass winst "/" + $Architecture$)
	;Fails with:
	;Syntax Error in Section: Sub_TestVarAsParam_ExecWith (Command in line 24 in section: Sub_TestVarAsParam_ExecWith; file: Test.opsiscript; section start at line: 22; origin: Test.opsiscript; line: 24): $ExecWith_Result$ = GetOutStreamFromSection(ExecWith_Powershell_SearchUninstallInfos powershell.exe -ExecutionPolicy Bypass winst "/" + $Architecture$) -> ExecWith_Powershell_SearchUninstallInfos powershell.exe -ExecutionPolicy Bypass winst "/" + $Architecture$) illegal String Expressionstr

	;ExecWith_Powershell_SearchUninstallInfos "powershell.exe -ExecutionPolicy Bypass winst /" + $Architecture$
	;Fails with:
	;Syntax Error in Section: Sub_TestVarAsParam_ExecWith (Command in line 25 in section: Sub_TestVarAsParam_ExecWith; file: Test.opsiscript; section start at line: 22; origin: Test.opsiscript; line: 25): ExecWith_Powershell_SearchUninstallInfos -> winst option not recognized

	;ExecWith_Powershell_SearchUninstallInfos "powershell.exe -ExecutionPolicy Bypass winst /" + $Architecture$
	;Fails with:
	;Syntax Error in Section: Sub_TestVarAsParam_ExecWith (Command in line 33 in section: Sub_TestVarAsParam_ExecWith; file: Test.opsiscript; section start at line: 22; origin: Test.opsiscript; line: 33): ExecWith_Powershell_SearchUninstallInfos -> winst option not recognized



[ExecWith_Powershell_SearchUninstallInfos]
	$RegKey = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"
	#Search $RegKey for the given DisplayName and return DisplayName, QuietUninstallString (if present) and UninstallString from the found subentries
		Get-ChildItem -Path $RegKey| Where-Object -FilterScript { $_.GetValue("DisplayName", "not found") -like "$DisplayName$"} | ForEach-Object -Process {
		if (-Not($_.GetValue("DisplayName", "not found") -eq "not found") -or ($_.GetValue("DisplayName", "not found") -eq "") -or ($_.GetValue("DisplayName", "not found") -eq $null))
			{
			Write-Output (-join ("InstalledVersion=" + $_.GetValue("DisplayName")))
			if (-Not($_.GetValue("QuietUninstallString", "not found") -eq "not found") -or ($_.GetValue("QuietUninstallString", "not found") -eq "") -or ($_.GetValue("QuietUninstallString", "not found") -eq $null))
				{
				Write-Output (-join ("QuietUninstallString=" + $_.GetValue("QuietUninstallString")))
				}
			if (-Not($_.GetValue("UninstallString", "not found") -eq "not found") -or ($_.GetValue("UninstallString", "not found") -eq "") -or ($_.GetValue("UninstallString", "not found") -eq $null))
				{
				Write-Output (-join ("UninstallString=" + $_.GetValue("UninstallString")))
				}
			}
		}

[ExecWith_Powershell_HelloWorld]
	$strString = "Hello World"
	write-host $strString
