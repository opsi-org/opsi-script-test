; This code is part of the opsi.org project
;
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by the uib gmbh, D55118 Mainz, Germany
; and published under the Terms of the GNU Affero General Public License.
; Text of the AGPL: http://www.gnu.org/licenses/agpl-3.0-standalone.html
; credits: http://www.opsi.org/credits/




[Actions]
requiredWinstVersion >= "4.11.4.1"
if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.3.6")
	requiredOpsiscriptVersion >= "4.12.3.6"
endif
ScriptErrorMessages = false
encoding=utf8
setOutputLevel = 3
DefVar $ProductId$

DefVar $MasterFlag$
DefVar $FinalResult$
DefVar $AktTestSubScript$
DefVar $ExpectedResult$
DefVar $TestNr$
DefVar $TestName$
DefVar $TestResult$
DefVar $SubResult$
DefVar $HomeTestFiles$
DefVar $ConstTest$
Defvar $ConstTest2$
DefVar $CompValue$
DefVar $CompValue2$
DefVar $tmp$
DefVar $tmp1$
DefVar $tmp2$
DefVar $tmp3$
DefVar $tmp4$
DefVar $str$
DefVar $str1$
DefVar $str2$
DefVar $str3$
DefVar $str4$
DefVar $refstr$
DefVar $MsVersion$
DefVar $string1$
DefVar $string2$
DefVar $string3$
DefVar $xmlnodepath$
DefVar $ScriptLoglevel$

DefVar $winst_constants$
DefVar $winst_parametrizing$
DefVar $winst_string$
DefVar $infostest$
DefVar $winst_string_list$
DefVar $winst_controls$
DefVar $subtestsub$
DefVar $winst_file$
DefVar $winst_patches$
DefVar $winst_patch_hosts$
DefVar $winst_patch_text_file$
DefVar $winst_link_folder$
DefVar $subregistry$
DefVar $winst_xml$
DefVar $winst_dos$
DefVar $winst_winbatch$
DefVar $execwith_test$
DefVar $compare_to_python$
DefVar $winst_ldap_search$
DefVar $winst_opsiServiceCall$
DefVar $winst_licensemanagement$
DefVar $winst_internalundocumented$
DefVar $winst_RunAsLoggedOnAdmin$
DefVar $winst_ProfileActions$
DefVar $winst_calculate$
DefVar $winst_encoding$
DefVar $winst_jsonfunctions$
DefVar $winst_crypt$
DefVar $winst_xml2$
DefVar $winst_macos$
DefVar $winst_wmi$
DefVar $winst_processinfo$
DefVar $winst_local_functions$
DefVar $winst_powershell$
DefVar $winst_regex$
DefVar $winst_networkcalc$
DefVar $winst_urlparser$
DefVar $winst_var_as_param$
DefVar $winst_certificates$
DefVar $winst_toml$
DefVar $InterestingFile$
DefVar $key$
DefVar $value$
DefVar $example$
DefVar $testfilepath$
DefVar $testfile$
DefVar $testfilesize$
DefVar $ErrorClientId$
DefVar $LdapSearchDn$
DefVar $LdapSearchAttributes$
DefVar $LdapHost$
DefVar $LdapPort$
DefVar $LdapUser$
DefVar $LdapPassword$
DefVar $LDAPBaseDN$
DefVar $LdapResultType$
DefVar $LdapFilter$
DefVar $SectionName$
DefVar $link_extension$
DefVar $link_subfolder$
DefVar $target$
DefVar $workdir$
DefVar $workfile$
DefVar $systemroot$
DefVar $pspolicy$
DefVar $architecture$
DefVar $GUI$
DefVar $mypython$

DefVar $opsi_script_test_helper_bin$
DefVar $opsi_script_test_helper_child_bin$
DefVar $opsi_script_test_helper_path$
DefVar $opsi_script_test_helper_bin_name$
DefVar $helper_child_bin_name$
DefVar $opsi_script_test_helper_bin_log$
DefVar $helper_child_bin_log$
DefVar $test_experimental$
DefVar $test_speed$


DefVar $Flag_winst_constants$
DefVar $Flag_winst_parametrizing$
DefVar $Flag_winst_string$
DefVar $Flag_infostest$
DefVar $Flag_winst_string_list$
DefVar $Flag_winst_controls$
DefVar $Flag_subtestsub$
DefVar $Flag_winst_file$
DefVar $Flag_winst_patches$
DefVar $Flag_winst_patch_hosts$
DefVar $Flag_winst_patch_text_file$
DefVar $Flag_winst_link_folder$
DefVar $Flag_winst_local_functions$
DefVar $Flag_subregistry$
DefVar $Flag_winst_xml$
DefVar $Flag_winst_xml2$
DefVar $Flag_winst_macos$
DefVar $Flag_winst_dos$
DefVar $Flag_winst_winbatch$
DefVar $Flag_execwith_test$
DefVar $Flag_compare_to_python$
DefVar $Flag_winst_ldap_search$
DefVar $Flag_winst_opsiServiceCall$
DefVar $Flag_licensemanagement$
;DefVar $Flag_winst_idapiconfig$
DefVar $Flag_internalundocumented$
DefVar $Flag_RunAsLoggedOnAdmin$
DefVar $Flag_ProfileActions$
DefVar $Flag_calculate$
DefVar $Flag_encoding$
DefVar $Flag_jsonfunctions$
DefVar $Flag_crypt$
DefVar $Flag_powershell$
DefVar $Flag_subregex$
DefVar $Flag_subnetworkcalc$
DefVar $Flag_suburlparser$
DefVar $Flag_subwmi$
DefVar $Flag_var_as_param$
DefVar $Flag_processinfo$
DefVar $Flag_certificates$
DefVar $Flag_toml$

DefStringList $list$
DefStringList $list1$
DefStringList $list2$
DefStringList $list3$
DefStringList $list4$
DefStringList $testlist0$
DefStringList $testlist1$
DefStringList $testlist2$
DefStringList $testlist3$
DefStringList $testlist4$
DefStringList $testlist5$
DefStringList $testlist6$
DefStringList $testlist7$
DefStringList $test1list1$
DefStringList $test2list1$
DefStringList $test1list2$
DefStringList $test2list2$
DefStringList $CompList1$
DefStringList $CompList2$

DefStringList $INST_ResultList$
DefStringList $INST_ResultList2$
DefStringList $INST_ResultList3$
DefStringList $languageInfo$
DefStringList $resultlist$

DefVar $INST_SearchKey$
DefVar $INST_SearchValue$
DefVar $INST_SearchResult$
DefVar $INST_SystemType$
DefVar $INST_error$
DefVar $language$
DefVar $OS$
DefVar $NTVersion$
DefVar $opsi_message_title$
DefVar $exitcode$
DefVar $pathDelim$
DefVar $pingcommand$
DefVar $ping5command$
DefVar $pingregex$
DefVar $difftime$
DefVar $foundsubsection$

DefVar $regWriteValue$

;File
DefVar $FileCopyTest$
DefVar $FileCopyTestSubDirectory$
DefVar $DirectorySubDirectory

; comapre_to_python
DefVar $result$

; LicenseManagement
DefVar $Lic_ProductId$
DefVar $LicensePool$
DefVar $licensekey$

defvar $captureproduct$
defvar $imagename$
defvar $depotid$
defvar $valuesListStr$
defvar $dotest$
defvar $adminuser_password$
defvar $orgpolicy$


; retrieve OS and NT Version


Set $OS$ = GetOS
; retrieve current language
set $languageInfo$ = getLocaleInfoMap
set $language$ = getValue("language_id_2chars", $languageInfo$)
if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.3")
	set $GUI$ = booltostring(runningWithGui)
else
	set $GUI$ = "true"
endif
;set $GUI$ = "false"

set $ProductId$ = "opsi-script-test"

switch $OS$
	case "Windows_nt"
		comment "We are running on Windows"
		Set $NTVersion$ = GetNTVersion
		set $MsVersion$ = GetMsVersionInfo
		Set $HomeTestFiles$ = "%opsiTmpDir%\testFiles"
		Set $opsi_script_test_helper_bin$ = "opsi-script-test-helper-win\opsiscripttesthelper.exe"
		Set $opsi_script_test_helper_child_bin$ = "opsi-script-test-helper-win\helperchild.exe"
		set $opsi_script_test_helper_path$ = "opsi-script-test-helper-win"
		set $helper_child_bin_log$ =  "helperchild.log"
		set $opsi_script_test_helper_bin_log$ = "opsiscripttesthelper.log"
		set $pathDelim$ = "\"
		
		; for ping parameters and errorcode see:
		; https://superuser.com/questions/403905/ping-from-windows-7-get-no-reply-but-sets-errorlevel-to-0
		set $pingcommand$ = "ping.exe"
		set $ping5command$ = $pingcommand$ +" -w 2999 -n 5 127.0.0.1"
		set $pingregex$ = '^ping.exe .*'
	endcase
	case "Linux"
		comment "We are running on Linux"
		Set $HomeTestFiles$ = "/tmp/opsi-script-test/testFiles"
		if $GUI$ = "true"
			Set $opsi_script_test_helper_bin$ = "opsi-script-test-helper-lin/64/opsiscripttesthelper"
			Set $opsi_script_test_helper_child_bin$ = "opsi-script-test-helper-lin/64/helperchild"
			set $helper_child_bin_log$ =  "helperchild.log"
			set $opsi_script_test_helper_bin_log$ = "opsiscripttesthelper.log"
		else
			Set $opsi_script_test_helper_bin$ = "opsi-script-test-helper-lin/64/opsiscripttesthelper_nogui"
			Set $opsi_script_test_helper_child_bin$ = "opsi-script-test-helper-lin/64/helperchild_nogui"
			set $helper_child_bin_log$ =  "helperchild_nogui.log"
			set $opsi_script_test_helper_bin_log$ = "opsiscripttesthelper_nogui.log"
		endif
		;		set $helper_child_bin_name$ =  '%ScriptPath%/'+$opsi_script_test_helper_child_bin$
		;		set $helper_child_bin_name$ =  ExtractFileName($opsi_script_test_helper_child_bin$)
		;		set $opsi_script_test_helper_bin_name$ =  '%ScriptPath%/'+$opsi_script_test_helper_bin$
		;		set $opsi_script_test_helper_bin_name$ =  ExtractFileName($opsi_script_test_helper_bin$)
		set $opsi_script_test_helper_path$ = "opsi-script-test-helper-lin"
		set $pathDelim$ = "/"
		set $pingcommand$ = "ping"
		set $ping5command$ = $pingcommand$ +" -c 5 127.0.0.1"
		set $pingregex$ = '^ping .*'
	endcase
	case "macos"
		comment "We are running on macOS"
		Set $HomeTestFiles$ = "/tmp/opsi-script-test/testFiles"
		if $GUI$ = "true"
			Set $opsi_script_test_helper_bin$ = "opsi-script-test-helper-mac/opsiscripttesthelper"
			Set $opsi_script_test_helper_child_bin$ = "opsi-script-test-helper-mac/helperchild"
			set $helper_child_bin_log$ =  "helperchild.log"
			set $opsi_script_test_helper_bin_log$ = "opsiscripttesthelper.log"
		else
			Set $opsi_script_test_helper_bin$ = "opsi-script-test-helper-mac/opsiscripttesthelper_nogui"
			Set $opsi_script_test_helper_child_bin$ = "opsi-script-test-helper-mac/helperchild_nogui"
			set $helper_child_bin_log$ =  "helperchild_nogui.log"
			set $opsi_script_test_helper_bin_log$ = "opsiscripttesthelper_nogui.log"
		endif
		set $opsi_script_test_helper_path$ = "opsi-script-test-helper-mac"
		set $pathDelim$ = "/"
		set $pingcommand$ = "/sbin/ping"
		set $ping5command$ = $pingcommand$ +" -c 5 127.0.0.1"
		set $pingregex$ = '^\/sbin\/ping .*'
	endcase
endswitch
set $helper_child_bin_name$ =  ExtractFileName ($opsi_script_test_helper_child_bin$)
set $opsi_script_test_helper_bin_name$ =  ExtractFileName ($opsi_script_test_helper_bin$)

Set $INST_SystemType$ = GetSystemType

if $INST_SystemType$ = "64 Bit System"
	set $architecture$ = "64"
else
	set $architecture$ = "32"
endif

Files_testFiles
set $FinalResult$ = "passed"


set $Lic_ProductId$ = "opsi-script-test"
set $LicensePool$ = "opsi-script-test-pool"



; Message at install time:
Message "Testing opsi-script ..."
;show product picture
ShowBitmap "%scriptpath%\opsi.png" $ProductId$

;if $MsVersion$ <= "5.0"
;	LogError "win2k is not supported because wmic is needed"
;	isFatalError
;endif

if "True" = GetProductProperty ("setfailed","False")
	LogError "set to fatal by property"
	;isFatalError
endif

set $test_experimental$ = GetProductProperty ("test_experimental","False")
set $test_speed$ = GetProductProperty ("test_speed","False")

set $ScriptLoglevel$ = GetProductProperty ("loglevel", "7")
setLoglevel=$ScriptLoglevel$


include_insert '%scriptpath%\opsi-script-test_setFlags.opsiscript'


if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.11.4.7")
	AutoActivityDisplay = true
endif


if ($Flag_winst_constants$ = "on") or ($MasterFlag$ = "on")
	include_insert '%scriptpath%\sub-scripts\constants.opsiscript'
endif

if ($Flag_winst_parametrizing$ = "on") or ($MasterFlag$ = "on")
	include_insert '%scriptpath%\sub-scripts\parametrizing.opsiscript'
endif

if ($Flag_winst_string$ = "on") or ($MasterFlag$ = "on")
	Message "testing string functions"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing string functions"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	Set $ExpectedResult$ = "o.k."
	; start testing
	set $TestResult$ = "o.k."
	
	; Strings in Strings (Nested String Values)
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	comment "EscapeString"
	set $ConstTest$ = takeString(0, loadTextFile("%ScriptPath%\test-files\string\compEscapeString.txt"))
	Set $tmp$ = 'he says "Yes"'
	set $CompValue$ = EscapeString: Set $tmp$ = 'he says "Yes"'
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	; String Concatenation
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	comment "String concat"
	set $ConstTest$ = "my text and your text"
	Set $String1$ = "my text"
	Set $String2$ = "and"
	Set $String3$ = "your text"
	Set $CompValue$ = $String1$ + " " + $String2$ + " " + $String3$
	
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	; String Functions which Return the OS Type
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	comment "GetOS"
	comment GetOS
	set $ConstTest$ = GetOS
	Switch $ConstTest$
		Case "WINDOWS_NT"
			set $list$ = shellCall("ver")
			set $CompValue$ = takeFirstStringContaining($list$,"Microsoft Windows")
			if not($CompValue$ = "")
				set $CompValue$ = "WINDOWS_NT"
			endif
		EndCase
		Case "LINUX"
			set $CompValue$ = takeString(0,shellCall("uname"))
		EndCase
		Case "MACOS"
			set $CompValue$ = takeString(0,shellCall("uname"))
			set $ConstTest$ = "Darwin"
			
		EndCase
		DefaultCase
			set $CompValue$ = "notexisting"
		EndCase
	EndSwitch
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	; GetNtVersion is deprecated - not tested anymore - use GetMsVersionInfo or GetMSVersionMap
	;comment ""
	;comment "-------------------------------------"
	;comment "Testing: "
	;comment "GetNtVersion"
	;set $ConstTest$ = GetNtVersion
	;set $CompValue$ = GetRegistryStringValue ("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion] CurrentVersion")
	;if ($CompValue$ = "5.0")
	;	set $CompValue$ = "Win2k"
	;endif
	;if ($CompValue$ = "5.1")
	;	set $CompValue$ = "WinXP"
	;endif
	;if ($CompValue$ = "5.2")
	;	set $CompValue$ = "Win NT 5.2"
	;endif
	;if ($CompValue$ = "6.0")
	;	set $CompValue$ = "Windows Vista"
	;endif
	;if ($CompValue$ = "6.1")
	;	set $CompValue$ = "Windows Vista"
	;endif
	;if ($ConstTest$ = $CompValue$)
	;	comment "passed"
	;else
	;	set $TestResult$ = "not o.k."
	;	LogWarning "failed"
	;endif
	
	if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.4.16")
		comment "-------------------------------------"
		comment "Testing: "
		comment "getOSArchitecture"
		set $ConstTest$ = getOSArchitecture
		if $OS$ = "Windows_NT"
			Set $tmp$ = GetSystemType
			if $tmp$ = "64 Bit System"
				set $CompValue$ = "x86_64"
			else
				set $CompValue$ = "x86_32"
			endif
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif
		if $OS$ = "Linux"
			Set $tmp$ = GetSystemType
			if $tmp$ = "64 Bit System"
				set $CompValue$ = "x86_64"
			else
				set $CompValue$ = "x86_32"
			endif
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif
		if $OS$ = "macos"
			Set $tmp$ = takeString(0, shellCall('uname -m'))
			if $tmp$ = "arm64"
				set $CompValue$ = "arm_64"
			else
				set $CompValue$ = "x86_64"
				if $tmp$ = "x86_64"
					set $list$ = shellCall('sysctl -in sysctl.proc_translated')
					if "1" = takestring(0, $list$)
						set $CompValue$ = "arm_64"
					endif
				endif
			endif
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif
	endif ; "4.12.4.16"
	
	if $OS$ = "Windows_NT"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		comment "GetMsVersionInfo"
		set $ConstTest$ = GetMsVersionInfo
		if CompareDotSeparatedNumbers(GetMsVersionInfo,">=","10.0")
			set $CompValue$ = GetRegistryStringValue ("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion] CurrentMajorVersionNumber")
			set $CompValue$ = $CompValue$+'.'+GetRegistryStringValue ("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion] CurrentMinorVersionNumber")
		else
			set $CompValue$ = GetRegistryStringValue ("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion] CurrentVersion")
		endif
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.4.35")
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			comment "GetMSVersionName"
			set $ConstTest$ = GetMSVersionName
			set $tmp$ = GetMSVersionInfo
			Switch $tmp$
				Case "6.1"
					set $CompValue$ = "7.0"
				EndCase
				Case "6.2"
					set $CompValue$ = "8.0"
				EndCase
				Case "6.3"
					set $CompValue$ = "8.1"
				EndCase
				Case "10.0"
					set $INST_Resultlist$ = getMSVersionMap
					if getValue("build_number", $INST_Resultlist$) int>= "22000"
						set $CompValue$ = "11.0"
					else
						set $CompValue$ = "10.0"
					endif
				EndCase
				DefaultCase
					set $CompValue$ = $tmp$
				EndCase
			EndSwitch
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif ; 4.12.4.35
		
		;if $MsVersion$ <= "5.0"
		if CompareDotSeparatedNumbers(GetMsVersionInfo,"<=","5.0")
			comment "not tested at win2k  because wmic is needed"
		else
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			comment "GetSystemType"
			set $ConstTest$ = GetSystemType
			DefStringList $wmic_systemtype_out$
			; started two times cause the stringnumberposition is wrong after the first time
			Set $wmic_systemtype_out$ = getOutstreamFromSection ('DosInAnIcon_retrieve_systemtype')
			DefVar $systemarch$
			Set $systemarch$ = TakeString (2,$wmic_systemtype_out$)
			;set $CompValue$ = GetRegistryStringValue ("[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node] ")
			if $systemarch$ = "x64-based PC  "
				set $CompValue$ = "64 Bit System"
			else
				set $CompValue$ = "x86 System"
			endif
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif
		
		;  String Functions for Retrieving Environment or Command Line Parameters
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "EnvVar"
		set $ConstTest$ = "C:"
		set $CompValue$ = EnvVar("SystemDrive")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif ; windows
	
	if $OS$="Linux"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "EnvVar"
		set $ConstTest$ = "/bin/sh"
		set $CompValue$ = EnvVar("SHELL")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			comment "seems not to work this way ..."
			;set $TestResult$ = "not o.k."
			;LogWarning "failed"
		endif
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	comment "ParamStr"
	comment ">> not tested yet"
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "GetLastExitCode"
	
	if $OS$ ="Windows_NT"
		Winbatch_exitcode_43_noquote_with_param
	else
		ShellInAnIcon_exit43
	endif
	set $ConstTest$ = "43"
	set $CompValue$ = getLastExitCode
	if ($ConstTest$ = $CompValue$)
		comment "Winbatch_testing exitcode passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "testing exitcode failed"
	endif
	
	if $OS$ ="Windows_NT"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "GetUserSID"
		set $ConstTest$ = "S-1-5-18"
		set $CompValue$ = GetUserSID("System")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif
	
	if CompareDotSeparatedNumbers("%OpsiscriptVersion%","4.11.1.2") >= "0"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "GetLoggedInUser"
		set $ConstTest$ = ""
		set $CompValue$ = GetLoggedInUser
		;if ($ConstTest$ = $CompValue$)
		;	comment "passed"
		;else
		;	set $TestResult$ = "not o.k."
		;	LogWarning "failed"
		;endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "GetUsercontext"
		setUsercontext = "opsi-script-test"
		set $ConstTest$ = "opsi-script-test"
		set $CompValue$ = GetUsercontext
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
	endif  ; 4.11.1.2
	
	
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	comment "SubstringBefore"
	set $ConstTest$ = "C:\programme\staroffice"
	set $CompValue$ = SubstringBefore ("C:\programme\staroffice\program\soffice.exe","\program\soffice.exe")
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	comment "SubstringBefore"
	set $ConstTest$ = "C:\programme\staroffice"
	set $tmp$ = "C:\programme\staroffice\program\soffice.exe"
	set $CompValue$ = SubstringBefore ($tmp$,"\program\soffice.exe")
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Trim"
	set $ConstTest$ = "dummy"
	set $tmp$ = " dummy "
	set $CompValue$ = Trim($tmp$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	if CompareDotSeparatedNumbers("%OpsiscriptVersion%","4.11.2.1") >= "0"
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "getValue"
		comment ""
		set $INST_Resultlist$ = createStringList("a=1","b=2","c=2")
		set $ConstTest$ = "2"
		set $CompValue$ = getValue("b", $INST_Resultlist$)
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		comment "white spaces around the separator are not part of key and value"
		comment "if the key does not exist we get NULL"
		set $INST_Resultlist$ = createStringList("a = 1","b = 2","c = 2")
		set $ConstTest$ = "2"
		set $CompValue$ = getValue("b", $INST_Resultlist$)
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "2"
		set $CompValue$ = getValue("b ", $INST_Resultlist$)
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "NULL"
		set $CompValue$ = getValue("Not Existing", $INST_Resultlist$)
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "getValueBySeparator"
		comment "getValueBySeparator winst function"
		set $INST_Resultlist$ = createStringList("a:1","b:2","c:2")
		set $ConstTest$ = "2"
		set $CompValue$ = getValueBySeparator("b", ":", $INST_Resultlist$)
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		set $INST_Resultlist$ = createStringList("a:1","b:2","c:2")
		set $ConstTest$ = "NULL"
		set $CompValue$ = getValueBySeparator("b", "=", $INST_Resultlist$)
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "unquote"
		comment ""
		set $ConstTest$ = "b"
		set $CompValue$ = unquote("'b'", "'")
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		comment "double quote"
		set $ConstTest$ = "b"
		set $CompValue$ = unquote('"b"', '"')
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		comment "quote string will be trimmed and then only the first char is used"
		comment "note: brackets are different chars"
		set $ConstTest$ = "b]"
		set $CompValue$ = unquote("[b]", " [{ ")
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		comment "not usable to remove brackets"
		set $ConstTest$ = "b]"
		set $CompValue$ = unquote("[b]", "[")
		set $CompValue$ = unquote($CompValue$,"]")
		set $CompValue$ = unquote("[b]", "]")
		set $CompValue$ = unquote($CompValue$,"[")
		set $CompValue$ = unquote(unquote("[b]", "["),"]")
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		comment "if string not quoted it will be come back without changes"
		set $ConstTest$ = "b"
		set $CompValue$ = unquote("b", "'")
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
	endif ; 4.11.2.1
	
	
	
	if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.11.5.2")
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "unquote2"
		comment ""
		set $ConstTest$ = "b"
		set $CompValue$ = unquote2("'b'", "'")
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		comment "double quote"
		set $ConstTest$ = "b"
		set $CompValue$ = unquote2('"b"', '"')
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		comment "quote string will be trimmed."
		comment "if quote string has two chars, the first will be used as start mark and second as end mark"
		comment "so it is usable to remove brackets"
		set $ConstTest$ = "b"
		set $CompValue$ = unquote2("[b]", " [] ")
		; is the same as  unquote(unquote("[b]", "["),"]")
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "b"
		set $CompValue$ = unquote2("{b}", " {} ")
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		set $ConstTest$ = "b]"
		set $CompValue$ = unquote2("[b]", "[")
		set $CompValue$ = unquote2($CompValue$,"]")
		set $CompValue$ = unquote2("[b]", "]")
		set $CompValue$ = unquote2($CompValue$,"[")
		set $CompValue$ = unquote2(unquote("[b]", "["),"]")
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		comment "if not quotes found at start AND end th string it will be come back without changes"
		set $CompValue$ = unquote2("[b]", "[")
		set $CompValue$ = unquote2("[b]", "]")
		set $CompValue$ = unquote2('"b]', "'")
		set $ConstTest$ = "'b"
		set $CompValue$ = unquote2("'b", "'")
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif ; 4.11.5.2
	
	
	if CompareDotSeparatedNumbers("%OpsiscriptVersion%","4.11.4.4") >= "0"
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "getValueFromFile"
		comment ""
		set $testfile$ = $HomeTestFiles$+"\dummy.txt"
		set $INST_Resultlist$ = createStringList("a=1","b=2","c=2")
		if saveTextFile($INST_Resultlist$, $testfile$)
			set $ConstTest$ = "2"
			set $CompValue$ = getValueFromFile("b", $testfile$)
			comment "compare values"
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		comment "white spaces around the separator are not part of key and value"
		comment "if the key does not exist we get NULL"
		set $INST_Resultlist$ = createStringList("a = 1","b = 2","c = 2")
		if saveTextFile($INST_Resultlist$, $testfile$)
			set $ConstTest$ = "2"
			set $CompValue$ = getValueFromFile("b", $testfile$)
			comment "compare values"
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			set $ConstTest$ = "2"
			set $CompValue$ = getValueFromFile("b ", $testfile$)
			comment "compare values"
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			if CompareDotSeparatedNumbers("%OpsiscriptVersion%","4.11.6.1") >= "0"
				set $ConstTest$ = ""
			else
				comment "This is a bug in opsi-script < 4.11.6": should be empty string"
				set $ConstTest$ = "NULL"
			endif
			set $CompValue$ = getValueFromFile("Not existing", $testfile$)
			comment "compare values"
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			if CompareDotSeparatedNumbers("%OpsiscriptVersion%","4.11.6.1") >= "0"
				set $ConstTest$ = ""
			else
				comment "This is a bug in opsi-script < 4.11.6": should be empty string"
				set $ConstTest$ = "NULL"
			endif
			set $CompValue$ = getValueFromFile("Not existing", "Not existing")
			comment "compare values"
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "getValueFromFileBySeparator"
		comment "getValueFromFileBySeparator winst function"
		set $INST_Resultlist$ = createStringList("a:1","b:2","c:2")
		if saveTextFile($INST_Resultlist$, $testfile$)
			set $ConstTest$ = "2"
			set $CompValue$ = getValueFromFileBySeparator("b", ":", $testfile$)
			comment "compare values"
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		set $INST_Resultlist$ = createStringList("a:1","b:2","c:2")
		if saveTextFile($INST_Resultlist$, $testfile$)
			if CompareDotSeparatedNumbers("%OpsiscriptVersion%","4.11.6.1") >= "0"
				set $ConstTest$ = ""
			else
				comment "This is a bug in opsi-script < 4.11.6": should be empty string"
				set $ConstTest$ = "NULL"
			endif
			set $CompValue$ = getValueFromFileBySeparator("b", "=", $testfile$)
			comment "compare values"
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $INST_Resultlist$ = createStringList("a:1","b:2","c:2")
		if saveTextFile($INST_Resultlist$, $testfile$)
			if CompareDotSeparatedNumbers("%OpsiscriptVersion%","4.11.6.1") >= "0"
				set $ConstTest$ = ""
			else
				comment "This is a bug in opsi-script < 4.11.6": should be empty string"
				set $ConstTest$ = "NULL"
			endif
			set $CompValue$ = getValueFromFileBySeparator("not existing", ":", $testfile$)
			comment "compare values"
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		set $INST_Resultlist$ = createStringList("a:1","b:2","c:2")
		if saveTextFile($INST_Resultlist$, $testfile$)
			if CompareDotSeparatedNumbers("%OpsiscriptVersion%","4.11.6.1") >= "0"
				set $ConstTest$ = ""
			else
				comment "This is a bug in opsi-script < 4.11.6": should be empty string"
				set $ConstTest$ = "NULL"
			endif
			set $CompValue$ = getValueFromFileBySeparator("b", "=", "not existing")
			comment "compare values"
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif ; 4.11.4.4
	
	
	; Additional String Functions
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "RandomStr"
	set $ConstTest$ = RandomStr
	set $CompValue$ = RandomStr
	if not(($ConstTest$ = $CompValue$) AND not($ConstTest$ = ""))
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "RandomStr"
	set $list$ = createStringList("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20")
	for %c% in $list$ do sub_random_pass_test
	
	DefVar $nTotalChars$
	DefVar $nLowerCases$
	DefVar $nUpperCases$
	DefVar $nDigits$
	DefVar $nSpecialChars$
	DefVar $inTotalChars$
	DefVar $inLowerCases$
	DefVar $inUpperCases$
	DefVar $inDigits$
	DefVar $inSpecialChars$
	
	
	DefFunc randomCharTester($i$ : string, ref $StringResult$ : string) : void
		if contains("abcdefghijklmnopqrstuvwxyz",strPart($StringResult$,$i$,"1"))
			set $nLowerCases$ = calculate($nLowerCases$+"+"+"1")
		endif
		if contains("ABCDEFGHIJKLMNOPQRSTUVWXYZ",strPart($StringResult$,$i$,"1"))
			set $nUpperCases$ = calculate($nUpperCases$+"+"+"1")
		endif
		if isNumber(strPart($StringResult$,$i$,"1"))
			set $nDigits$ = calculate($nDigits$+"+"+"1")
		endif
		if contains("!$()*+/;=?[]{}ß~§°",strPart($StringResult$,$i$,"1"))
			set $nSpecialChars$ = calculate($nSpecialChars$+"+"+"1")
		endif
	endfunc
	
	DefFunc randomstrTester($StringResult$ : string) :void
		if (strLength($StringResult$) INT >= $inTotalChars$)
			set $nLowerCases$ = "0"
			set $nUpperCases$ = "0"
			set $nDigits$ = "0"
			set $nSpecialChars$ = "0"
			for %i% = "1" to strLength($StringResult$) do randomCharTester("%i%",$StringResult$)
			if  ($nLowerCases$ INT>= $inLowerCases$ AND  $nUpperCases$ = $inUpperCases$ AND  $nDigits$ = $inDigits$ AND $nSpecialChars$ = $inSpecialChars$)
				comment "Testing randomstrWithParameters succeeded"
			else
				set $TestResult$ = "not o.k."
				LogWarning "Testing randomstrWithParameters failed"
			endif
		else
			set $TestResult$ = "not o.k."
			LogWarning "Testing randomstrWithParameters failed"
		endif
	endfunc
	
	set $inTotalChars$ = "10"
	set $inLowerCases$ = "3"
	set $inUpperCases$ = "2"
	set $inDigits$ = "4"
	set $inSpecialChars$ = "1"
	set $ConstTest$ = randomstrWithParameters($inTotalChars$,$inLowerCases$,$inUpperCases$,$inDigits$,$inSpecialChars$)
	randomstrTester($ConstTest$)
	
	set $inTotalChars$ = "10"
	set $inLowerCases$ = "0"
	set $inUpperCases$ = "1"
	set $inDigits$ = "1"
	set $inSpecialChars$ = "8"
	set $ConstTest$ = randomstrWithParameters($inTotalChars$,$inLowerCases$,$inUpperCases$,$inDigits$,$inSpecialChars$)
	randomstrTester($ConstTest$)
	
	set $inTotalChars$ = "5"
	set $inLowerCases$ = "0"
	set $inUpperCases$ = "1"
	set $inDigits$ = "1"
	set $inSpecialChars$ = "8"
	set $ConstTest$ = randomstrWithParameters($inTotalChars$,$inLowerCases$,$inUpperCases$,$inDigits$,$inSpecialChars$)
	randomstrTester($ConstTest$)
	
	set $inTotalChars$ = "15"
	set $inLowerCases$ = "0"
	set $inUpperCases$ = "1"
	set $inDigits$ = "1"
	set $inSpecialChars$ = "8"
	set $ConstTest$ = randomstrWithParameters($inTotalChars$,$inLowerCases$,$inUpperCases$,$inDigits$,$inSpecialChars$)
	randomstrTester($ConstTest$)
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "CompareDotSeparatedNumbers (Bool)"
	set $string1$ = "1.2.3.4.5"
	set $string2$ = "1.2.3.4.5"
	if CompareDotSeparatedNumbers($string1$, "<", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedNumbers($string1$, "<=", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedNumbers($string1$, "=<", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedNumbers($string1$, "=", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedNumbers($string1$, ">=", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedNumbers($string1$, "=>", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedNumbers($string1$, ">", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	
	set $string1$ = "1.20.3.4.5"
	set $string2$ = "1.2.30.4.5"
	if CompareDotSeparatedNumbers($string1$, "<", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedNumbers($string1$, "<=", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedNumbers($string1$, "=<", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedNumbers($string1$, "=", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedNumbers($string1$, ">=", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedNumbers($string1$, "=>", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedNumbers($string1$, ">", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $string1$ = "1.2.30.4.5"
	set $string2$ = "1.20.30.4.5"
	if CompareDotSeparatedNumbers($string1$, "<", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedNumbers($string1$, "<=", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedNumbers($string1$, "=<", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedNumbers($string1$, "=", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedNumbers($string1$, ">=", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedNumbers($string1$, "=>", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedNumbers($string1$, ">", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	
	if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.4.28")
		if CompareDotSeparatedNumbers("4.2.2", ">", "4.2.00079")
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		if CompareDotSeparatedNumbers("0.9.8h", ">", "0.9.8e")
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif ; 4.12.4.28
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "CompareDotSeparatedStrings (Bool)"
	set $string1$ = "1.a.b.c.3"
	set $string2$ = "1.a.b.c.3"
	if CompareDotSeparatedStrings($string1$, "<", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedStrings($string1$, "<=", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedStrings($string1$, "=<", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedStrings($string1$, "=", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedStrings($string1$, ">=", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedStrings($string1$, "=>", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedStrings($string1$, ">", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	
	set $string1$ = "1.a.cb.c.3"
	set $string2$ = "1.a.b.c.3"
	if CompareDotSeparatedStrings($string1$, "<", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedStrings($string1$, "<=", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedStrings($string1$, "=<", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedStrings($string1$, "=", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedStrings($string1$, ">=", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedStrings($string1$, "=>", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedStrings($string1$, ">", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $string1$ = "1.a.ab.c.3"
	set $string2$ = "1.a.b.c.3"
	if CompareDotSeparatedStrings($string1$, "<", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedStrings($string1$, "<=", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedStrings($string1$, "=<", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedStrings($string1$, "=", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedStrings($string1$, ">=", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedStrings($string1$, "=>", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedStrings($string1$, ">", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "CompareDotSeparatedNumbers"
	set $string1$ = "1.2.3.4.5"
	set $string2$ = "1.2.3.4.5"
	set $ConstTest$ = "0"
	set $CompValue$ = CompareDotSeparatedNumbers($string1$, $string2$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
		comment $string1$+" is equal to "+$string2$
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $string1$ = "1.2.31.4.5"
	set $string2$ = "1.2.13.4.5"
	set $ConstTest$ = "1"
	set $CompValue$ = CompareDotSeparatedNumbers($string1$, $string2$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
		comment $string1$+" is higher then "+$string2$
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $string1$ = "1.2.3.4.5"
	set $string2$ = "1.2.13.4.5"
	set $ConstTest$ = "-1"
	set $CompValue$ = CompareDotSeparatedNumbers($string1$, $string2$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
		comment $string1$+" is lower then "+$string2$
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "CompareDotSeparatedStrings"
	set $string1$ = "1.a.b.c.3"
	set $string2$ = "1.a.b.c.3"
	set $ConstTest$ = "0"
	set $CompValue$ = CompareDotSeparatedStrings($string1$, $string2$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
		comment $string1$+" is equal to "+$string2$
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $string1$ = "1.a.b.c.3"
	set $string2$ = "1.A.B.C.3"
	set $ConstTest$ = "0"
	set $CompValue$ = CompareDotSeparatedStrings($string1$, $string2$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
		comment $string1$+" is equal to "+$string2$
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $string1$ = "1.a.cb.c.3"
	set $string2$ = "1.a.b.c.3"
	set $ConstTest$ = "1"
	set $CompValue$ = CompareDotSeparatedStrings($string1$, $string2$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
		comment $string1$+" is higher then "+$string2$
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $string1$ = "1.a.ab.c.3"
	set $string2$ = "1.a.b.c.3"
	set $ConstTest$ = "-1"
	set $CompValue$ = CompareDotSeparatedStrings($string1$, $string2$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
		comment $string1$+" is lower then "+$string2$
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $string1$ = "1.2.13.4.5"
	set $string2$ = "1.2.3.4.5"
	set $ConstTest$ = "-1"
	set $CompValue$ = CompareDotSeparatedStrings($string1$, $string2$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
		comment $string1$+" is lower then "+$string2$
		comment "using CompareDotSeparatedStrings give wrong results on numbers"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $string1$ = "1.2.3.4.5"
	set $string2$ = "1.2.13.4.5"
	set $ConstTest$ = "1"
	set $CompValue$ = CompareDotSeparatedStrings($string1$, $string2$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
		comment $string1$+" is higher then "+$string2$
		comment "using CompareDotSeparatedStrings give wrong results on numbers"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	
	
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Umlaut"
	set $ConstTest$ = "üöäßÖÜÄáéíóàèùìòâêûîô"
	set $CompValue$ = "üöäßÖÜÄáéíóàèùìòâêûîô"
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	if CompareDotSeparatedNumbers("%OpsiscriptVersion%","4.11.1.2") >= "0"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "getUserContext"
		set $ConstTest$ = getUserContext
	else
		comment "getUserContext not tested, minimum winst needed: 4.11.1.2"
	endif
	
	if CompareDotSeparatedNumbers("%OpsiscriptVersion%","4.11.3.2") >= "0"
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "stringReplace"
		set $ConstTest$ = "123451234512345"
		set $CompValue$ = stringReplace("1xy451Xy451XY45","xy","23")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "contains"
		set $ConstTest$ = "1xy451Xy451XY45"
		set $CompValue$ ="xy"
		if contains($ConstTest$, $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $CompValue$ ="xY"
		if not(contains($ConstTest$, $CompValue$))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "strPos"
		set $tmp$ = "1xY451Xy451xy45"
		set $ConstTest$ = "7"
		set $CompValue$ = strPos($tmp$,"Xy")
		if $ConstTest$ = $CompValue$
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $tmp$ = lower("1xY451Xy451xy45")
		set $ConstTest$ = "2"
		set $CompValue$ = strPos($tmp$,lower("xy"))
		if $ConstTest$ = $CompValue$
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "strLength"
		set $tmp$ = "123456789"
		set $ConstTest$ = "9"
		set $CompValue$ = strLength($tmp$)
		if $ConstTest$ = $CompValue$
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $tmp$ = ""
		set $ConstTest$ = "0"
		set $CompValue$ = strLength($tmp$)
		if $ConstTest$ = $CompValue$
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "strPart"
		set $tmp$ = "123456789"
		set $ConstTest$ = "34"
		set $CompValue$ = strPart($tmp$,"3","2")
		if $ConstTest$ = $CompValue$
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $tmp$ = "123456789"
		set $ConstTest$ = "56789"
		set $CompValue$ = strPart($tmp$, strPos($tmp$,"56"),strLength($tmp$))
		if $ConstTest$ = $CompValue$
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "lower"
		set $ConstTest$ = "12threefour_!"
		set $CompValue$ = lower("12ThreeFour_!")
		if $ConstTest$ = $CompValue$
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		message "upper"
		set $ConstTest$ = "12THREEFOUR_!"
		set $CompValue$ = upper("12ThreeFour_!")
		if $ConstTest$ = $CompValue$
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "isnumber"
		set $ConstTest$ = "1"
		if isNumber($ConstTest$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "12345"
		if isNumber($ConstTest$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "12.34"
		if not(isNumber($ConstTest$))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "five"
		if not(isNumber($ConstTest$))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "12,23"
		if not(isNumber($ConstTest$))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		if not ("%opsiserviceURL%" = "")
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "getMyIpByTarget"
			;set $ConstTest$ = "%IPAddress%"
			switch $OS$
				case "Windows_nt"
					set $list1$ = getOutStreamFromSection("DosInAnIcon_ipconfig_all")
					;set $tmp$ = takeString(34, $list1$)
					set $tmp$ = takeFirstStringContaining($list1$,"IPv4")
					set $tmp$ = trim($tmp$)
					set $CompValue$ = takeString(-1, splitString ($tmp$, ":"))
					if contains($CompValue$, "(")
						set $CompValue$ = trim(takeString(0, splitString ($CompValue$, "(")))
						;trim(stringReplace($CompValue$,"(Preferred)",""))
					endif
				endcase
				case "Linux"
					set $CompValue$ = GetIpByName(takeString(0,shellCall("hostname -f")))
					if "vmnat.local" = takeString(0,shellCall("hostname -d"))
						if takeString(0,shellCall("hostname")) = "sepiella"
							set $CompValue$ = GetIpByName(takeString(0,shellCall("hostname"))+".uib.local")
						endif
					endif
					if $CompValue$ = "172.16.166.1"
						set $CompValue$ = GetIpByName(takeString(0,shellCall("hostname"))+".uib.local")
					endif
					if ($CompValue$ = "127.0.0.1") or ($CompValue$ = "127.0.1.1")
						set $CompValue$ = getMyIpByTarget(getMyIpByTarget("%opsiServer%"))
					endif
				endcase
				case "macos"
					set $list1$ = getOutStreamFromSection("ShellInAnIcon_ifconfig_all")
					set $CompValue$ = GetIpByName(takeString(0,shellCall("hostname -f")))
					if not (isValidIP4 ($CompValue$))
						set $CompValue$ =  takestring(0,shellCall("ipconfig getifaddr en1"))
					endif
					if not (isValidIP4 ($CompValue$))
						set $CompValue$ =  takestring(0,shellCall("ipconfig getifaddr en5"))
					endif
					if not (isValidIP4 ($CompValue$))
						set $CompValue$ =  takestring(0,shellCall("ipconfig getifaddr en0"))
					endif
				endcase
			endswitch
			set $string1$ = "%opsiServer%"
			set $ConstTest$ = getMyIpByTarget($string1$)
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif ; opsi service
		
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "getIpByName"
		set $ConstTest$ = "127.0.0.1"
		set $string1$ = "localhost"
		markErrorNumber
		set $CompValue$ = getIpByName($string1$)
		if $CompValue$ = "127.0.1.1"
			set $CompValue$ = "127.0.0.1"
		endif
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			if errorsOccuredSinceMark > 0
				set $TestResult$ = "not o.k."
			endif
			LogWarning "failed"
		endif
		if not("%opsiServiceUser%" = "")
			markErrorNumber
			set $ConstTest$ = getMyIpByTarget(getIpByName("%opsiServiceUser%"))
			set $CompValue$ = getIpByName("%opsiServiceUser%")
			if $CompValue$ = "127.0.1.1"
				set $CompValue$ = "127.0.0.1"
			endif
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				if errorsOccuredSinceMark > 0
					set $TestResult$ = "not o.k."
				endif
				LogWarning "failed"
			endif
		endif
		
		;markErrorNumber
		;set $ConstTest$ = getMyIpByTarget(getIpByName("%PCName%"))
		;set $CompValue$ = getIpByName("%PCName%")
		;if ($ConstTest$ = $CompValue$)
		;	comment "passed"
		;else
		;	if errorsOccuredSinceMark = 0
		;		set $TestResult$ = "not o.k."
		;	endif
		;	LogWarning "failed"
		;endif
		
		markErrorNumber
		set $ConstTest$ = getMyIpByTarget(getIpByName("%PCName%"))
		set $CompValue$ = getIpByName("%PCName%")
		if $CompValue$ = "127.0.1.1"
			set $CompValue$ = "127.0.0.1"
		endif
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			if errorsOccuredSinceMark > 0
				set $TestResult$ = "not o.k."
			endif
			LogWarning "failed"
		endif
		
		
		
	else
		comment "stringReplace not tested, minimum winst needed: 4.11.3.2"
	endif
	
	sub_compareResult
	set $winst_string$ = $SubResult$
endif

if ($Flag_calculate$ = "on") or ($MasterFlag$ = "on")
	include_insert '%scriptpath%\sub-scripts\calculate.opsiscript'
endif


if ($Flag_infostest$ = "on") or ($MasterFlag$ = "on")
	Message "testing file and versions infos"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing file and versions infos"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	
	
	Set $ExpectedResult$ = "o.k."
	
	set $TestResult$ = "o.k."
	
	if $OS$ = "Windows_NT"
		; Chapter 6.4.1 Info Maps
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "File Infos Test"
		
		comment "ask helper.exe for version info and catch it from output"
		set $INST_ResultList$ = getOutStreamFromSection("DosInAnIcon_helper_version")
		set $ConstTest$ = takeFirstStringContaining($INST_ResultList$,"Version")
		set $ConstTest$ = trim(takeString(1, splitString($ConstTest$,':')))
		comment "get version info from helper.exe by winst function"
		set $InterestingFile$ = "%scriptpath%\"+$opsi_script_test_helper_bin$
		set $INST_Resultlist$ = getFileInfoMap($InterestingFile$)
		set $example$ = getValue("language name 0", $INST_Resultlist$ )
		set $CompValue$ = getValue("fileversion", $INST_Resultlist$ )
		
		for %line% in $INST_Resultlist$ do sub_showEntry
		
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		set $InterestingFile$ = "%OpsiscriptDir%\opsi-script.exe"
		if not (FileExists($InterestingFile$))
			set $InterestingFile$ = "%OpsiscriptDir%\winst32.exe"
		endif
		set $INST_Resultlist$ = getFileInfoMap($InterestingFile$)
		for %line% in $INST_Resultlist$ do sub_showEntry
		
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "Locale Infos"
		set  $INST_Resultlist$ = getLocaleInfoMap
		comment "some examples"
		set $example$ = getValue("language_id_2chars", $INST_Resultlist$)
		set $example$ = getValue("language_id", $INST_Resultlist$)
		set $example$ = getValue("localized_name_of_language", $INST_Resultlist$)
		set $example$ = getValue("English_name_of_language", $INST_Resultlist$)
		set $example$ = getValue("native_name_of_language", $INST_Resultlist$)
		set $example$ = getValue("country_code", $INST_Resultlist$)
		set $example$ = getValue("English_name_of_country", $INST_Resultlist$)
		set $example$ = getValue("abbreviated_country_name", $INST_Resultlist$)
		set $example$ = getValue("native_name_of_country", $INST_Resultlist$)
		set $example$ = getValue("default_language_id", $INST_Resultlist$)
		
		comment ""
		comment "all infos"
		for %line% in $INST_Resultlist$ do sub_showEntry
		set $CompValue$ = getValue("default_language_id", $INST_Resultlist$)
		set $INST_Resultlist2$ = getOutStreamFromSection('DosInAnIcon_wmi_get_locale')
		set $ConstTest$ = Trim(takeFirstStringContaining($INST_Resultlist2$, $CompValue$))
		;if $MsVersion$ <= "5.0"
		if CompareDotSeparatedNumbers(GetMsVersionInfo,"<=","5.0")
			comment "not tested at win2k  because wmic is needed"
		else
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "getMSVersionMap"
		comment "get value by winst function"
		set $INST_Resultlist$ = getMSVersionMap
		set $CompValue$ = getValue("product_type_nr", $INST_Resultlist$)
		comment "get value by alternate way"
		set $INST_Resultlist2$ = getOutStreamFromSection('DosInAnIcon_get_wmi_producttype')
		set $ConstTest$ = Trim(takeString(2,$INST_Resultlist2$))
		;if $MsVersion$ <= "5.0"
		if CompareDotSeparatedNumbers(GetMsVersionInfo,"5.0") <= "0"
			comment "not tested at win2k  because wmic is needed"
		else
			comment "compare values"
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif
		set $ConstTest$ = GetMSVersionInfo
		set $CompValue$ = getValue("major_version", $INST_Resultlist$)+"."+getValue("minor_version", $INST_Resultlist$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		for %line% in $INST_Resultlist$ do sub_showEntry
		
		set $INST_Resultlist$ = getSlowInfoMap("not-a-product","off")
		comment ""
		comment "all infos"
		for %line% in $INST_Resultlist$ do sub_showEntry
	endif ; windows
	
	if $OS$ = "Linux"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "getLinuxVersionMap"
		comment "get value by winst function"
		set $INST_Resultlist$ = getLinuxVersionMap
		set $CompValue$ = getValue("Distributor ID", $INST_Resultlist$)
		comment "get value by alternate way"
		if $CompValue$ = 'Ubuntu'
			ShellInAnIcon_get_distribution
			if getLastExitcode = "0"
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif ; Ubuntu
	endif ; Linux
	
	if $OS$ = "macos"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "getMacVersionMap"
		comment "get value by winst function"
		set $INST_Resultlist$ = getMacosVersionMap
		set $CompValue$ = getValue("release", $INST_Resultlist$)
		comment "get value by alternate way"
		set $ConstTest$ = takestring(0,shellcall('sw_vers -productVersion'))
		if $CompValue$ = $ConstTest$
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = getMacosVersionInfo
		if $CompValue$ = $ConstTest$
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
	endif ; macos
	
	
	if CompareDotSeparatedNumbers("%OpsiscriptVersion%","4.11.2.1") >= "0"
		if not ("%installingProdName%" = "")
			comment "we are in opsi service mode"
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "getProductMap"
			comment "get value by winst function"
			set $INST_Resultlist$ = getProductMap
			set $string1$ = getValue("id", $INST_Resultlist$)
			set $string2$ = getValue("productVersion", $INST_Resultlist$)
			set $string3$ = getValue("packageVersion", $INST_Resultlist$)
			set $CompValue$ = $string1$+"_"+$string2$+"-"+$string3$
			comment "get value by alternate way"
			set $ConstTest$ = "%installingProdName%_%installingProdVersion%"
			comment "compare values"
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			for %line% in $INST_Resultlist$ do sub_showEntry
		endif
	endif
	
	if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.11.5.1")
		if ($OS$ = "windows_nt")
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "getHWBiosInfoMap"
			comment "get value by winst function"
			set $INST_Resultlist$ = getHWBiosInfoMap
			if count($INST_Resultlist$) int> "0"
				for %line% in $INST_Resultlist$ do sub_showEntry
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif
	endif
	
	
	;comment ""
	;comment "-------------------------------------"
	;comment "Testing: "
	;message "getSlowInfoCache"
	;set  $INST_Resultlist$ = getSlowInfoMap("FreePDF_XP","off")
	;comment ""
	;comment "all infos"
	;for %line% in $INST_Resultlist$ do sub_showEntry
	;set $CompValue$ = getValue("binaryname", $INST_Resultlist$)
	;set $ConstTest$ = 'C:\Programme\FreePDF_XP\fpassist.exe'
	
	;if ($ConstTest$ = $CompValue$)
	;	comment "passed"
	;else
	;	set $TestResult$ = "not o.k."
	;	LogWarning "failed"
	;endif
	
	;	set  $INST_Resultlist$ = getSlowInfoMap("OpenSSL-0.9.8h-1_is1","off")
	;	comment ""
	;	comment "all infos"
	;	for %line% in $INST_Resultlist$ do sub_showEntry
	;	set $CompValue$ = getValue("binaryname", $INST_Resultlist$)
	;	;set $ConstTest$ = '%ProgramFilesDir%\OpenSSL\bin\bftest.exe'
	;	set $ConstTest$ = '%ProgramFilesDir%\OpenSSL\bin\ssltest.exe'
	;
	;	if ($ConstTest$ = $CompValue$)
	;		comment "passed"
	;	else
	;		set $TestResult$ = "not o.k."
	;		LogWarning "failed"
	;	endif
	
	
	
	
	sub_compareResult
	set $infostest$ = $SubResult$
endif


if ($Flag_winst_controls$ = "on") or ($MasterFlag$ = "on")
	include_insert '%scriptpath%\sub-scripts\controls.opsiscript'
endif

if ($Flag_subtestsub$ = "on") or ($MasterFlag$ = "on")
	Message "testing sub"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing sub"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	Set $ExpectedResult$ = "o.k."
	set $TestResult$ = ""
	
	set $AktTestSubScript$ = "%ScriptPath%\test-files\sub\subtestsub.ins"
	sub_executeTest
	set $subtestsub$ = $SubResult$
endif

sub "%scriptpath%\sub-scripts\filestest.opsiscript"

;if ($Flag_winst_patches$ = "on") or ($MasterFlag$ = "on")
;	Message "testing patches functions"
sub "%scriptpath%\sub-scripts\patchesini.opsiscript"


if ($Flag_winst_patch_hosts$ = "on") or ($MasterFlag$ = "on")
	include_insert '%scriptpath%\sub-scripts\patchHosts.opsiscript'
endif

if ($Flag_winst_patch_text_file$ = "on") or ($MasterFlag$ = "on")
	Message "testing PatchTextFile functions"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing PatchTextFile functions"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	Set $ExpectedResult$ = "o.k."
	
	set $TestResult$ = "o.k."
	Files_copy_patchtextfile
	; 7.5 PatchTextFile Sections
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Set_Netscape_User_Pref"
	PatchTextFile_Set_Netscape_User_Pref $HomeTestFiles$+"\prefs.js"
	set $ConstTest$ = 'user_pref("browser.startup.homepage", "http://uib.de");'
	set $list1$ = loadTextFile($HomeTestFiles$+"\prefs.js")
	Set $CompValue$ = Trim(takeFirstStringContaining($list1$, "http://uib.de"))
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "AddStringListElement_To_Netscape_User_Pref"
	PatchTextFile_AddStringListElement_To_Netscape_User_Pref $HomeTestFiles$+"\prefs.js"
	set $ConstTest$ = 'user_pref("intl.charsetmenu.browser.cache", "us-ascii, ISO-8859-1, UTF-8,UTF-16, UTF-32");'
	set $list1$ = loadTextFile($HomeTestFiles$+"\prefs.js")
	Set $CompValue$ = Trim(takeFirstStringContaining($list1$,"intl.charsetmenu.browser.cache"))
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Set_Mozilla_Pref"
	PatchTextFile_Set_Mozilla_pref_Pref $HomeTestFiles$+"\prefs.js"
	set $list1$ = loadTextFile($HomeTestFiles$+"\prefs.js")
	set $ConstTest$ = 'user_pref("key.1", "http://opsi.org");'
	Set $CompValue$ = Trim(takeFirstStringContaining($list1$,"key.1"))
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	set $ConstTest$ = 'pref("key.2", "http://opsi.org");'
	Set $CompValue$ = Trim(takeFirstStringContaining($list1$,"key.2"))
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	set $ConstTest$ = 'lock_pref("key.3", "http://opsi.org");'
	Set $CompValue$ = Trim(takeFirstStringContaining($list1$,"key.3"))
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	set $ConstTest$ = 'foobar("key.4", "http://opsi.org");'
	Set $CompValue$ = Trim(takeFirstStringContaining($list1$,"key.4"))
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "AddStringListElement_To_Netscape_User_Pref"
	PatchTextFile_AddStringListElement_To_Mozilla_Pref $HomeTestFiles$+"\prefs.js"
	set $ConstTest$ = 'user_pref("network.proxy.no_proxies_on", "localhost, 127.0.0.1, vmix, bonifax, opsi.org");'
	set $list1$ = loadTextFile($HomeTestFiles$+"\prefs.js")
	Set $CompValue$ = Trim(takeFirstStringContaining($list1$,"network.proxy.no_proxies_on"))
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "DeleteTheLine / AdvanceLine"
	PatchTextFile_AdvanceLine_DeleteTheLine $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line containing dummy1."
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeString(0, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "FindLine"
	PatchTextFile_findLine $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line1 with no sense"
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeString(0, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "FindLine_StartingWith"
	PatchTextFile_FindLine_StartingWith $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line3 with no sense"
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeString(3, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "FindLine_Containing"
	PatchTextFile_FindLine_Containing $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line2 with no sense"
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeString(1, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "GoToTop"
	PatchTextFile_GoToTop $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line2 with no sense"
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeString(0, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "GoToBottom"
	PatchTextFile_GoToBottom $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line2 with no sense"
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeString(0, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "AddLine"
	PatchTextFile_AddLine $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line added by winst"
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeFirstStringContaining($list1$, $ConstTest$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "InsertLine"
	PatchTextFile_InsertLine $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line inserted by winst"
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeFirstStringContaining($list1$, $ConstTest$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "AppendLine"
	PatchTextFile_AppendLine $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line appended by winst"
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeFirstStringContaining($list1$, $ConstTest$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Append_File"
	PatchTextFile_Append_File $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line3appendbyFile"
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeFirstStringContaining($list1$, $ConstTest$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Subtract_File"
	PatchTextFile_Subtract_File $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line1appendbyFile"
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeFirstStringContaining($list1$, $ConstTest$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "SaveToFile"
	PatchTextFile_SaveToFile $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line1appendbyFile"
	if (fileExists($HomeTestFiles$+"\savetofile.txt"))
		set $list1$ = loadTextFile($HomeTestFiles$+"\savetofile.txt")
		Set $CompValue$ = takeFirstStringContaining($list1$, $ConstTest$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Sorted"
	PatchTextFile_Sorted $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line0appendbyFile"
	set $ConstTest2$ = "Line4appendbyFile"
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeString(0, $list1$)
	Set $CompValue2$ = takeString(-1, $list1$)
	if (($ConstTest$ = $CompValue$) AND ($ConstTest2$ = $CompValue2$))
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	if CompareDotSeparatedNumbers("%OpsiscriptVersion%","4.11.4.6") >= "0"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "key value pairs"
		PatchTextFile_setvalues $HomeTestFiles$ + "\dummy.txt"
		set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
		set $ConstTest$ = 'no'
		set $ConstTest2$ = "so_tight"
		Set $CompValue$ = getValue("set me to no", $list1$)
		Set $CompValue2$ = getValue("tight", $list1$)
		if (($ConstTest$ = $CompValue$) AND ($ConstTest2$ = $CompValue2$))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "java!"
		set $ConstTest2$ = "great"
		Set $CompValue$ = getValuebySeparator("divided by a colon", ":", $list1$)
		Set $CompValue2$ = getValuebySeparator("divided by a greater-than sign", ">",$list1$)
		if (($ConstTest$ = $CompValue$) AND ($ConstTest2$ = $CompValue2$))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "search and replace"
		PatchTextFile_searchAndReplace $HomeTestFiles$ + "\dummy.txt"
		set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
		set $ConstTest$ = "lazarus!"
		Set $CompValue$ = getValuebySeparator("divided by a colon", ":", $list1$)
		if (($ConstTest$ = $CompValue$))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif ; 4.11.4.6
	
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "config file example"
	PatchTextFile_vmnet8_config $HomeTestFiles$ + "\vmnet8.txt"
	set $ConstTest$ = "0"
	set $list1$ = loadTextFile($HomeTestFiles$+"\vmnet8.txt")
	Set $CompValue$ = count($list1$)
	if $ConstTest$ = $CompValue$
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	Files_empty_folder
	
	;if not($OS$ = 'macos')
	if CompareDotSeparatedNumbers("%OpsiscriptVersion%","4.12.4.27") >= "0"
		
		Files_profile_copy /AllUserProfiles
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "DeleteTheLine / AdvanceLine"
		PatchTextFile_AdvanceLine_DeleteTheLine "%userprofiledir%\opsi-winst-test\dummy.txt" /AllUserProfiles
		set $tmp$ = "0"
		set $ConstTest$ = "Line containing dummy1."
		set $list1$ = getProfilesDirList
		for %s% in $list1$ do sub_check_profile_txt
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "FindLine"
		PatchTextFile_findLine "%userprofiledir%\opsi-winst-test\dummy.txt" /AllUserProfiles
		set $ConstTest$ = "Line1 with no sense"
		set $tmp$ = "0"
		set $list1$ = getProfilesDirList
		for %s% in $list1$ do sub_check_profile_txt
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "FindLine_StartingWith"
		PatchTextFile_FindLine_StartingWith "%userprofiledir%\opsi-winst-test\dummy.txt" /AllUserProfiles
		set $ConstTest$ = "Line3 with no sense"
		set $tmp$ = "3"
		set $list1$ = getProfilesDirList
		for %s% in $list1$ do sub_check_profile_txt
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "FindLine_Containing"
		PatchTextFile_FindLine_Containing "%userprofiledir%\opsi-winst-test\dummy.txt" /AllUserProfiles
		set $ConstTest$ = "Line2 with no sense"
		set $tmp$ = "1"
		set $list1$ = getProfilesDirList
		for %s% in $list1$ do sub_check_profile_txt
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "GoToTop"
		PatchTextFile_GoToTop "%userprofiledir%\opsi-winst-test\dummy.txt" /AllUserProfiles
		set $ConstTest$ = "Line2 with no sense"
		set $tmp$ = "0"
		set $list1$ = getProfilesDirList
		for %s% in $list1$ do sub_check_profile_txt
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "GoToBottom"
		PatchTextFile_GoToBottom "%userprofiledir%\opsi-winst-test\dummy.txt" /AllUserProfiles
		set $ConstTest$ = "Line2 with no sense"
		set $tmp$ = "0"
		set $list1$ = getProfilesDirList
		for %s% in $list1$ do sub_check_profile_txt
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "AddLine"
		PatchTextFile_AddLine "%userprofiledir%\opsi-winst-test\dummy.txt" /AllUserProfiles
		set $ConstTest$ = "Line added by winst"
		set $tmp$ = "1"
		set $list1$ = getProfilesDirList
		for %s% in $list1$ do sub_check_profile_txt
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "InsertLine"
		PatchTextFile_InsertLine "%userprofiledir%\opsi-winst-test\dummy.txt" /AllUserProfiles
		set $ConstTest$ = "Line inserted by winst"
		set $tmp$ = "1"
		set $list1$ = getProfilesDirList
		for %s% in $list1$ do sub_check_profile_txt
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "AppendLine"
		PatchTextFile_AppendLine "%userprofiledir%\opsi-winst-test\dummy.txt" /AllUserProfiles
		set $ConstTest$ = "Line appended by winst"
		set $tmp$ = "3"
		set $list1$ = getProfilesDirList
		for %s% in $list1$ do sub_check_profile_txt
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "Append_File"
		PatchTextFile_Append_File_prof "%userprofiledir%\opsi-winst-test\dummy.txt" /AllUserProfiles
		set $ConstTest$ = "Line3appendbyFile"
		set $tmp$ = "6"
		set $list1$ = getProfilesDirList
		for %s% in $list1$ do sub_check_profile_txt
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "Subtract_File"
		PatchTextFile_Subtract_File_prof "%userprofiledir%\opsi-winst-test\dummy.txt" /AllUserProfiles
		set $ConstTest$ = "Line1appendbyFile"
		set $list1$ = getProfilesDirList
		set $tmp$ = "0"
		for %s% in $list1$ do sub_check_profile_txt
		
		;comment ""
		;comment "-------------------------------------"
		;comment "Testing: "
		;message "SaveToFile"
		;PatchTextFile_SaveToFile "%userprofiledir%\opsi-winst-test\dummy.txt" /AllUserProfiles
		;set $ConstTest$ = "Line1appendbyFile"
		;if (fileExists("%CurrentProfileDir%\opsi-winst-test\savetofile.txt"))
		;	set $list1$ = loadTextFile("%CurrentProfileDir%\opsi-winst-test\savetofile.txt")
		;	Set $CompValue$ = takeString(0, $list1$)
		;	if ($ConstTest$ = $CompValue$)
		;		comment "passed"
		;	else
		;		set $TestResult$ = "not o.k."
		;		LogWarning "failed"
		;	endif
		;else
		;	set $TestResult$ = "not o.k."
		;	LogWarning "failed"
		;endif
		
		Files_profile_del /AllUserProfiles
		
	endif ; 4.12.4.27
	;endif ; not macos
	
	if CompareDotSeparatedNumbers("%OpsiscriptVersion%","4.11.3.6") >= "0"
		;Files_copy_patchtextfile_system /sysnative
		; Patchtextfile is not sysnative enabled yet
		Files_copy_patchtextfile_system
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "DeleteTheLine / AdvanceLine"
		PatchTextFile_AdvanceLine_DeleteTheLine "%system%\opsi-script-test" + "\dummy.txt"
		set $ConstTest$ = "Line containing dummy1."
		set $list1$ = loadTextFile("%system%\opsi-script-test"+"\dummy.txt")
		Set $CompValue$ = takeString(0, $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		Files_empty_folder_system
	endif ; 4.11.3.6
	
	
	
	sub_compareResult
	set $winst_patch_text_file$ = $SubResult$
endif

;if ($Flag_winst_idapiconfig$ = "on") or ($MasterFlag$ = "on")
;	Message "testing idapiconfig functions"
;	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
;	comment ""
;	comment "idapiconfig functions are not supported anymore"
;	comment ""
;	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
;	Set $ExpectedResult$ = "o.k."
;	set $TestResult$ = "o.k."
;
;	;set $ConstTest$ = "no error"
;	;markErrorNumber
;	;IdapiConfig_winsttest "%ScriptPath%\test-files\idapi-dummy.cfg"
;	;if errorsOccuredSinceMark > 0
;	;	set $CompValue$ = "error"
;	;else
;	;	set $CompValue$ = "no error"
;	;endif
;	;if ($ConstTest$ = $CompValue$)
;	;	comment "passed"
;	;else
;	;	LogWarning "failed"
;	;	set $TestResult$ = "not o.k."
;	;endif
;	;
;	;set $ConstTest$ = "no error"
;	;markErrorNumber
;	;IdapiConfig_winsttest
;	;if errorsOccuredSinceMark > 0
;	;	set $CompValue$ = "error"
;	;else
;	;	set $CompValue$ = "no error"
;	;endif
;	;if ($ConstTest$ = $CompValue$)
;	;	comment "passed"
;	;else
;	;	LogWarning "failed"
;	;	set $TestResult$ = "not o.k."
;	;endif
;
;
;	sub_compareResult
;	set $winst_idapiconfig$ = $SubResult$
;endif


if ($Flag_winst_link_folder$ = "on") or ($MasterFlag$ = "on")
	include_insert '%scriptpath%\sub-scripts\linkFolder.opsiscript'
endif

; do not execute if $MasterFlag$ = "on" because xml is deprecated
if ($Flag_winst_xml$ = "on")
	include_insert '%scriptpath%\sub-scripts\xml.opsiscript'
endif


if ($Flag_execwith_test$ = "on") or ($MasterFlag$ = "on")
	include_insert '%scriptpath%\sub-scripts\execWith.opsiscript'
endif
;if ($Flag_compare_to_python$ = "on") or ($MasterFlag$ = "on")
if ($Flag_compare_to_python$ = "on")
	Message "testing execPython"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing execWith (/ execPython)"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	
	Set $ExpectedResult$ = "o.k."
	set $TestResult$ = "o.k."
	
	message "comparing an execWith call to a should be identical execPython call"
	
	set $mypython$ = which('python3')
	if $mypython$ = ''
		set $mypython$ = which('python')
	endif
	
	if $mypython$ = ''
		set $TestResult$ = "not o.k."
		comment "no python interpreter found"
	else
		set $list1$ = getOutStreamFromSection('ExecWith_hello "'+$mypython$+'" PASS -a "option a" -b "option b" "there we are" WINST /EscapeStrings')
		set $list2$ = getOutStreamFromSection('execpython_hello -a "option a" -b "option b" "there we are"')
		if CompareDotSeparatedNumbers("%OpsiscriptVersion%","4.11.4.1") >= "0"
			set $list$ = getListContainingList($list1$,$list2$)
			if count($list1$) = count($list$)
				comment "passed"
			else
				comment "failed"
				set $TestResult$ = "not o.k."
			endif
		endif
	endif
	
	sub_compareResult
	set $compare_to_python$ = $SubResult$
endif


if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.4.29")
	sub "%scriptpath%\sub-scripts\ldap_search.opsiscript"
endif

if ($Flag_winst_opsiServiceCall$ = "on") or ($MasterFlag$ = "on")
	sub "%scriptpath%\sub-scripts\opsiServiceCalls.opsiscript"
endif

if ($Flag_licensemanagement$ = "on") or ($MasterFlag$ = "on")
	include_insert '%scriptpath%\sub-scripts\licensemanagement.opsiscript'
endif

if ($Flag_ProfileActions$ = "on") or ($MasterFlag$ = "on")
	Message "testing call of ProfleActions section"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing ProfleActions section"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	Set $ExpectedResult$ = "o.k."
	set $TestResult$ = "o.k."
	
	if CompareDotSeparatedNumbers("%OpsiscriptVersion%","4.11.2.1") >= "0"
		switch $OS$
			case "Windows_nt"
				ProfileActions
			endcase
			case "Linux"
				set $TestResult$ = "not implemented"
			endcase
			case "macos"
				set $TestResult$ = "not implemented"
			endcase
		endswitch
	endif
	
	sub_compareResult
	set $winst_ProfileActions$ = $SubResult$
endif


;$Flag_winst_dos$ = "on")
sub "%scriptpath%\sub-scripts\shellcall.opsiscript"

sub "%scriptpath%\sub-scripts\winbatch.opsiscript"

sub "%scriptpath%\sub-scripts\internalundocumented.opsiscript"

sub "%scriptpath%\sub-scripts\encodingtest.opsiscript"

sub "%scriptpath%\sub-scripts\jsontest.opsiscript"

sub "%scriptpath%\sub-scripts\crypttest.opsiscript"

sub "%scriptpath%\sub-scripts\xml2test.opsiscript"

sub "%scriptpath%\sub-scripts\registry.opsiscript"

sub "%scriptpath%\sub-scripts\stringlists.opsiscript"

if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.0.0")
	sub "%scriptpath%\sub-scripts\localfunctions.opsiscript"
endif

if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.0.16")
	sub "%scriptpath%\sub-scripts\powershelltest.opsiscript"
endif

sub "%scriptpath%\sub-scripts\processinfotest.opsiscript"

if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.0.16")
	sub "%scriptpath%\sub-scripts\regex.opsiscript"
endif

if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.0.16")
	sub "%scriptpath%\sub-scripts\networkcalc.opsiscript"
endif

if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.0.16")
	sub "%scriptpath%\sub-scripts\urlparser.opsiscript"
endif


if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.1.0")
	sub "%scriptpath%\sub-scripts\macos.opsiscript"
endif


if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.1.0")
	sub "%scriptpath%\sub-scripts\wmitest.opsiscript"
endif

if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.3.9")
	sub "%scriptpath%\sub-scripts\var_as_param.opsiscript"
endif

if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.4.37")
	sub "%scriptpath%\sub-scripts\certificates.opsiscript"
endif

if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.4.38")
	sub "%scriptpath%\sub-scripts\TOMLtest.opsiscript"
endif

DefFunc resultoutput( $name$ : string, $value$ : string) : void
	DefVar $space$
	DefVar $spacelength$
	
	set $spacelength$ = "35"
	set $spacelength$ = calculate($spacelength$+" - "+strLength($name$))
	for %runvar% = "1" to $spacelength$ do set $space$ = $space$ +" "
	if $value$ = "failed"
		;comment $name$ + $space$+"--> " + $value$
		LogError "  "+$name$ + $space$+"--> " + $value$
	else
		comment $name$ + $space$+"--> " + $value$
	endif
endfunc

comment ""
comment ""
comment ""
comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
comment "All sub results:"
comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
resultoutput("calculate",$winst_calculate$)
resultoutput("constants",$winst_constants$)
resultoutput("controlfunctions",$winst_controls$)
resultoutput("cryptfunctions",$winst_crypt$)
resultoutput("encoding",$winst_encoding$)
resultoutput("execwith",$execwith_test$)
resultoutput("file",$winst_file$)
resultoutput("infofunctions",$infostest$)
resultoutput("jsonfunctions",$winst_jsonfunctions$)
resultoutput("ldapsearch",$winst_ldap_search$)
resultoutput("licensemanagement",$winst_licensemanagement$)
resultoutput("linkfolder",$winst_link_folder$)
resultoutput("localfunctions",$winst_local_functions$)
resultoutput("macos",$winst_macos$)
resultoutput("opsiserviceCall",$winst_opsiServiceCall$)
resultoutput("parametrizing",$winst_parametrizing$)
resultoutput("patches",$winst_patches$)
resultoutput("patchhosts",$winst_patch_hosts$)
resultoutput("patchtextfile",$winst_patch_text_file$)
resultoutput("powershell",$winst_powershell$)
resultoutput("processinfo",$winst_processinfo$)
resultoutput("profileactions",$winst_ProfileActions$)
resultoutput("regex",$winst_regex$)
resultoutput("networkcalc",$winst_networkcalc$)
resultoutput("urlparser",$winst_urlparser$)
resultoutput("registry",$subregistry$)
resultoutput("shellbatch",$winst_dos$)
resultoutput("stringfunctions",$winst_string$)
resultoutput("stringlistfunctions",$winst_string_list$)
resultoutput("sub",$subtestsub$)
resultoutput("var_as_param",$winst_var_as_param$)
resultoutput("winbatch",$winst_winbatch$)
resultoutput("wmi",$winst_wmi$)
resultoutput("xmlpatch",$winst_xml$)
resultoutput("xml2",$winst_xml2$)
resultoutput("certificate_test",$winst_certificates$)
resultoutput("toml",$winst_toml$)

comment "--------------------------------"
resultoutput("compare_to_python",$compare_to_python$)
resultoutput("internalundocumented",$winst_internalundocumented$)
resultoutput("runasLoggedonadmin",$winst_RunAsLoggedOnAdmin$)
comment "--------------------------------"

comment ""
comment "======================================"
if $FinalResult$="failed"
	comment "Fatal: one ore more tests failed"
	Message "Fatal: one ore more tests failed"
	logError "Fatal: one ore more tests failed"
	isFatalError
else
	Message "All tests are passsed"
	comment "All tests are passsed"
endif
comment "======================================"
comment ""

[sub_executeTest]
if FileExists($AktTestSubScript$)
	Set $ExpectedResult$ = "o.k."
	sub $AktTestSubScript$
	sub_compareResult
else
	logError "Fatal: "+$AktTestSubScript$+" not found"
	isFatalError
endif

[sub_compareResult]
comment ""
comment ""
comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
comment "Result of subtest " + $TestName$
comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
if $ExpectedResult$ = $TestResult$
	set $SubResult$ ="PASSED"
else
	if $TestResult$ = "not implemented"
		set $SubResult$ = $TestResult$
	else
		set $SubResult$ ="FAILED"
		set $FinalResult$="FAILED"
	endif
endif
comment $SubResult$ 
comment "Value: " + $TestResult$ + ", Expected: " + $ExpectedResult$
if ($SubResult$ ="FAILED")
	logError "FAILED"
endif
comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
comment ""

[sub_find_section_test]
set $foundsubsection$ = "mainfile_sections_top"


; getOutStreamFromSection aufrufe
[opsiservicecall_ServerIdsList]
"method":"getServerIds_list"
"params":[]

[opsiservicecall_get_licensekey]
"method":"getLicenseKey"
"params":[
			"$Lic_ProductId$",
			"%opsiServiceUser%"
			]

[opsiservicecall_licenseOnClient]
"method": "licenseOnClient_getIdents"
"params": [
			'[]',
			'{"clientId":"%opsiServiceUser%","licensePoolId": "$licensepool$"}',
			]

[opsiservicecall_getHostId]
"method": "getHostId"
"params": [ ]

[opsiservicecall_getNetworkConfig_hash]
"method": "getNetworkConfig_hash"
"params": [
			"$ErrorClientId$"
			]

[DosInAnIcon_read_cfg]
$HomeTestFiles$\testfiles\read_alias.exe dummyalias


[XMLPatch_return_elements]
openNodeSet 'node_level-1_number-1 / node_level-2_A'
return elements

[XMLPatch_return_attributes]
openNodeSet 'node_level-1_number-1 / node_level-2_B'
return attributes

[XMLPatch_return_elementnames]
openNodeSet 'node_level-1_number-1 / node_level-2_A'
return elementnames

[XMLPatch_return_attributenames]
openNodeSet 'node_level-1_number-1 / node_level-2_B'
return attributenames

[XMLPatch_return_text]
openNodeSet 'node_level-1_number-1 / node_level-2_A /'
return text

[XMLPatch_return_counting]
openNodeSet 'node_level-1_number-1 / node_level-2_B'
return counting

[DosInAnIcon_GetOS]
@echo off
rem diese Batch prueft das OS
VER |find /i "Windows 95" >NUL
IF NOT ERRORLEVEL 1 GOTO 9598ME
VER |find /i "Windows 98" >NUL
IF NOT ERRORLEVEL 1 GOTO 9598ME
VER |find /i "Windows Millennium" >NUL
IF NOT ERRORLEVEL 1 GOTO 9598ME
VER | find "XP" > nul
IF %errorlevel% EQU 0 GOTO XP
VER | find "2000" > nul
IF %errorlevel% EQU 0 GOTO 2000
VER | find "NT" > nul
IF %errorlevel% EQU 0 GOTO NT
VER | find "Microsoft Windows [Version 6" > nul
IF %errorlevel% EQU 0 GOTO Vista
VER | find "Microsoft Windows [Version 5" > nul
IF %errorlevel% EQU 0 GOTO 2003
goto unknown
goto end
:unknown
echo unknown
goto end
:9598ME
echo 9598ME
goto end
:NT
echo NT
goto end
:2003
echo 2003
goto end
:2000
echo 2000
goto end
:XP
echo XP
goto end
:Vista
echo Vista
goto end
:end

[DosInAnIcon_time]
@echo off
"%ScriptPath%\$opsi_script_test_helper_bin$" --time-output
rem time /t

[ShellInAnIcon_time]
date "+%s"

[DosInAnIcon_retrieve_systemtype]
@echo off
wmic computersystem get systemtype

[DosInAnIcon_ipconfig_all]
@echo off
ipconfig /all

[ShellInAnIcon_ifconfig_all]
ifconfig -a

[DosInAnIcon_getFreeSpace]
@echo off
wmic LogicalDisk "%Systemdrive%" get freespace

[DosInAnIcon_getTask]
@echo off
tasklist /FI "IMAGENAME eq notepad.exe"

[DosInAnIcon_dummy_receivesection]
@echo off
c:

[DosInAnIcon_dummy_getOutStreamFromSection]
@echo off
wmic os get manufacturer

[DosInAnIcon_LastWriteTime]
@echo off
c:
cd $HomeTestFiles$\testFiles
dir

[execwith_hello]
import sys
a = "%scriptpath%"
print "we are working in path: ", a
print "host ID is", "%hostID%"
if len(sys.argv) > 1 :
	for arg in sys.argv[1:] :
		print arg
else:
	print "no arguments"

print "the current loglevel is ", "$loglevel$"

print "hello"

[execpython_hello]
import sys
a = "%scriptpath%"
print "we are working in path: ", a
print "host ID is", "%hostID%"
if len(sys.argv) > 1 :
	for arg in sys.argv[1:] :
		print arg
else:
	print "no arguments"

print "the current loglevel is ", "$loglevel$"
print "hello"

;----------------   start   general helpers ---------------------------------

[Files_testFiles]
checkTargetPath = "$HomeTestFiles$"

;----------------   end   general helpers ---------------------------------
;----------------   start   sections for constant test ---------------------------------
[DosInAnIcon_set]
set

[sub_current_path]
set $tmp$ = "%CurrentAppdataDir%"
set $tmp$ = "%CurrentStartmenuDir%"
set $tmp$ = "%CurrentDesktopDir%"
set $tmp$ = "%CurrentStartupDir%"
set $tmp$ = "%CurrentProgramsDir%"
set $tmp$ = "%CurrentSendToDir%"

[sub_check_key_value_constants]
set $ConstTest$ = "%key%"
set $CompValue$ = getValue("%key%",$list$)
if ($ConstTest$ = $CompValue$)
	comment "PASSED (Value: " + $ConstTest$ + ", Expected: " + $CompValue$ + ")"
else
	set $TestResult$ = "not o.k."
	LogWarning "FAILED (Value: " + $ConstTest$ + ", Expected: " + $CompValue$ + ")"
endif

;----------------   end   sections for constant test ---------------------------------
;----------------   start   sections for parametrizing test ---------------------------------

[DosInAnIcon_echo]
echo "original section"

;----------------   end   sections for parametrizing test ---------------------------------
;----------------   start   sections for string test ---------------------------------

[sub_random_pass_test]
set $tmp$ = randomstr
if $OS$ = "Windows_NT"
	dosInAnIcon_setpass
endif

[dosInAnIcon_setpass]
net user opsitest $tmp$ /add
net user opsitest /delete

[Winbatch_exitcode_43_noquote_with_param]
%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$ --exit-code=43


;----------------   end   sections for string test ---------------------------------
;----------------   start   sections for info map test ---------------------------------
[sub_showEntry]
set $key$ = TakeString(0, splitstring("%line%", "="))
set $value$ = getValue($key$, $INST_Resultlist$)
comment "value for key '" +$key$ + "' : '" + $value$ + "'"

[DosInAnIcon_helper_version]
@echo off
"%ScriptPath%\$opsi_script_test_helper_bin$" --version

;----------------   end   sections for info map test ---------------------------------
;----------------   start   sections for string list test ---------------------------------
[Files_copy_dummy]
copy "%ScriptPath%\test-files\string\dummy.txt" $HomeTestFiles$
copy "%ScriptPath%\test-files\string\dummyUTF-8y.txt" $HomeTestFiles$
copy "%ScriptPath%\test-files\string\dummyUTF-16.txt" $HomeTestFiles$

[Files_copy_for_filelist]
copy -s "%ScriptPath%\test-files\string\*.*" $HomeTestFiles$
copy -s "%ScriptPath%\test-files\encoding\*.*" $HomeTestFiles$
copy -s "%ScriptPath%\test-files\testfiles\*.*" $HomeTestFiles$

[DosInAnIcon_netstat]
@echo off
netstat -n

;[sub_iteration_test]
;set $CompValue$ = $CompValue$ + '%s%'
;
;[sub_subsubiteration_test1]
;sub_subsubiteration_test2
;
;[sub_subsubiteration_test2]
;set $CompValue$ = $CompValue$ + '%s%'

;[Files_del_iteration_txt]
;delete "$HomeTestFiles$\iteration.txt"

;[DosInAnIcon_iteration_test]
;echo %s%>> "$HomeTestFiles$\iteration.txt"

;[ShellInAnIcon_Linux_iteration_test]
;set -x
;echo %s%>> "$HomeTestFiles$/iteration.txt"

;[sub_getprocess_by_shortcommand]
;;comment " shortcommand gives only the first 15 chars)"
;if strPart($ConstTest$,"1","15") = takeString(0,splitString("%aktprocess%",";"))
;	;comment "process found"
;	if "0" = strPos(takeString(3,splitString("%aktprocess%",";")),"<defunct>")
;		comment "process found that is not killed or defunct"
;		set $CompValue$ = takeString(0,splitString("%aktprocess%",";"))
;	else
;		comment "process is killed or defunct"
;		;set $CompValue$ = ""
;	endif
;endif
;
;[sub_getprocess_by_command]
;;comment " shortcommand gives only the first 15 chars)"
;if $ConstTest$ = takeString(0,splitString("%aktprocess%",";"))
;	;comment "process found"
;	if "0" = strPos(takeString(3,splitString("%aktprocess%",";")),"<defunct>")
;		comment "process found that is not killed or defunct"
;		set $CompValue$ = takeString(0,splitString("%aktprocess%",";"))
;	else
;		comment "process is killed or defunct"
;		;set $CompValue$ = ""
;	endif
;endif

[DosInAnIcon_ListFiles_Test1]
@echo off
cd $HomeTestFiles$
dir /a-d /b *.*

[ShellInAnIcon_ListFiles_Test1]
cd $HomeTestFiles$
ls -p | grep -v /

;[DosInAnIcon_ListFiles_Test2]
;@echo off
;cd $HomeTestFiles$
;dir *.* /A-D /B                                              

[DosInAnIcon_ListFiles_Test3]
@echo off
cd $HomeTestFiles$
dir /s /b *.exe

[ShellInAnIcon_ListFiles_Test3]
cd $HomeTestFiles$
find . -name "*.exe"

;[DosInAnIcon_ListFiles_Test4]
;@echo off
;cd $HomeTestFiles$
;dir *.txt /A-D /B

[DosInAnIcon_ListFiles_Test5]
@echo off
cd $HomeTestFiles$
dir /b encode-cp866.opsiscript

[ShellInAnIcon_ListFiles_Test5]
cd $HomeTestFiles$
find . -name "encode-cp866.opsiscript"

[DosInAnIcon_ListFiles_Test6]
@echo off
cd %System%
dir *.* /A-D /B

;----------------   end   sections for string list test ---------------------------------
;----------------   start   sections for sub test ---------------------------------
[sub_testsub1]
comment "testsub1 running"
set $TestResult$=$TestResult$+"1"
sub_testsub2

[sub_testsub2]
comment "testsub2 running"
set $TestResult$=$TestResult$+"2"

[sub_giveString]
comment "test sub_giveString " + "%letter%"
set $TestResult$=$TestResult$+"5"
;----------------   end   sections for sub test ---------------------------------
;;---------------- start sections for idapiconfig test ---------------------------
;[IdapiConfig_winsttest]
;alias:opsiwinst
;driver:dbase
;;parametername=parameterwert
;TYPE=Standard
;PATH=C:\opsi.org\Daten
;DEFAULT DRIVER=dbase
;setalias
;;---------------- end sections for idapiconfig test ---------------------------
;---------------- start sections for patch textfile test ---------------------------

[sub_check_profile_txt]
set $list2$ = loadTextFile("%s%\opsi-winst-test\dummy.txt")
Set $CompValue$ = takeFirstStringContaining($list2$, $ConstTest$)
;if $tmp$ = "0"
;	Set $CompValue$ = takeString(0, $list2$)
;endif
;if $tmp$ = "1"
;	Set $CompValue$ = takeString(1, $list2$)
;endif
;if $tmp$ = "3"
;	Set $CompValue$ = takeString(3, $list2$)
;endif
;if $tmp$ = "6"
;	Set $CompValue$ = takeString(6, $list2$)
;endif
if ($ConstTest$ = $CompValue$)
	comment "passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "failed: PatchText /AllUserProfiles"
endif

[Files_profile_copy]
;copy "%Scriptpath%\profiles\*.*" "%CurrentAppdataDir%\ACME"
copy "%ScriptPath%\test-files\PatchTextFile\*.*" "%userprofiledir%\opsi-winst-test"

[Files_profile_del]
;del -s -f "%CurrentAppdataDir%\ACME"
del "%userprofiledir%\opsi-winst-test.ini"
del -s -f -c "%userprofiledir%\opsi-winst-test"

[Files_copy_patchtextfile]
copy "%ScriptPath%\test-files\PatchTextFile\*.*" $HomeTestFiles$

[Files_empty_folder]
Delete -s -f -c $HomeTestFiles$

[Files_copy_patchtextfile_system]
copy "%ScriptPath%\test-files\PatchTextFile\*.*" "%system%\opsi-script-test"

[Files_empty_folder_system]
Delete -s -f -c "%system%\opsi-script-test"


[PatchTextFile_Set_Netscape_User_Pref]
Set_Netscape_User_Pref ("browser.startup.homepage", "http://uib.de")

[PatchTextFile_AddStringListElement_To_Netscape_User_Pref]
AddStringListElement_To_Netscape_User_Pref ("intl.charsetmenu.browser.cache", "UTF-16, UTF-32")

[PatchTextFile_Set_Mozilla_pref_Pref]
Set_Mozilla_Pref ("user_pref","key.1", "http://opsi.org")
Set_Mozilla_Pref ("pref","key.2", "http://opsi.org")
Set_Mozilla_Pref ("lock_pref","key.3", "http://opsi.org")
Set_Mozilla_Pref ("foobar","key.4", "http://opsi.org")

[PatchTextFile_AddStringListElement_To_Mozilla_Pref]
AddStringListElement_To_Mozilla_Pref("user_pref","network.proxy.no_proxies_on", "opsi.org")

[PatchTextFile_AdvanceLine_DeleteTheLine]
AdvanceLine 1
DeleteTheLine

[PatchTextFile_findLine]
FindLine "Line containing dummy1."
DeleteTheLine

[PatchTextFile_FindLine_StartingWith]
FindLine_StartingWith "Additional"
DeleteTheLine

[PatchTextFile_FindLine_Containing]
FindLine_Containing "dummy2"
DeleteTheLine

[PatchTextFile_GoToTop]
GoToTop
AdvanceLine 1
DeleteTheLine

[PatchTextFile_GoToBottom]
GoToBottom
DeleteTheLine

[PatchTextFile_AddLine]
GoToBottom
AddLine "Line added by winst"

[PatchTextFile_InsertLine]
GoToBottom
InsertLine "Line inserted by winst"

[PatchTextFile_AppendLine]
GoToBottom
AppendLine "Line appended by winst"

[PatchTextFile_Append_File]
Append_File "$HomeTestFiles$\fileappend.txt"

[PatchTextFile_Subtract_File]
Subtract_File "$HomeTestFiles$\filesubstract.txt"

[PatchTextFile_SaveToFile]
SaveToFile "$HomeTestFiles$\savetofile.txt"

[PatchTextFile_Sorted]
AddLine "Line0appendbyFile"
AddLine "Line4appendbyFile"
sorted

[PatchTextFile_setvalues]
setValueByKey "newkey" "onTop"
setValueByKey "set me to no" "no"
setKeyValueSeparator ":"
setValueByKey "divided by a colon" "java!"
setKeyValueSeparator ">"
setValueByKey "divided by a greater-than sign" "great"
setKeyValueSeparator "="
setValueByKey  "tight" "so_tight"
setValueByKey  "comment" "no"
GoToBottom
setValueByKey "newkey2" "atBottom"

[PatchTextFile_searchAndReplace]
searchAndReplace "java" "lazarus"

[PatchTextFile_vmnet8_config]
GoToTop
FindLine_StartingWith "# Virtual ethernet segment 8"
FindLine_StartingWith "subnet"
DeleteTheLine
InsertLine "subnet 172.16.116.0 netmask 255.255.255.0 {"

FindLine_Containing "range"
DeleteTheLine
InsertLine "#range 172.16.116.128 172.16.116.254;            # default allows up to 125 VM's"

FindLine_StartingWith "option broadcast-address"
DeleteTheLine
InsertLine "option broadcast-address 172.16.116.255;"

FindLine_StartingWith "option domain-name-servers"
DeleteTheLine
InsertLine "option domain-name-servers 172.16.116.2;"

FindLine_StartingWith "option netbios-name-servers"
DeleteTheLine
InsertLine "option netbios-name-servers 172.16.116.2;"

FindLine_StartingWith "option routers"
DeleteTheLine
InsertLine "option routers 172.16.116.2;"

FindLine_Containing "fixed-address"
DeleteTheLine
InsertLine "    fixed-address 172.16.116.1;"

Subtract_File "$HomeTestFiles$\vmnet8-target.txt"

[PatchTextFile_Append_File_prof]
Append_File "%userprofiledir%\opsi-winst-test\fileappend.txt"

[PatchTextFile_Subtract_File_prof]
Subtract_File "%userprofiledir%\opsi-winst-test\filesubstract.txt"

[PatchTextFile_SaveToFile_prof]
SaveToFile "%userprofiledir%\opsi-winst-test\savetofile.txt"



;----------------  end  sections for patch textfile test ---------------------------------
;----------------   start   sections for registry test ---------------------------------
;
;[sub_retrieve_registry_data]
;if $INST_SystemType$ = "64 Bit System"
;	set $INST_ResultList$ = getOutStreamFromSection("execWith_reg_query '%SystemRoot%\cmd64.exe' /C")
;	for $s$ in $INST_ResultList$ do sub_fetch_SearchResult
;else
;	set $INST_SearchResult$ = GetRegistryStringValue("["+$INST_SearchKey$+"] "+$INST_SearchValue$)
;endif
;
[execWith_reg_query]
@echo off
reg query "$INST_SearchKey$" /v "$INST_SearchValue$"

;[sub_fetch_SearchResult]
;set $INST_ResultList2$ = splitStringOnWhiteSpace("$s$")
;if $INST_SearchValue$ = takeString(1,$INST_ResultList2$)
;	if not (takeString(3,$INST_ResultList2$) = "")
;		set $INST_ResultList3$ = getSublist(3:, $INST_ResultList2$)
;		set $INST_SearchResult$ = composeString($INST_ResultList3$," ")
;	else
;		set $INST_SearchResult$ = ""
;	endif
;endif
;
;[Registry_createkeys]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test]
;set "var1" = "value1"
;set "var2" = "value2"
;set "var3" = "value3"
;set "var4" = "value4"
;set "var5" = REG_SZ:"value5"
;set "var6" = REG_EXPAND_SZ:"value6"
;set "var7" = REG_DWORD:777
;set "var8" = REG_BINARY:08 08 08 0F 10
;set "var9" = REG_MULTI_SZ:"value9|value10|de"
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test\.a\b]
;set ""="C:\Program files\test\test.exe -a"
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test\key1]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test\key2]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test\key3]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test\key4]
;
;[Registry_deleteKey]
;deletekey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test\.a]
;
;[Registry_deleteKey_winst_test]
;deletekey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\winst-test]
;
;[Registry_Add]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test]
;Add "test"=REG_EXPAND_SZ:"value"
;
;[Registry_Supp]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test]
;supp "test" ; "value1;value2;value3;"
;
;[Registry_Supp1]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test]
;supp "test" ; "value2"
;
;[Registry_set4supp]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test]
;set "test"=REG_EXPAND_SZ:"C:\Program Files\CyberSafe\bin;C:\Program Files (x86)\CyberSafe\bin;C:\Oracle\product\11.2.0\client_1\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Gupta Framework;C:\PGIM\PlantConnect.BIN\System;C:\PGIM\PlantConnect.BIN\Signalexplorer;C:\PGIM\PlantConnect.BIN\Events\Client;C:\Program Files (x86)\Enterprise Vault\EVClient"
;
;[Registry_Supp2]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test]
;supp "test" ; "C:\Program Files (x86)\Java\jre8\bin"
;
;[Registry_set4supp3]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test]
;set "test"=REG_EXPAND_SZ:"$systemroot$;$systemroot$\system32"
;
;
;[Registry_Supp3]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test]
;supp "test" ; "$systemroot$\System32\Wbem"
;
;
;[Registry_GetMultiSZFromFile]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test]
;GetMultiSZFromFile "test2" "%ScriptPath%\test-files\reg_multisz_text.txt"
;
;[Registry_SaveValueToFile]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test]
;SaveValueToFile "test" "$HomeTestFiles$\SaveValueToFile.txt"
;
;[Registry_DeleteVar]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test]
;DeleteVar "test"
;DeleteVar "test2"
;
;[Files_delete_SaveValueToFile_txt]
;Delete -f "$HomeTestFiles$\SaveValueToFile.txt"
;
;[Registry_opsi_org_test]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test\test-4.0]
;set ""="standard entry"
;set "bitByWinst"="$regWriteValue$"
;set "str_bywinst"=REG_SZ:"my string"
;set "str_bywinst_with_%"="string with no percent char set without explicit data type will be written as string"
;set "str_bywinst_with_%"="string with % set without explicit data type and will so be changed to expand_string"
;set "str_bywinst_with_%"=REG_SZ:"string with % set with explicit data type string "
;set "strexpand_bywinst"=REG_EXPAND_SZ:"%programfiles%"
;set "dword_test1"= REG_DWORD:10
;set "dword_test2"= REG_DWORD:0xA
;set "dword_test3"= REG_DWORD:0x0A
;set "dword_test4"= REG_DWORD:$0A
;set "binary_bywinst"=REG_BINARY:00 FF
;set "binary_empty_bywinst"=REG_BINARY:
;set "multi_sz_bywinst" = REG_MULTI_SZ:"A|BC|de"
;
;[Registry_set_quoted_string]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test\quoted]
;set "quoted"="$tmp$"
;
;[Registry_createkeys_with_brackets]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test\[brackets]]
;set "entry1"="myentry1"
;
;[Registry_deletekeys_with_brackets]
;deletekey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test\[brackets]]
;
;[Registry_opsi_org_delete_test]
;deletekey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test]
;
;
;[ExecWith_opsi_org_test]
;reg add "HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test\test-4.0" /v "bitByReg" /t REG_SZ /d "$regWriteValue$" /f
;
;[Registry_hkcu_opsi_org_test]
;openkey [SOFTWARE\opsi.org\opsi-script-test]
;set "bitByWinst"="$regWriteValue$"
;
;[Registry_hkcu_opsi_org_deletekey]
;openkey [SOFTWARE\opsi.org\opsi-script-test\deleteme]
;deletekey [SOFTWARE\opsi.org\opsi-script-test\deleteme]
;
[Registry_hkcu_complete_opsi_org_test]
openkey [HKEY_CURRENT_USER\SOFTWARE\opsi.org\opsi-script-test]
set "bitByWinst"="$regWriteValue$"
openkey [HKEY_CURRENT_USER\SOFTWARE\opsi.org\opsi-script-test\.a\b]
set "bitByWinst"="$regWriteValue$"
openkey [HKEY_CURRENT_USER\SOFTWARE\opsi.org\opsi-script-test\.a\b\c]
set "bitByWinst"="$regWriteValue$"


[Registry_hkcu_complete_opsi_org_deletekey]
openkey [HKEY_CURRENT_USER\SOFTWARE\opsi.org\opsi-script-test\deleteme]
deletekey [HKEY_CURRENT_USER\SOFTWARE\opsi.org\opsi-script-test\deleteme]
;
;[DosInAnIcon_export_hkcu_complete_opsi_org_test]
;@echo off
;regedit /e "$HomeTestFiles$\hkcu_complete_opsi_org_test.reg" HKEY_CURRENT_USER\SOFTWARE\opsi.org\opsi-script-test
;
;[Registry_hkcu_userclasses_create_test]
;openkey [HKEY_CURRENT_USER\Software\Classes\opsi-script-test\.a\b]
;set "bitByWinst"="$regWriteValue$"
;
;[Registry_hkcu_userclasses_delete_test]
;deletekey [HKEY_CURRENT_USER\Software\Classes\opsi-script-test]
;
;[Registry_hkcu_userclasses_createkey]
;openkey [HKEY_CURRENT_USER\Software\Classes\opsi-script-test]
;set "bitByWinst"="$regWriteValue$"
;
;[Registry_hkcu_userclasses_deletekey]
;deletekey [HKEY_CURRENT_USER\Software\Classes\opsi-script-test\.a]
;
;
;[Registry_hack_forbidden_key]
;openkey [HKLM\SYSTEM\ControlSet001\Control\Network\NetworkLocationWizard]
;set "HideWizard" = REG_DWORD:0x1
;DeleteVar "HideWizard"
;
;[winbatch_hack_forbidden_key1]
;reg add "HKLM\SYSTEM\ControlSet001\Control\Network\NetworkLocationWizard" /v "HideWizard" /t REG_DWORD /d "1" /f
;
;[winbatch_hack_forbidden_key2]
;reg delete "HKLM\SYSTEM\ControlSet001\Control\Network\NetworkLocationWizard" /v "HideWizard" /f
;
;[Registry_multiline]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-script-test\.a\b]
;set ""="part1\npart2\npart3"
;;set "test" = "$string1$"
;
;[Registry_add_environment]
;openkey [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Environment]
;set "opsi-script-test"="deleteme"
;
;[Registry_del_environment]
;openkey [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Environment]
;DeleteVar "opsi-script-test"
;
;[sub_check_environment]
;comment "This will not work because the environment is inherited from the running process"
;set $list$ = shellCall('set opsi-script-test')
;set $CompValue$ = takeFirstStringContaining($list$, "deleteme")
;if "" = $CompValue$
;	comment "This will work because this new started process will get a new environment"
;	winbatch_check_environment /RunElevated
;	if ("42" = getlastExitCode)
;		set $CompValue$ = "opsi-script-test=deleteme"
;	else
;		message "Set Environment Variables and wait for update "+calculate("%index% * 10")+" seconds ..."
;		sleepseconds 10
;	endif
;endif
;
;[winbatch_check_environment]
;"%system%\cmd.exe" /c "if %opsi-script-test%==deleteme exit 42"
;
;
;;----------------   end   sections for registry test ---------------------------------

;----------------   start   sections for info map tests ---------------------------------
[DosInAnIcon_wmi_get_locale]
@echo off
wmic os get locale

[DosInAnIcon_get_wmi_producttype]
@echo off
wmic os get producttype

[ShellInAnIcon_get_distribution]
set -x
cat /etc/os-release | grep NAME=\"Ubuntu\"
exit $?

;----------------   stop   sections for info map tests ---------------------------------
;----------------   start   sections for dosbatch/winbatch tests ---------------------------------
;[Files_empty_folder]
;Delete -s -f $HomeTestFiles$
;
;[WinBatch_testing]
;$ping5command$
;
;[Winbatch_top]
;/bin/bash -c "ping 127.0.0.1 &"
;
[DosInAnIcon_getTask_ping]
@echo off
tasklist /FI "IMAGENAME eq ping.exe"

[DosInAnIcon_getTask_helper]
@echo off
tasklist /FI "IMAGENAME eq opsiscripttesthelper.exe"

[DosInAnIcon_getTask_helperchild]
@echo off
tasklist /FI "IMAGENAME eq helperchild.exe"
;
[Winbatch_startprocess_with_child_nowait]
"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$" --fork-and-stop=2
;
;[Winbatch_startprocess_with_child_nowait_from_c]
;"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$" --fork-and-stop=2
;
;
;[WinBatch_testing2]
;%ScriptPath%\dos\dummy2.bat
;
;[Winbatch_exitcode_42_noquote]
;"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$"
;
;[Winbatch_exitcode_42_singlequote]
;'%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$'
;
;[Winbatch_exitcode_42_doublequote]
;"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$"
;
;
;
;[Winbatch_exitcode_43_singlequote_with_param]
;'%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$' --exit-code=43
;
;[Winbatch_exitcode_43_doublequote_with_param]
;"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$" --exit-code=43
;
;[Winbatch_helper_wait2_showwindow1]
;"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$" --wait=2 --showwindow=1
;
;[Winbatch_helper_wait2_showwindow5]
;"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$" --wait=2 --showwindow=5
;
;[Winbatch_helper_showwindow1]
;"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$" --fork-and-stop=3
;
;[Winbatch_msi_shellexecute]
;"%ScriptPath%\test-files\testFiles\dummy.msi" /l* "$HomeTestFiles$\dummy.install_log.txt" /qb! ALLUSERS=2 REBOOT=ReallySuppress
;
;[Winbatch_msi_standard]
;msiexec /i "%ScriptPath%\test-files\testFiles\dummy.msi" /l* "$HomeTestFiles$\dummy.install_log.txt" /qb! ALLUSERS=2 REBOOT=ReallySuppress
;
;[Winbatch_msi_standard_from_c]
;msiexec /i "$HomeTestFiles$\testFiles\dummy.msi" /l* "$HomeTestFiles$\dummy.install_log.txt" /qb! ALLUSERS=2 REBOOT=ReallySuppress
;
;[winbatch_myinno]
;"%ScriptPath%\test-files\testFiles\myinnosetup.exe" /silent
;
[winbatch_myinno_from_c]
"$HomeTestFiles$\testFiles\myinnosetup.exe" /silent

[winbatch_wow_myinno_from_c]
"%OpsiscriptDir%\opsi-script.exe" "%scriptpath%\myinno_from_c_winbatch.ins" /logfile "c:\opsi.org\log\winbatch_wow_myinno.log" /batch
;
;[Winbatch_msi_standard_from_c_indirect]
;;"%OpsiscriptDir%\..\action_processor_starter.exe" <hostId> <hostKey> <controlServerPort> <logFile> <logLevel> <depotRemoteUrl> <depotDrive> <depotServerUsername> <depotServerPassword> <sessionId> <actionProcessorDesktop> <actionProcessorCommand> <actionProcessorTimeout> <runAsUser> <runAsPassword> <createEnvironment>
;;"%OpsiscriptDir%\..\action_processor_starter.exe" "%HostID%" <hostKey> "4441"  "8" <depotRemoteUrl> "%ScriptDrive%" <depotServerUsername> <depotServerPassword> 0 "defaukt" "msiexec /i c:\tmp\testFiles\dummy.msi /l* c:\tmp\dummy.install_log.txt /qb! ALLUSERS=2 REBOOT=ReallySuppress" 30 "" "" false
;
;[winbatch_start_helper_asadmin_c]
;"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$" --log="$HomeTestFiles$\testFiles\opsi-script-test-helper-win\admin.log"
;
;[winbatch_start_helper_asinvoker_c]
;"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$" --log="$HomeTestFiles$\testFiles\opsi-script-test-helper-win\admin.log"
;
;[winbatch_start_helper_c]
;"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$" --log="$HomeTestFiles$\testFiles\opsi-script-test-helper-win\admin.log"
;
;[DosInAnIcon_start_helper_c]
;"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$" --log="$HomeTestFiles$\testFiles\opsi-script-test-helper-win\admin.log"
;
;[DosInAnIcon_start_helper_asadmin_c]
;"$HomeTestFiles$\testFiles\opsi-script-test-helper-win\opsiwinsttesthelperasadmin.exe" --log="$HomeTestFiles$\testFiles\opsi-script-test-helper-win\admin.log"
;
;[DosInAnIcon_start_helper_asinvoker_c]
;"$HomeTestFiles$\testFiles\opsi-script-test-helper-win\opsiwinsttesthelperasinvoker.exe" --log="$HomeTestFiles$\testFiles\opsi-script-test-helper-win\admin.log"
;
[Files_copy_msi_exe_2_c]
copy "%ScriptPath%\test-files\testFiles\*.msi" "$HomeTestFiles$\testFiles"
copy "%ScriptPath%\test-files\testFiles\*.exe" "$HomeTestFiles$\testFiles"

;[Files_copy_helper_2_c]
;copy "%ScriptPath%\opsi-script-test-helper-win\*.exe" "$HomeTestFiles$\testFiles\opsi-script-test-helper-win"
;
;[Files_clean_from_c]
;del -s -f "$HomeTestFiles$\testFiles"
;
;
;[Winbatch_msi_uninstall]
;msiexec /x {E19B367E-992C-4BD5-86D1-804C10184D71} /qb! REBOOT=ReallySuppress
;
;[Winbatch_powercfg_hibernate_off]
;powercfg /hibernate off
;
;[DosInAnIcon_powercfg_hibernate_off]
;powercfg /hibernate off
;echo %ERRORLEVEL%
;exit %ERRORLEVEL%
;
;[DosBatch_1]
;c:
;mkdir $HomeTestFiles$
;cd $HomeTestFiles$
;echo dummy > dosbatch_1.txt
;
;[DosInAnIcon_1]
;c:
;mkdir $HomeTestFiles$
;cd $HomeTestFiles$
;echo dummy > dosinanicon_1.txt
;
;[DosBatch_1b]
;c:
;mkdir $HomeTestFiles$
;cd $HomeTestFiles$
;echo dummy > dosinanicon_1.txt
;
;[Execwith_1b]
;c:
;mkdir $HomeTestFiles$
;cd $HomeTestFiles$
;echo dummy > dosinanicon_1.txt
;
;[DosInAnIcon_remove_test_from_system32]
;%SystemDrive%
;cd "%System%"
;del "dummy.txt"
;
[DosInAnIcon_kill_notepad]
taskkill /F /IM notepad.exe
;
;[DosInAnIcon_exit42]
;set exitcode=42
;exit %exitcode%
;
;[DosInAnIcon_exit1]
;rem create an errolevel= 1
;VERIFY OTHER 2> NUL
;echo %ERRORLEVEL%
;exit %ERRORLEVEL%
;
;[ShellInAnIcon_exitcode42]
;set exitcode=0
;VERIFY OTHER 2> NUL
;if %ERRORLEVEL% NEQ 0 set exitcode=%ERRORLEVEL%
;echo %exitcode%
;"%ScriptPath%\$opsi_script_test_helper_bin$"
;if %ERRORLEVEL% NEQ 0 set exitcode=%ERRORLEVEL%
;exit %exitcode%
;
;
;[DosBatchUseradd]
;net user "$opsiadminuser$" "$opsiadminpwd$" /add
;net localgroup Administratoren /add "$opsiadminuser$"
;
;[DosBatchUserdel]
;net user "$opsiadminuser$" /delete
;rmdir /s /q "%ProfileDir%\$opsiadminuser$"
;
;[ExecWithSetup]
;; http://msdn.microsoft.com/library/ee942965%28v=VS.100%29.aspx
;; return exit code via stdout as winst cannot read exit codes from ExecWith
;$ExitCode = RunAsWait("$opsiadminuser$", @ComputerName, "$opsiadminpwd$", 1,  '"$HomeTestFiles$\testFiles\myinnosetup.exe" /silent')
;if not @error then
;	ConsoleWrite($exitcode)
;endif
;
;;;;;;;;;;;;;;;;;;;;;;
;
[ShellInAnIcon_exit43]
set -x
exit 43

;
;[ShellBatch_ping]
;set -x
;ping -c 4 localhost
;
;[ShellBatch_1]
;set -x
;mkdir -p $HomeTestFiles$
;cd $HomeTestFiles$
;echo dummy > shellbatch_1.txt
;
;[ShellInAnIcon_1]
;set -x
;mkdir -p $HomeTestFiles$
;cd $HomeTestFiles$
;echo dummy > shellinanicon_1.txt
;
;[DosInAnIcon_with_parameter]
;echo Hello %1%
;
;[ShellInAnIcon_with_parameter]
;echo Hello $1
;
;----------------   stop   sections for dosbatch/winbatch tests ---------------------------------

;----------------   start  ProfileActions tests ---------------------------------
[ProfileActions]
comment "we are in profile actions"
markErrorNumber
set $regWriteValue$ = "32"
Registry_hkcu_complete_opsi_org_test
Registry_hkcu_complete_opsi_org_deletekey
Files_work_on_profiles
if $INST_SystemType$ = "64 Bit System"
	set $regWriteValue$ = "64"
	Registry_hkcu_complete_opsi_org_test /64bit
	Registry_hkcu_complete_opsi_org_deletekey /64bit
endif
if errorsOccuredSinceMark > 14
	LogWarning "failed"
	set $TestResult$ = "not o.k."
endif

[Files_work_on_profiles]
copy "%ScriptPath%\test-files\testFiles\*.*" "%UserProfileDir%\opsi-script-test"
del -sfc "%UserProfileDir%\opsi-script-test"
copy "%ScriptPath%\test-files\testFiles\*.*" "%CurrentProfileDir%\opsi-script-test"
del -sfc "%CurrentProfileDir%\opsi-script-test"

;----------------   stop   ProfileActions tests ---------------------------------

;----------------   start  internal undocumented functions tests ---------------------------------
[winbatch_create_file]
"%ScriptPath%\$opsi_script_test_helper_bin$" --createfile="$testfilepath$" --filesize=$testfilesize$

[DosInAnIcon_dir]
@echo off
dir $testfilepath$

[files_remove_file]
del -f "$testfilepath$"
;----------------   stop   internal undocumented functions tests ---------------------------------

[Files_copy_test_to_system32]
copy "%ScriptPath%\test-files\testFiles\dummy.txt" "%System%"

[ExecWith_Powershell_HelloWorld]
	$strString = "Hello World"
	write-host $strString
	
[ExecWith_Powershell_SearchUninstallInfos]
	$RegKey = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"
	#Search $RegKey for the given DisplayName and return DisplayName, QuietUninstallString (if present) and UninstallString from the found subentries
		Get-ChildItem -Path $RegKey| Where-Object -FilterScript { $_.GetValue("DisplayName", "not found") -like "$DisplayName$"} | ForEach-Object -Process {
		if (-Not($_.GetValue("DisplayName", "not found") -eq "not found") -or ($_.GetValue("DisplayName", "not found") -eq "") -or ($_.GetValue("DisplayName", "not found") -eq $null))
			{
			Write-Output (-join ("InstalledVersion=" + $_.GetValue("DisplayName")))
			if (-Not($_.GetValue("QuietUninstallString", "not found") -eq "not found") -or ($_.GetValue("QuietUninstallString", "not found") -eq "") -or ($_.GetValue("QuietUninstallString", "not found") -eq $null))
				{
				Write-Output (-join ("QuietUninstallString=" + $_.GetValue("QuietUninstallString")))
				}
			if (-Not($_.GetValue("UninstallString", "not found") -eq "not found") -or ($_.GetValue("UninstallString", "not found") -eq "") -or ($_.GetValue("UninstallString", "not found") -eq $null))
				{
				Write-Output (-join ("UninstallString=" + $_.GetValue("UninstallString")))
				}
			}
		}

[sub_find_section_test]
set $foundsubsection$ = "mainfile_sections_bottom"
