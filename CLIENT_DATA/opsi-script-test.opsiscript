; This code is part of the opsi.org project
;
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by the uib gmbh, D55118 Mainz, Germany
; and published under the Terms of the GNU Affero General Public License.
; Text of the AGPL: http://www.gnu.org/licenses/agpl-3.0-standalone.html
; credits: http://www.opsi.org/credits/




[Actions]
requiredWinstVersion >= "4.11.4.1"
if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.3.6")
	requiredOpsiscriptVersion >= "4.12.3.6"
endif
ScriptErrorMessages = false
encoding=utf8
setOutputLevel = 3
DefVar $ProductId$

DefVar $MasterFlag$
DefVar $FinalResult$
DefVar $AktTestSubScript$
DefVar $ExpectedResult$
DefVar $TestNr$
DefVar $TestResult$
DefVar $SubResult$
DefVar $HomeTestFiles$
DefVar $ConstTest$
Defvar $ConstTest2$
DefVar $CompValue$
DefVar $CompValue2$
DefVar $tmp$
DefVar $tmp1$
DefVar $tmp2$
DefVar $tmp3$
DefVar $tmp4$
DefVar $str$
DefVar $str1$
DefVar $str2$
DefVar $str3$
DefVar $str4$
DefVar $refstr$
DefVar $MsVersion$
DefVar $string1$
DefVar $string2$
DefVar $string3$
DefVar $xmlnodepath$
DefVar $ScriptLoglevel$

DefVar $winst_constants$
DefVar $winst_parametrizing$
DefVar $winst_string$
DefVar $infostest$
DefVar $winst_string_list$
DefVar $winst_controls$
DefVar $subtestsub$
DefVar $winst_file$
DefVar $winst_patches$
DefVar $winst_patch_hosts$
DefVar $winst_patch_text_file$
DefVar $winst_link_folder$
DefVar $subregistry$
DefVar $winst_xml$
DefVar $winst_dos$
DefVar $winst_winbatch$
DefVar $execwith_test$
DefVar $compare_to_python$
DefVar $winst_ldap_search$
DefVar $winst_opsiServiceCall$
DefVar $winst_licensemanagement$
DefVar $winst_internalundocumented$
DefVar $winst_RunAsLoggedOnAdmin$
DefVar $winst_ProfileActions$
DefVar $winst_calculate$
DefVar $winst_encoding$
DefVar $winst_jsonfunctions$
DefVar $winst_crypt$
DefVar $winst_xml2$
DefVar $winst_macos$
DefVar $winst_wmi$

DefVar $winst_local_functions$
DefVar $winst_powershell$
DefVar $winst_regex$
DefVar $winst_networkcalc$
DefVar $winst_urlparser$
DefVar $winst_var_as_param$
DefVar $InterestingFile$
DefVar $key$
DefVar $value$
DefVar $example$
DefVar $testfilepath$
DefVar $testfile$
DefVar $testfilesize$
DefVar $ErrorClientId$
DefVar $LdapSearchDn$
DefVar $LdapSearchAttributes$
DefVar $LdapHost$
DefVar $LdapPort$
DefVar $LdapUser$
DefVar $LdapPassword$
DefVar $LdapResultType$
DefVar $LdapFilter$
DefVar $SectionName$
DefVar $link_extension$
DefVar $link_subfolder$
DefVar $target$
DefVar $workdir$
DefVar $workfile$
DefVar $systemroot$
DefVar $pspolicy$
DefVar $architecture$
DefVar $GUI$

DefVar $opsi_script_test_helper_bin$
DefVar $opsi_script_test_helper_child_bin$
DefVar $opsi_script_test_helper_path$
DefVar $opsi_script_test_helper_bin_name$
DefVar $helper_child_bin_name$
DefVar $opsi_script_test_helper_bin_log$
DefVar $helper_child_bin_log$
DefVar $test_experimental$
DefVar $test_speed$


DefVar $Flag_winst_constants$
DefVar $Flag_winst_parametrizing$
DefVar $Flag_winst_string$
DefVar $Flag_infostest$
DefVar $Flag_winst_string_list$
DefVar $Flag_winst_controls$
DefVar $Flag_subtestsub$
DefVar $Flag_winst_file$
DefVar $Flag_winst_patches$
DefVar $Flag_winst_patch_hosts$
DefVar $Flag_winst_patch_text_file$
DefVar $Flag_winst_link_folder$
DefVar $Flag_winst_local_functions$
DefVar $Flag_subregistry$
DefVar $Flag_winst_xml$
DefVar $Flag_winst_xml2$
DefVar $Flag_winst_macos$
DefVar $Flag_winst_dos$
DefVar $Flag_winst_winbatch$
DefVar $Flag_execwith_test$
DefVar $Flag_compare_to_python$
DefVar $Flag_winst_ldap_search$
DefVar $Flag_winst_opsiServiceCall$
DefVar $Flag_licensemanagement$
;DefVar $Flag_winst_idapiconfig$
DefVar $Flag_internalundocumented$
DefVar $Flag_RunAsLoggedOnAdmin$
DefVar $Flag_ProfileActions$
DefVar $Flag_calculate$
DefVar $Flag_encoding$
DefVar $Flag_jsonfunctions$
DefVar $Flag_crypt$
DefVar $Flag_powershell$
DefVar $Flag_subregex$
DefVar $Flag_subnetworkcalc$
DefVar $Flag_suburlparser$
DefVar $Flag_subwmi$
DefVar $Flag_var_as_param$

DefStringList $list$
DefStringList $list1$
DefStringList $list2$
DefStringList $list3$
DefStringList $list4$
DefStringList $testlist0$
DefStringList $testlist1$
DefStringList $testlist2$
DefStringList $testlist3$
DefStringList $testlist4$
DefStringList $testlist5$
DefStringList $testlist6$
DefStringList $testlist7$
DefStringList $test1list1$
DefStringList $test2list1$
DefStringList $test1list2$
DefStringList $test2list2$
DefStringList $CompList1$
DefStringList $CompList2$

DefStringList $INST_ResultList$
DefStringList $INST_ResultList2$
DefStringList $INST_ResultList3$
DefStringList $languageInfo$
DefStringList $resultlist$

DefVar $INST_SearchKey$
DefVar $INST_SearchValue$
DefVar $INST_SearchResult$
DefVar $INST_SystemType$
DefVar $INST_error$
DefVar $language$
DefVar $OS$
DefVar $NTVersion$
DefVar $opsi_message_title$
DefVar $exitcode$
DefVar $pathDelim$
DefVar $pingcommand$
DefVar $ping5command$
DefVar $pingregex$
DefVar $difftime$

DefVar $regWriteValue$

;File
DefVar $FileCopyTest$
DefVar $FileCopyTestSubDirectory$
DefVar $DirectorySubDirectory

; comapre_to_python
DefVar $result$

; LicenseManagement
DefVar $Lic_ProductId$
DefVar $LicensePool$
DefVar $licensekey$

defvar $captureproduct$
defvar $imagename$
defvar $depotid$
defvar $valuesListStr$
defvar $dotest$
defvar $adminuser_password$


; retrieve OS and NT Version

Set $OS$ = GetOS
; retrieve current language
set $languageInfo$ = getLocaleInfoMap
set $language$ = getValue("language_id_2chars", $languageInfo$)
if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.3")
	set $GUI$ = booltostring(runningWithGui)
else
	set $GUI$ = "true"
endif
;set $GUI$ = "false"

set $ProductId$ = "opsi-script-test"

switch $OS$
	case "Windows_nt"
		comment "We are running on Windows"
		Set $NTVersion$ = GetNTVersion
		set $MsVersion$ = GetMsVersionInfo
		Set $HomeTestFiles$ = "%opsiTmpDir%\testFiles"
		Set $opsi_script_test_helper_bin$ = "opsi-script-test-helper-win\opsiscripttesthelper.exe"
		Set $opsi_script_test_helper_child_bin$ = "opsi-script-test-helper-win\helperchild.exe"
		set $opsi_script_test_helper_path$ = "opsi-script-test-helper-win"
		set $helper_child_bin_log$ =  "helperchild.log"
		set $opsi_script_test_helper_bin_log$ = "opsiscripttesthelper.log"
		set $pathDelim$ = "\"
		
		; for ping parameters and errorcode see:
		; https://superuser.com/questions/403905/ping-from-windows-7-get-no-reply-but-sets-errorlevel-to-0
		set $pingcommand$ = "ping.exe"
		set $ping5command$ = $pingcommand$ +" -w 2999 -n 5 127.0.0.1"
		set $pingregex$ = '^ping.exe .*'
	endcase
	case "Linux"
		comment "We are running on Linux"
		Set $HomeTestFiles$ = "/tmp/opsi-script-test/testFiles"
		if $GUI$ = "true"
			Set $opsi_script_test_helper_bin$ = "opsi-script-test-helper-lin/64/opsiscripttesthelper"
			Set $opsi_script_test_helper_child_bin$ = "opsi-script-test-helper-lin/64/helperchild"
			set $helper_child_bin_log$ =  "helperchild.log"
			set $opsi_script_test_helper_bin_log$ = "opsiscripttesthelper.log"
		else
			Set $opsi_script_test_helper_bin$ = "opsi-script-test-helper-lin/64/opsiscripttesthelper_nogui"
			Set $opsi_script_test_helper_child_bin$ = "opsi-script-test-helper-lin/64/helperchild_nogui"
			set $helper_child_bin_log$ =  "helperchild_nogui.log"
			set $opsi_script_test_helper_bin_log$ = "opsiscripttesthelper_nogui.log"
		endif
;		set $helper_child_bin_name$ =  '%ScriptPath%/'+$opsi_script_test_helper_child_bin$
;		set $helper_child_bin_name$ =  ExtractFileName($opsi_script_test_helper_child_bin$)
;		set $opsi_script_test_helper_bin_name$ =  '%ScriptPath%/'+$opsi_script_test_helper_bin$
;		set $opsi_script_test_helper_bin_name$ =  ExtractFileName($opsi_script_test_helper_bin$)
		set $opsi_script_test_helper_path$ = "opsi-script-test-helper-lin"
		set $pathDelim$ = "/"
		set $pingcommand$ = "ping"
		set $ping5command$ = $pingcommand$ +" -c 5 127.0.0.1"
		set $pingregex$ = '^ping .*'
	endcase
	case "macos"
		comment "We are running on macOS"
		Set $HomeTestFiles$ = "/tmp/opsi-script-test/testFiles"
		if $GUI$ = "true"
			Set $opsi_script_test_helper_bin$ = "opsi-script-test-helper-mac/opsiscripttesthelper"
			Set $opsi_script_test_helper_child_bin$ = "opsi-script-test-helper-mac/helperchild"
			set $helper_child_bin_log$ =  "helperchild.log"
			set $opsi_script_test_helper_bin_log$ = "opsiscripttesthelper.log"
		else
			Set $opsi_script_test_helper_bin$ = "opsi-script-test-helper-mac/opsiscripttesthelper_nogui"
			Set $opsi_script_test_helper_child_bin$ = "opsi-script-test-helper-mac/helperchild_nogui"
			set $helper_child_bin_log$ =  "helperchild_nogui.log"
			set $opsi_script_test_helper_bin_log$ = "opsiscripttesthelper_nogui.log"
		endif
		set $opsi_script_test_helper_path$ = "opsi-script-test-helper-mac"
		set $pathDelim$ = "/"
		set $pingcommand$ = "/sbin/ping"
		set $ping5command$ = $pingcommand$ +" -c 5 127.0.0.1"
		set $pingregex$ = '^\/sbin\/ping .*'
	endcase
endswitch
set $helper_child_bin_name$ =  ExtractFileName ($opsi_script_test_helper_child_bin$)
set $opsi_script_test_helper_bin_name$ =  ExtractFileName ($opsi_script_test_helper_bin$)

Set $INST_SystemType$ = GetSystemType

if $INST_SystemType$ = "64 Bit System"
	set $architecture$ = "64"
else
	set $architecture$ = "32"
endif

Files_testFiles
set $FinalResult$ = "passed"


set $Lic_ProductId$ = "opsi-script-test"
set $LicensePool$ = "opsi-script-test-pool"



; Message at install time:
Message "Testing opsi-script ..."
;show product picture
ShowBitmap "%scriptpath%\opsi.png" $ProductId$

;if $MsVersion$ <= "5.0"
;	LogError "win2k is not supported because wmic is needed"
;	isFatalError
;endif

if "True" = GetProductProperty ("setfailed","False")
	LogError "set to fatal by property"
;isFatalError
endif

set $test_experimental$ = GetProductProperty ("test_experimental","False")
set $test_speed$ = GetProductProperty ("test_speed","False")

set $ScriptLoglevel$ = GetProductProperty ("loglevel", "7")
setLoglevel=$ScriptLoglevel$

set $MasterFlag$                   = GetProductProperty ("alltest", "off")
if $MasterFlag$ = "on"
	set $ScriptLoglevel$ = "5"
	setLoglevel=$ScriptLoglevel$
	comment "set loglevel to 5 because alltest=on and we want to get a log file that still can be handled."
	comment "In order to get a higher loglevel use the opsi-script.global.force_min_loglevel config."
endif

set $Flag_calculate$               = GetProductProperty ("calculate", "off")
set $Flag_winst_constants$         = GetProductProperty ("constants", "off")
set $Flag_winst_controls$          = GetProductProperty ("controlFunctions", "off")
set $Flag_crypt$                   = GetProductProperty ("cryptfunctions", "off")
set $Flag_encoding$                = GetProductProperty ("encoding", "on")
set $Flag_execwith_test$           = GetProductProperty ("ExecWith", "off")
set $Flag_winst_file$              = GetProductProperty ("files", "off")
set $Flag_infostest$               = GetProductProperty ("infoFunctions", "off")
set $Flag_jsonfunctions$           = GetProductProperty ("jsonfunctions", "off")
set $Flag_winst_ldap_search$       = GetProductProperty ("LdapSearch", "off")
set $Flag_licensemanagement$       = GetProductProperty ("licensemanagement", "off")
set $Flag_winst_link_folder$       = GetProductProperty ("LinkFolder", "off")
set $Flag_winst_local_functions$   = GetProductProperty ("LocalFunctions", "off")
set $Flag_winst_macos$             = GetProductProperty ("macOS", "off")
set $Flag_winst_opsiServiceCall$   = GetProductProperty ("opsiServiceCall", "off")
set $Flag_winst_parametrizing$     = GetProductProperty ("parametrizing", "off")
set $Flag_winst_patches$           = GetProductProperty ("Patches", "off")
set $Flag_winst_patch_hosts$       = GetProductProperty ("PatchHosts", "off")
set $Flag_winst_patch_text_file$   = GetProductProperty ("patchtextfile", "off")
set $Flag_powershell$              = GetProductProperty ("powershell", "off")
set $Flag_ProfileActions$          = GetProductProperty ("ProfileActions", "off")
set $Flag_subregex$                = GetProductProperty ("Regex", "off")
set $Flag_subnetworkcalc$          = GetProductProperty ("NetworkCalc", "off")
set $Flag_suburlparser$            = GetProductProperty ("Urlparser", "off")
set $Flag_subregistry$             = GetProductProperty ("Registry", "off")
set $Flag_winst_dos$               = GetProductProperty ("ShellBatch", "off")
set $Flag_winst_string$            = GetProductProperty ("stringFunctions", "off")
set $Flag_winst_string_list$       = GetProductProperty ("stringListFunctions", "off")
set $Flag_subtestsub$              = GetProductProperty ("sub", "off")
set $Flag_var_as_param$            = GetProductProperty ("var_as_param", "off")
set $Flag_subwmi$                  = GetProductProperty ("WMI", "off")
set $Flag_winst_winbatch$          = GetProductProperty ("Winbatch", "off")
set $Flag_winst_xml$               = GetProductProperty ("XMLPatch", "off")
set $Flag_winst_xml2$              = GetProductProperty ("XML2", "off")

;--------------------------------------------------------
set $Flag_compare_to_python$       = GetProductProperty ("ExecPython", "off")
set $Flag_internalundocumented$    = GetProductProperty ("internalundocumented", "off")
set $Flag_RunAsLoggedOnAdmin$      = GetProductProperty ("RunAsLoggedOnAdmin", "off")
;--------------------------------------------------------
;set $Flag_winst_idapiconfig$       = GetProductProperty ("idapiconfig", "off")


if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.11.4.7")
	AutoActivityDisplay = true
endif


if ($Flag_winst_constants$ = "on") or ($MasterFlag$ = "on")
	Message "testing winst constants"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing winst constants"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	; start testing
	set $TestResult$ = "o.k."
	Set $ExpectedResult$ = "o.k."
	
	if $OS$ = "Windows_NT"
		if $language$ = "DE"
			comment ""
			comment "-------------------------------------"
			message "Testing: "+"%"+"AppdataDir" +"%"
			comment "%"+"AppdataDir" +"%"
			comment "(the app data for the current user)"
			DosInAnIcon_set
			
			if "%opsiserviceURL%" = ""
				set $ConstTest$="%AppdataDir%"
				if $NTVersion$ = "WinXP"
					set $CompValue$ = EnvVar("UserProfile") + "\Anwendungsdaten"
					;"C:\Dokumente und Einstellungen\%username%\Anwendungsdaten"
					if ($ConstTest$= $CompValue$)
						comment "passed"
					else
						set $TestResult$ = "not o.k."
						LogWarning "failed"
					endif
					;if not ( ($ConstTest$ = $CompValue$) or ($ConstTest$ = '/-!! not found -!!-/'))
					;	set $TestResult$ = "not o.k."
					;endif
				else
					if $NTVersion$ = "Windows Vista"
						comment "Vista not tested"
						;set $CompValue$ = EnvVar("AppData")
						;if not ($ConstTest$ = $CompValue$)
						;	set $TestResult$ = "not o.k."
						;endif
					endif
				endif
			endif
			comment ""
			comment "-------------------------------------"
			message "Testing: "+"%"+"CurrentAppdataDir" +"%"
			comment "%"+"AppdataDir" +"%"
			comment "(the app data for the current user)"
			DosInAnIcon_set
			
			if "%opsiserviceURL%" = ""
				set $ConstTest$="%CurrentAppdataDir%"
				if $NTVersion$ = "WinXP"
					set $CompValue$ = EnvVar("UserProfile") + "\Anwendungsdaten"
					;"C:\Dokumente und Einstellungen\%username%\Anwendungsdaten"
					if ($ConstTest$= $CompValue$)
						comment "passed"
					else
						set $TestResult$ = "not o.k."
						LogWarning "failed"
					endif
					;if not ( ($ConstTest$ = $CompValue$) or ($ConstTest$ = '/-!! not found -!!-/'))
					;	set $TestResult$ = "not o.k."
					;endif
				else
					if $NTVersion$ = "Windows Vista"
						comment "Vista not tested"
						;set $CompValue$ = EnvVar("AppData")
						;if not ($ConstTest$ = $CompValue$)
						;	set $TestResult$ = "not o.k."
						;endif
					endif
				endif
			endif
		endif  ; lang = de
		
		
		message "Testing constants: "+"%"+"DefaultUserProfileDir"+"%"
		set $ConstTest$="%DefaultUserProfileDir%"
		;if $MsVersion$ < "6"
		if CompareDotSeparatedNumbers(GetMsVersionInfo,"6.0") < "0"
			set $CompValue$ = "%SYSTEMDRIVE%"+takestring(1,splitString(GetRegistrystringvalue("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList] ProfilesDirectory"),"%"+"SystemDrive"+"%"))
			set $CompValue$ = $CompValue$+"\"+GetRegistrystringvalue("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList] DefaultUserProfile")
		else
			set $CompValue$ = "%SYSTEMDRIVE%"+takestring(1,splitString(GetRegistrystringvalue("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList] Default"),"%"+"SystemDrive"+"%"))
		endif
		
		if ($ConstTest$= $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		
		comment "-------------------------------------"
		comment "Testing: "
		message "Testing constants: "+"%"+"AllUsersProfileDir"+"%"
		set $ConstTest$="%AllUsersProfileDir%"
		;if $MsVersion$ < "6"
		if CompareDotSeparatedNumbers(GetMsVersionInfo,"6.0") < "0"
			set $CompValue$ = "%SYSTEMDRIVE%"+takestring(1,splitString(GetRegistrystringvalue("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList] ProfilesDirectory"),"%"+"SystemDrive"+"%"))
			set $CompValue$ = $CompValue$+"\"+GetRegistrystringvalue("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList] AllUsersProfile")
		else
			set $CompValue$ = "%SYSTEMDRIVE%"+takestring(1,splitString(GetRegistrystringvalue("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList] Public"),"%"+"SystemDrive"+"%"))
		endif
		
		if ($ConstTest$= $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		message "Testing constants: "+"%"+"CommonProfileDir"+"%"
		set $ConstTest$="%CommonProfileDir%"
		;if $MsVersion$ < "6"
		if CompareDotSeparatedNumbers(GetMsVersionInfo,"6.0") < "0"
			set $CompValue$ = "%SYSTEMDRIVE%"+takestring(1,splitString(GetRegistrystringvalue("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList] ProfilesDirectory"),"%"+"SystemDrive"+"%"))
			set $CompValue$ = $CompValue$+"\"+GetRegistrystringvalue("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList] AllUsersProfile")
		else
			set $CompValue$ = "%SYSTEMDRIVE%"+takestring(1,splitString(GetRegistrystringvalue("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList] Public"),"%"+"SystemDrive"+"%"))
		endif
		
		if ($ConstTest$= $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "Testing constants: "+"%"+"CommonStartMenuPath" +"%"
		set $ConstTest$="%CommonStartMenuPath%"
		set $CompValue$ = GetRegistrystringvalue("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders] Common Start Menu")
		
		if ($ConstTest$= $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "Testing constants: "+"%"+"CommonAppDataDir" +"%"
		set $ConstTest$="%CommonAppDataDir%"
		set $CompValue$ = GetRegistrystringvalue("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders] Common AppData")
		
		if ($ConstTest$= $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "Testing constants: "+"%"+"CommonDesktopDir" +"%"
		set $ConstTest$="%CommonDesktopDir%"
		set $CompValue$ = GetRegistrystringvalue("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders] Common Desktop")
		
		if ($ConstTest$= $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "Testing constants: "+"%"+"CommonStartupDir" +"%"
		set $ConstTest$="%CommonStartupDir%"
		set $CompValue$ = GetRegistrystringvalue("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders] Common Startup")
		
		if ($ConstTest$= $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "Testing constants: "+"%"+"CommonProgramDir" +"%"
		set $ConstTest$="%CommonProgramsDir%"
		set $CompValue$ = GetRegistrystringvalue("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders] Common Programs")
		
		if ($ConstTest$= $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "Testing constants: "+"%"+"ProfileDir" +"%"
		set $ConstTest$="%ProfileDir%"
		set $CompValue$ = "%SYSTEMDRIVE%"+takestring(1,splitString(GetRegistrystringvalue("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList] ProfilesDirectory"),"%"+"SystemDrive"+"%"))
		
		if ($ConstTest$= $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "Testing constants: "+"%"+"ProgramFilesDir" +"%"
		set $ConstTest$="%ProgramFilesDir%"
		set $CompValue$ = GetRegistrystringvalue("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion] ProgramFilesDir")
		;if $MsVersion$ >= "6.0"
		if CompareDotSeparatedNumbers(GetMsVersionInfo,"6.0") >= "0"
			if $INST_SystemType$ = "64 Bit System"
				set $CompValue$ = "C:\Program Files (x86)"
			else
				set $CompValue$ = "C:\Program Files"
			endif
		endif
		
		if ($ConstTest$= $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "Testing constants: "+"%"+"ProgramFiles32Dir" +"%"
		set $ConstTest$="%ProgramFiles32Dir%"
		set $CompValue$ = GetRegistrystringvalue("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion] ProgramFilesDir")
		;if $MsVersion$ >= "6.0"
		if CompareDotSeparatedNumbers(GetMsVersionInfo,"6.0") >= "0"
			if $INST_SystemType$ = "64 Bit System"
				set $CompValue$ = "C:\Program Files (x86)"
			else
				set $CompValue$ = "C:\Program Files"
			endif
		endif
		
		if ($ConstTest$= $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "Testing constants: "+"%"+"ProgramFiles64Dir" +"%"
		set $ConstTest$="%ProgramFiles64Dir%"
		set $CompValue$ = GetRegistrystringvalue64("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion] ProgramFilesDir")
		
		if ($ConstTest$= $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "Testing constants: "+"%"+"ProgramFilesSysnativeDir" +"%"
		set $ConstTest$="%ProgramFilesSysnativeDir%"
		set $CompValue$ = GetRegistrystringvalue64("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion] ProgramFilesDir")
		
		if ($ConstTest$= $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "Testing constants: "+"%"+"Systemroot" +"%"
		set $ConstTest$="%Systemroot%"
		if ( $NTVersion$ = "NT4" ) or ( $NTVersion$ = "Win2k" )
			set $CompValue$= "C:\Winnt"
		else
			set $CompValue$= "C:\Windows"
		endif
		
		if ($ConstTest$= $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "Testing constants: "+"%"+"System" +"%"
		set $ConstTest$="%System%"
		if ($ConstTest$= "%Systemroot%\system32")
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif ; windows
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Testing constants: "+"%"+"PCName" +"%"
	set $ConstTest$="%PCName%"
	if $OS$ = "Windows_NT"
		set $CompValue$= EnvVar("Computername")
	else
		set $CompValue$= takeString(0,shellCall("hostname"))
	endif
	if ($ConstTest$=$CompValue$)
		comment "passed"
	else
		LogWarning "failed"
		set $TestResult$ = "not o.k."
	endif
	
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Testing constants: "+"%"+"IPName" +"%"
	set $ConstTest$="%IPName%"
	if contains($ConstTest$, ".")
		set $ConstTest$= takestring(0,splitstring($ConstTest$, "."))
	endif
	switch $OS$
		case "Windows_nt"
			set $list1$ = getOutStreamFromSection("DosInAnIcon_ipconfig_all")
			set $tmp$ = takeString(3, $list1$)
			set $CompValue$ = takeString(-1, splitString ($tmp$, " "))
		endcase
		case "Linux"
			set $CompValue$ = takeString(0,shellCall("hostname -f"))
			set $CompValue$= takestring(0,splitstring($CompValue$, "."))
		endcase
		case "macos"
			set $CompValue$ = takeString(0,shellCall("hostname -s"))
		endcase
	endswitch
	
	;comment ">>not tested"
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		LogWarning "failed"
		set $TestResult$ = "not o.k."
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Testing constants: "+"%"+"IPAddress" +"%"
	set $ConstTest$="%IPAddress%"
	switch $OS$
		case "Windows_nt"
			set $list1$ = getOutStreamFromSection("DosInAnIcon_ipconfig_all")
			;set $tmp$ = takeString(34, $list1$)
			set $tmp$ = takeFirstStringContaining($list1$,"IPv4")
			set $tmp$ = trim($tmp$)
			set $CompValue$ = takeString(-1, splitString ($tmp$, ":"))
			if contains($CompValue$, "(")
				set $CompValue$ = trim(takeString(0, splitString ($CompValue$, "(")))
				;trim(stringReplace($CompValue$,"(Preferred)",""))
			endif
		endcase
		case "Linux"
			set $CompValue$ = GetIpByName(takeString(0,shellCall("hostname -f")))
			if $CompValue$ = "172.16.166.1"
				set $CompValue$ = GetIpByName(takeString(0,shellCall("hostname"))+".uib.local")
			endif
		endcase
		case "macos"
			set $list1$ = getOutStreamFromSection("ShellInAnIcon_ifconfig_all")
			set $CompValue$ = GetIpByName(takeString(0,shellCall("hostname -f")))
			set $CompValue$ =  takestring(0,shellCall("ipconfig getifaddr en0"))
			if not (isValidIP4 ($CompValue$))
				set $CompValue$ =  takestring(0,shellCall("ipconfig getifaddr en1"))
			endif
			if not (isValidIP4 ($CompValue$))
				set $CompValue$ =  takestring(0,shellCall("ipconfig getifaddr en5"))
			endif
		endcase
	endswitch
	
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		; removed from assesment because the use is diccouraged:
		; %IPADDRESS% may be any IP-number of the system
		;LogWarning "failed"
		;set $TestResult$ = "not o.k."
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Testing constants: "+"%"+"Username" +"%"
	set $ConstTest$="%Username%"
	switch $OS$
		case "Windows_nt"
			set $CompValue$ = EnvVar("Username")
		endcase
		case "Linux"
			set $CompValue$ = EnvVar("USER")
		endcase
		case "macos"
			set $CompValue$ = EnvVar("USER")
		endcase
	endswitch
	comment ">>not tested"
	;if ($ConstTest$= $CompValue$)
	;	comment "passed"
	;else
	;	LogWarning "failed"
	;	set $TestResult$ = "not o.k."
	;endif
	
	; the following constants are not in a script testable if not a specific execution environment can be guaranteed
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Testing constants: "+"%"+"ScriptPath" +"%"
	set $ConstTest$="%ScriptPath%"
	comment ">>not tested"
	comment "Value of "+"%"+"ScriptPath"+"%"+" is %ScriptPath%"
	;if not ($ConstTest$= "")
	;	set $TestResult$ = "not o.k."
	;endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Testing constants: "+"%"+"ScriptDrive" +"%"
	set $ConstTest$="%ScriptDrive%"
	comment ">>not tested"
	comment "Value of "+"%"+"ScriptDrive"+"%"+" is %ScriptDrive%"
	;if not ($ConstTest$= "%WinstDir%")
	;	set $TestResult$ = "not o.k."
	;endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Testing constants: "+"%"+"Logfile" +"%"
	set $ConstTest$="%LogFile%"
	comment ">>not tested"
	comment "Value of "+"%"+"LogFile"+"%"+" is %LogFile%"
	;if not ($ConstTest$= "")
	;	set $TestResult$ = "not o.k."
	;endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Testing constants: "+"%"+"HostID" +"%"
	set $ConstTest$="%HostID%"
	comment ">>not tested"
	comment "Value of "+"%"+"HostID"+"%"+" is %HostID%"
	;if not ($ConstTest$= EnvVar(""))
	;	set $TestResult$ = "not o.k."
	;endif
	
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Testing constants: "+"%"+"opsiserviceURL" +"%"
	set $ConstTest$="%opsiserviceURL%"
	comment ">>not tested"
	comment "Value of "+"%"+"opsiserviceURL"+"%"+" is %opsiserviceURL%"
	;if not ($ConstTest$= EnvVar(""))
	;	set $TestResult$ = "not o.k."
	;endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Testing constants: "+"%"+"opsiserver" +"%"
	set $ConstTest$="%opsiserver%"
	comment ">>not tested"
	comment "Value of "+"%"+"opsiserver"+"%"+" is %opsiserver%"
	;if not ($ConstTest$= EnvVar(""))
	;	set $TestResult$ = "not o.k."
	;endif
	
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Testing constants: "+"%"+"opsiserviceUser" +"%"
	set $ConstTest$="%opsiserviceUser%"
	comment ">>not tested"
	comment "Value of "+"%"+"opsiserviceUser"+"%"+" is %opsiserviceUser%"
	;if not ($ConstTest$= EnvVar(""))
	;	set $TestResult$ = "not o.k."
	;endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Testing constants: "+"%"+"opsiservicePassword" +"%"
	set $ConstTest$="%opsiservicePassword%"
	comment ">>not tested"
	comment "Value of "+"%"+"opsiservicePassword"+"%"+" is %opsiservicePassword%"
	;if not ($ConstTest$= EnvVar(""))
	;	set $TestResult$ = "not o.k."
	;endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Testing constants: "+"%"+"installingProduct" +"%"
	set $ConstTest$="%installingProduct%"
	comment ">>not tested"
	comment "Value of "+"%"+"installingProduct"+"%"+" is %installingProduct%"
	;if not ($ConstTest$= EnvVar(""))
	;	set $TestResult$ = "not o.k."
	;endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Testing constants: "+"%"+"installingProdName" +"%"
	set $ConstTest$="%installingProdName%"
	comment ">>not tested"
	comment "Value of "+"%"+"installingProdName"+"%"+" is %installingProdName%"
	;if not ($ConstTest$= EnvVar(""))
	;	set $TestResult$ = "not o.k."
	;endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Testing constants: "+"%"+"installingProdVersion" +"%"
	set $ConstTest$="%installingProdVersion%"
	comment ">>not tested"
	comment "Value of "+"%"+"installingProdVersion"+"%"+" is %installingProdVersion%"
	;if not ($ConstTest$= EnvVar(""))
	;	set $TestResult$ = "not o.k."
	;endif
	
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Testing constants: "+"%"+"winstversion" +"%"
	set $ConstTest$ = "%WinstVersion%"
	if $OS$ = "Windows_NT"
		set $InterestingFile$ = "%winstdir%\winst.exe"
		if not (FileExists($InterestingFile$))
			set $InterestingFile$ = "%winstdir%\winst32.exe"
		endif
		set $INST_Resultlist$ = getFileInfoMap($InterestingFile$)
		set $CompValue$ = getValue("file version with dots", $INST_Resultlist$ )
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif
	
	
	if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.3.6")
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "Testing constants: "+"%"+"OpsiscriptVersion" +"%"
		set $ConstTest$ = "%OpsiscriptVersion%"
		if $OS$ = "Windows_NT"
			set $InterestingFile$ = "%Opsiscriptdir%\winst.exe"
			if not (FileExists($InterestingFile$))
				set $InterestingFile$ = "%Opsiscriptdir%\winst32.exe"
			endif
			set $INST_Resultlist$ = getFileInfoMap($InterestingFile$)
			set $CompValue$ = getValue("file version with dots", $INST_Resultlist$ )
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif
	endif ; 4.12.3.6
	
	
	set $ConstTest$ = "%CurrentAppdataDir%"
	set $ConstTest$ = "%CurrentStartmenuDir%"
	set $ConstTest$ = "%CurrentDesktopDir%"
	set $ConstTest$ = "%CurrentStartupDir%"
	set $ConstTest$ = "%CurrentProgramsDir%"
	set $ConstTest$ = "%CurrentSendToDir%"
	if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.11.4")
		set $ConstTest$ = "%opsiDepotId%"
	endif
	if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.11.4.4")
		set $ConstTest$ = "%opsiTmpDir%"
		if $OS$ = "Windows_NT"
			set $CompValue$ = "C:\opsi.org\tmp"
		else
			set $CompValue$ = "/tmp"
		endif
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "%opsiLogDir%"
		if $OS$ = "Windows_NT"
			set $CompValue$ = "c:\opsi.org\log"
		else
			if runningAsAdmin
				set $CompValue$ = "/var/log/opsi-script"
			else
				set $CompValue$ = "/tmp"
			endif
		endif
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif
	
	if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.0.16")
		set $ConstTest$ = "%opsidata%"
		if $OS$ = "Windows_NT"
			set $CompValue$ = "C:\opsi.org\data"
		else
			set $CompValue$ = "/var/lib/opsi-client-agent"
		endif
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "%opsiapplog%"
		if $OS$ = "Windows_NT"
			set $CompValue$ = "c:\opsi.org\applog"
		else
			set $CompValue$ = "~/opsi.org/applog"
		endif
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif
	
	if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.3.4")
		if ($OS$ = "Windows_NT")
			if CompareDotSeparatedNumbers(GetMsVersionInfo,">=","6.0")
				comment " test stringlist"
				set $list$ = loadTextFile ("%ScriptPath%\test-files\constants\nt6x64_constants.txt")
				set $list$ = replaceOpsiConstants($list$)
				set $list1$ = getKeyList($list$)
				for %key% in $list1$ do sub_check_key_value_constants
				
				comment " test string"
				set $str$ = strLoadTextFile("%ScriptPath%\test-files\constants\nt6x64_constants.txt")
				set $str$ = replaceOpsiConstants($str$)
				set $ConstTest$ = takestring(0,splitstring($str$,"="))
				set $CompValue$ = takestring(1,splitstring($str$,"="))
				if $ConstTest$ = $CompValue$
					comment "passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "failed"
				endif
			endif
		endif
	endif
	
	sub "%scriptpath%\sub-scripts\subsub_constants.opsiscript"
	
	sub_compareResult
	set $winst_constants$ = $SubResult$
endif

if ($Flag_winst_parametrizing$ = "on") or ($MasterFlag$ = "on")
	Message "testing string functions"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment "testing Parametrizing opsi-script"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	Set $ExpectedResult$ = "o.k."
	; start testing
	set $TestResult$ = "o.k."
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "SetLogLevel / LogLevel (deprecated)"
	set $tmp$ = getLogLevel
	set $ConstTest$ = "8"
	logLevel=4
	Set $CompValue$ = getLogLevel
	setLogLevel=$tmp$
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "LogLevel"
	set $tmp$ = getLogLevel
	set $ConstTest$ = "7"
	setLogLevel=7
	Set $CompValue$ = getLogLevel
	setLogLevel=$tmp$
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	setLogLevel=$ScriptLoglevel$
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: SetConfidential"
	message "SetConfidential"
	SetConfidential "forbidden"
	comment "This is a forbidden string"
	comment "should be in the log file: This is a ***(confidential)*** string"
	if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.0.16")
		if isConfidential("forbidden")
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		
		message "asConfidential"
		set $ConstTest$ = asConfidential("hidden")
		comment "This is a hidden string"
		comment "should be in the log file: This is a ***(confidential)*** string"
		if isConfidential("hidden")
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = asConfidential(stringReplace("this is my old secret", "old", "new"))
		comment "this is my new secret"
		comment "should be in the log file:  ***(confidential)*** "
		if isConfidential("this is my new secret")
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif ; 4.12.0.16
	
	if not ("%installingProdName%" = "")
		comment "we are in opsi service mode"
		message "IniVar ("key")"
		comment "IniVar is deprecated - use GetProductProperty)
		set $ConstTest$ = "off"
		set $CompValue$ = IniVar ("dummy")
		if ($ConstTest$ = $CompValue$)
			comment "IniVar passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "IniVar failed"
		endif
		
		message "GetProductProperty (<PropertyName>, <DefaultValue>)"
		set $ConstTest$ = "off"
		set $CompValue$ = GetProductProperty ("dummy","on")
		if ($ConstTest$ = $CompValue$)
			comment "GetProductProperty passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "GetProductProperty failed"
		endif
		
		message "GetProductProperty (<PropertyName>, <DefaultValue>)"
		set $ConstTest$ = "False"
		set $CompValue$ = GetProductProperty ("dummybool","True")
		if ($ConstTest$ = $CompValue$)
			comment "GetProductProperty passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "GetProductProperty failed"
		endif
		
		message "GetProductProperty (<PropertyName>, <DefaultValue>)"
		comment "Attention: Reading a multi value property, gives you the"
		comment "values comma separeted, so you get in trouble if a value contains a comma"
		set $ConstTest$ = "ab,cd,ef,g,h"
		set $CompValue$ = GetProductProperty ("dummymulti","True")
		if ($ConstTest$ = $CompValue$)
			comment "GetProductProperty passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "GetProductProperty failed"
		endif
		
		
		
		set $ConstTest$ = "True"
		set $CompValue$ = GetProductProperty ("notexistingmulti","True")
		if ($ConstTest$ = $CompValue$)
			comment "GetProductProperty passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "GetProductProperty failed"
		endif
		
		if CompareDotSeparatedNumbers("%WinstVersion%","4.11.3") >= "0"
			message "GetProductPropertyList (<PropertyName>, <DefaultValue>)"
			;set $list1$ = createStringList("ab", "cd", "ef", "g,h")
			set $list$ = GetProductPropertyList ("dummymulti","True")
			if not ("" = takeFirstStringContaining($list$,"g,h"))
				comment "GetProductPropertyList passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "GetProductPropertyList failed"
			endif
			
			message "GetProductPropertyList (<PropertyName>, <DefaultValue>)"
			set $list$ = GetProductPropertyList ("notexistingmulti","True")
			if not ("" = takeFirstStringContaining($list$,"True"))
				comment "GetProductPropertyList passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "GetProductPropertyList failed"
			endif
			
			comment "Testing include commands"
			
			include_append "sub-scripts\section_Files_del_tmp_dummy.opsiinc"
			include_insert "sub-scripts\include-test1.opsiinc"
			
			comment "testing two sections with the same name"
			include_append "sub-scripts\section_DosInAnIcon_echo.opsiinc"
			DosInAnIcon_echo
			
		endif ; 4.11.3
		
	else
		comment "we are not in opsi service mode"
		message "GetProductProperty (<PropertyName>, <DefaultValue>)"
		set $ConstTest$ = "on"
		set $CompValue$ = GetProductProperty ("dummy","on")
		if ($ConstTest$ = $CompValue$)
			comment "GetProductProperty passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "GetProductProperty failed"
		endif
		
		message "GetProductProperty (<PropertyName>, <DefaultValue>)"
		set $ConstTest$ = "True"
		set $CompValue$ = GetProductProperty ("dummybool","True")
		if ($ConstTest$ = $CompValue$)
			comment "GetProductProperty passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "GetProductProperty failed"
		endif
	endif
	
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.5.2") >= "0"
		message "GetConfidentialProductProperty (<PropertyName>, <DefaultValue>)"
		if not("%opsiserviceURL%" = "")
			set $ConstTest$ = "This is confidential"
			set $CompValue$ = GetConfidentialProductProperty ("confidentialstring","")
			if ($ConstTest$ = $CompValue$)
				comment "GetConfidentialProductProperty passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "GetConfidentialProductProperty failed"
			endif
		endif
		set $ConstTest$ = "confidential test"
		set $CompValue$ = GetConfidentialProductProperty ("not-existing-property","confidential test")
		if ($ConstTest$ = $CompValue$)
			comment "GetConfidentialProductProperty passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "GetConfidentialProductProperty failed"
		endif
	endif ; 4.11.5.2
	
	sub_compareResult
	set $winst_parametrizing$ = $SubResult$
endif

if ($Flag_winst_string$ = "on") or ($MasterFlag$ = "on")
	Message "testing string functions"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing string functions"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	Set $ExpectedResult$ = "o.k."
	; start testing
	set $TestResult$ = "o.k."
	
	; Strings in Strings (Nested String Values)
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	comment "EscapeString"
	set $ConstTest$ = takeString(0, loadTextFile("%ScriptPath%\test-files\string\compEscapeString.txt"))
	Set $tmp$ = 'he says "Yes"'
	set $CompValue$ = EscapeString: Set $tmp$ = 'he says "Yes"'
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	; String Concatenation
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	comment "String concat"
	set $ConstTest$ = "my text and your text"
	Set $String1$ = "my text"
	Set $String2$ = "and"
	Set $String3$ = "your text"
	Set $CompValue$ = $String1$ + " " + $String2$ + " " + $String3$
	
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	; String Functions which Return the OS Type
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	comment "GetOS"
	comment GetOS
	set $ConstTest$ = GetOS
	Switch $ConstTest$
		Case "WINDOWS_NT"
			set $list$ = shellCall("ver")
			set $CompValue$ = takeFirstStringContaining($list$,"Microsoft Windows")
			if not($CompValue$ = "")
				set $CompValue$ = "WINDOWS_NT"
			endif
		EndCase
		Case "LINUX"
			set $CompValue$ = takeString(0,shellCall("uname"))
		EndCase
		Case "MACOS"
			set $CompValue$ = takeString(0,shellCall("uname"))
			set $ConstTest$ = "Darwin"
			
		EndCase
		DefaultCase
			set $CompValue$ = "notexisting"
		EndCase
	EndSwitch
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	; GetNtVersion is deprecated - not tested anymore - use GetMsVersionInfo or GetMSVersionMap
	;comment ""
	;comment "-------------------------------------"
	;comment "Testing: "
	;comment "GetNtVersion"
	;set $ConstTest$ = GetNtVersion
	;set $CompValue$ = GetRegistryStringValue ("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion] CurrentVersion")
	;if ($CompValue$ = "5.0")
	;	set $CompValue$ = "Win2k"
	;endif
	;if ($CompValue$ = "5.1")
	;	set $CompValue$ = "WinXP"
	;endif
	;if ($CompValue$ = "5.2")
	;	set $CompValue$ = "Win NT 5.2"
	;endif
	;if ($CompValue$ = "6.0")
	;	set $CompValue$ = "Windows Vista"
	;endif
	;if ($CompValue$ = "6.1")
	;	set $CompValue$ = "Windows Vista"
	;endif
	;if ($ConstTest$ = $CompValue$)
	;	comment "passed"
	;else
	;	set $TestResult$ = "not o.k."
	;	LogWarning "failed"
	;endif
	
	if $OS$ = "Windows_NT"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		comment "GetMsVersionInfo"
		set $ConstTest$ = GetMsVersionInfo
		if CompareDotSeparatedNumbers(GetMsVersionInfo,">=","10.0")
			set $CompValue$ = GetRegistryStringValue ("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion] CurrentMajorVersionNumber")
			set $CompValue$ = $CompValue$+'.'+GetRegistryStringValue ("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion] CurrentMinorVersionNumber")
		else
			set $CompValue$ = GetRegistryStringValue ("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion] CurrentVersion")
		endif
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		;if $MsVersion$ <= "5.0"
		if CompareDotSeparatedNumbers(GetMsVersionInfo,"5.0") <= "0"
			comment "not tested at win2k  because wmic is needed"
		else
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			comment "GetSystemType"
			set $ConstTest$ = GetSystemType
			DefStringList $wmic_systemtype_out$
			; started two times cause the stringnumberposition is wrong after the first time
			Set $wmic_systemtype_out$ = getOutstreamFromSection ('DosInAnIcon_retrieve_systemtype')
			DefVar $systemarch$
			Set $systemarch$ = TakeString (2,$wmic_systemtype_out$)
			;set $CompValue$ = GetRegistryStringValue ("[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node] ")
			if $systemarch$ = "x64-based PC  "
				set $CompValue$ = "64 Bit System"
			else
				set $CompValue$ = "x86 System"
			endif
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif
		
		;  String Functions for Retrieving Environment or Command Line Parameters
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "EnvVar"
		set $ConstTest$ = "C:"
		set $CompValue$ = EnvVar("SystemDrive")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif ; windows
	
	if $OS$="Linux"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "EnvVar"
		set $ConstTest$ = "/bin/sh"
		set $CompValue$ = EnvVar("SHELL")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			comment "seems not to work this way ..."
			;set $TestResult$ = "not o.k."
			;LogWarning "failed"
		endif
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	comment "ParamStr"
	comment ">> not tested yet"
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "GetLastExitCode"
	
	if $OS$ ="Windows_NT"
		Winbatch_exitcode_43_noquote_with_param
	else
		ShellInAnIcon_exit43
	endif
	set $ConstTest$ = "43"
	set $CompValue$ = getLastExitCode
	if ($ConstTest$ = $CompValue$)
		comment "Winbatch_testing exitcode passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "testing exitcode failed"
	endif
	
	if $OS$ ="Windows_NT"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "GetUserSID"
		set $ConstTest$ = "S-1-5-18"
		set $CompValue$ = GetUserSID("System")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif
	
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.1.2") >= "0"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "GetLoggedInUser"
		set $ConstTest$ = ""
		set $CompValue$ = GetLoggedInUser
		;if ($ConstTest$ = $CompValue$)
		;	comment "passed"
		;else
		;	set $TestResult$ = "not o.k."
		;	LogWarning "failed"
		;endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "GetUsercontext"
		setUsercontext = "opsi-script-test"
		set $ConstTest$ = "opsi-script-test"
		set $CompValue$ = GetUsercontext
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
	endif  ; 4.11.1.2
	
	
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	comment "SubstringBefore"
	set $ConstTest$ = "C:\programme\staroffice"
	set $CompValue$ = SubstringBefore ("C:\programme\staroffice\program\soffice.exe","\program\soffice.exe")
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	comment "SubstringBefore"
	set $ConstTest$ = "C:\programme\staroffice"
	set $tmp$ = "C:\programme\staroffice\program\soffice.exe"
	set $CompValue$ = SubstringBefore ($tmp$,"\program\soffice.exe")
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Trim"
	set $ConstTest$ = "dummy"
	set $tmp$ = " dummy "
	set $CompValue$ = Trim($tmp$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.2.1") >= "0"
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "getValue"
		comment ""
		set $INST_Resultlist$ = createStringList("a=1","b=2","c=2")
		set $ConstTest$ = "2"
		set $CompValue$ = getValue("b", $INST_Resultlist$)
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		comment "white spaces around the separator are not part of key and value"
		comment "if the key does not exist we get NULL"
		set $INST_Resultlist$ = createStringList("a = 1","b = 2","c = 2")
		set $ConstTest$ = "2"
		set $CompValue$ = getValue("b", $INST_Resultlist$)
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "2"
		set $CompValue$ = getValue("b ", $INST_Resultlist$)
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "NULL"
		set $CompValue$ = getValue("Not Existing", $INST_Resultlist$)
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "getValueBySeparator"
		comment "getValueBySeparator winst function"
		set $INST_Resultlist$ = createStringList("a:1","b:2","c:2")
		set $ConstTest$ = "2"
		set $CompValue$ = getValueBySeparator("b", ":", $INST_Resultlist$)
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		set $INST_Resultlist$ = createStringList("a:1","b:2","c:2")
		set $ConstTest$ = "NULL"
		set $CompValue$ = getValueBySeparator("b", "=", $INST_Resultlist$)
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "unquote"
		comment ""
		set $ConstTest$ = "b"
		set $CompValue$ = unquote("'b'", "'")
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		comment "double quote"
		set $ConstTest$ = "b"
		set $CompValue$ = unquote('"b"', '"')
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		comment "quote string will be trimmed and then only the first char is used"
		comment "note: brackets are different chars"
		set $ConstTest$ = "b]"
		set $CompValue$ = unquote("[b]", " [{ ")
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		comment "not usable to remove brackets"
		set $ConstTest$ = "b]"
		set $CompValue$ = unquote("[b]", "[")
		set $CompValue$ = unquote($CompValue$,"]")
		set $CompValue$ = unquote("[b]", "]")
		set $CompValue$ = unquote($CompValue$,"[")
		set $CompValue$ = unquote(unquote("[b]", "["),"]")
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		comment "if string not quoted it will be come back without changes"
		set $ConstTest$ = "b"
		set $CompValue$ = unquote("b", "'")
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
	endif ; 4.11.2.1
	
	
	
	if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.11.5.2")
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "unquote2"
		comment ""
		set $ConstTest$ = "b"
		set $CompValue$ = unquote2("'b'", "'")
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		comment "double quote"
		set $ConstTest$ = "b"
		set $CompValue$ = unquote2('"b"', '"')
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		comment "quote string will be trimmed."
		comment "if quote string has two chars, the first will be used as start mark and second as end mark"
		comment "so it is usable to remove brackets"
		set $ConstTest$ = "b"
		set $CompValue$ = unquote2("[b]", " [] ")
		; is the same as  unquote(unquote("[b]", "["),"]")
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "b"
		set $CompValue$ = unquote2("{b}", " {} ")
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		set $ConstTest$ = "b]"
		set $CompValue$ = unquote2("[b]", "[")
		set $CompValue$ = unquote2($CompValue$,"]")
		set $CompValue$ = unquote2("[b]", "]")
		set $CompValue$ = unquote2($CompValue$,"[")
		set $CompValue$ = unquote2(unquote("[b]", "["),"]")
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		comment "if not quotes found at start AND end th string it will be come back without changes"
		set $CompValue$ = unquote2("[b]", "[")
		set $CompValue$ = unquote2("[b]", "]")
		set $CompValue$ = unquote2('"b]', "'")
		set $ConstTest$ = "'b"
		set $CompValue$ = unquote2("'b", "'")
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif ; 4.11.5.2
	
	
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.4.4") >= "0"
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "getValueFromFile"
		comment ""
		set $testfile$ = $HomeTestFiles$+"\dummy.txt"
		set $INST_Resultlist$ = createStringList("a=1","b=2","c=2")
		if saveTextFile($INST_Resultlist$, $testfile$)
			set $ConstTest$ = "2"
			set $CompValue$ = getValueFromFile("b", $testfile$)
			comment "compare values"
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		comment "white spaces around the separator are not part of key and value"
		comment "if the key does not exist we get NULL"
		set $INST_Resultlist$ = createStringList("a = 1","b = 2","c = 2")
		if saveTextFile($INST_Resultlist$, $testfile$)
			set $ConstTest$ = "2"
			set $CompValue$ = getValueFromFile("b", $testfile$)
			comment "compare values"
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			set $ConstTest$ = "2"
			set $CompValue$ = getValueFromFile("b ", $testfile$)
			comment "compare values"
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			if CompareDotSeparatedNumbers("%WinstVersion%","4.11.6.1") >= "0"
				set $ConstTest$ = ""
			else
				comment "This is a bug in opsi-script < 4.11.6": should be empty string"
				set $ConstTest$ = "NULL"
			endif
			set $CompValue$ = getValueFromFile("Not existing", $testfile$)
			comment "compare values"
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			if CompareDotSeparatedNumbers("%WinstVersion%","4.11.6.1") >= "0"
				set $ConstTest$ = ""
			else
				comment "This is a bug in opsi-script < 4.11.6": should be empty string"
				set $ConstTest$ = "NULL"
			endif
			set $CompValue$ = getValueFromFile("Not existing", "Not existing")
			comment "compare values"
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "getValueFromFileBySeparator"
		comment "getValueFromFileBySeparator winst function"
		set $INST_Resultlist$ = createStringList("a:1","b:2","c:2")
		if saveTextFile($INST_Resultlist$, $testfile$)
			set $ConstTest$ = "2"
			set $CompValue$ = getValueFromFileBySeparator("b", ":", $testfile$)
			comment "compare values"
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		set $INST_Resultlist$ = createStringList("a:1","b:2","c:2")
		if saveTextFile($INST_Resultlist$, $testfile$)
			if CompareDotSeparatedNumbers("%WinstVersion%","4.11.6.1") >= "0"
				set $ConstTest$ = ""
			else
				comment "This is a bug in opsi-script < 4.11.6": should be empty string"
				set $ConstTest$ = "NULL"
			endif
			set $CompValue$ = getValueFromFileBySeparator("b", "=", $testfile$)
			comment "compare values"
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $INST_Resultlist$ = createStringList("a:1","b:2","c:2")
		if saveTextFile($INST_Resultlist$, $testfile$)
			if CompareDotSeparatedNumbers("%WinstVersion%","4.11.6.1") >= "0"
				set $ConstTest$ = ""
			else
				comment "This is a bug in opsi-script < 4.11.6": should be empty string"
				set $ConstTest$ = "NULL"
			endif
			set $CompValue$ = getValueFromFileBySeparator("not existing", ":", $testfile$)
			comment "compare values"
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		set $INST_Resultlist$ = createStringList("a:1","b:2","c:2")
		if saveTextFile($INST_Resultlist$, $testfile$)
			if CompareDotSeparatedNumbers("%WinstVersion%","4.11.6.1") >= "0"
				set $ConstTest$ = ""
			else
				comment "This is a bug in opsi-script < 4.11.6": should be empty string"
				set $ConstTest$ = "NULL"
			endif
			set $CompValue$ = getValueFromFileBySeparator("b", "=", "not existing")
			comment "compare values"
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif ; 4.11.4.4
	
	
	; Additional String Functions
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "RandomStr"
	set $ConstTest$ = RandomStr
	set $CompValue$ = RandomStr
	if not(($ConstTest$ = $CompValue$) AND not($ConstTest$ = ""))
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "RandomStr"
	set $list$ = createStringList("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20")
	for %c% in $list$ do sub_random_pass_test
	
	DefVar $nTotalChars$
	DefVar $nLowerCases$
	DefVar $nUpperCases$
	DefVar $nDigits$
	DefVar $nSpecialChars$
	DefVar $inTotalChars$
	DefVar $inLowerCases$
	DefVar $inUpperCases$
	DefVar $inDigits$
	DefVar $inSpecialChars$
	
	
	DefFunc randomCharTester($i$ : string, ref $StringResult$ : string) : void
		if contains("abcdefghijklmnopqrstuvwxyz",strPart($StringResult$,$i$,"1"))
			set $nLowerCases$ = calculate($nLowerCases$+"+"+"1")
		endif
		if contains("ABCDEFGHIJKLMNOPQRSTUVWXYZ",strPart($StringResult$,$i$,"1"))
			set $nUpperCases$ = calculate($nUpperCases$+"+"+"1")
		endif
		if isNumber(strPart($StringResult$,$i$,"1"))
			set $nDigits$ = calculate($nDigits$+"+"+"1")
		endif
		if contains("!$()*+/;=?[]{}ß~§°",strPart($StringResult$,$i$,"1"))
			set $nSpecialChars$ = calculate($nSpecialChars$+"+"+"1")
		endif
	endfunc
	
	DefFunc randomstrTester($StringResult$ : string) :void
		if (strLength($StringResult$) INT >= $inTotalChars$)
			set $nLowerCases$ = "0"
			set $nUpperCases$ = "0"
			set $nDigits$ = "0"
			set $nSpecialChars$ = "0"
			for %i% = "1" to strLength($StringResult$) do randomCharTester("%i%",$StringResult$)
			if  ($nLowerCases$ INT>= $inLowerCases$ AND  $nUpperCases$ = $inUpperCases$ AND  $nDigits$ = $inDigits$ AND $nSpecialChars$ = $inSpecialChars$)
				comment "Testing randomstrWithParameters succeeded"
			else
				set $TestResult$ = "not o.k."
				LogWarning "Testing randomstrWithParameters failed"
			endif
		else
			set $TestResult$ = "not o.k."
			LogWarning "Testing randomstrWithParameters failed"
		endif
	endfunc
	
	set $inTotalChars$ = "10"
	set $inLowerCases$ = "3"
	set $inUpperCases$ = "2"
	set $inDigits$ = "4"
	set $inSpecialChars$ = "1"
	set $ConstTest$ = randomstrWithParameters($inTotalChars$,$inLowerCases$,$inUpperCases$,$inDigits$,$inSpecialChars$)
	randomstrTester($ConstTest$)
	
	set $inTotalChars$ = "10"
	set $inLowerCases$ = "0"
	set $inUpperCases$ = "1"
	set $inDigits$ = "1"
	set $inSpecialChars$ = "8"
	set $ConstTest$ = randomstrWithParameters($inTotalChars$,$inLowerCases$,$inUpperCases$,$inDigits$,$inSpecialChars$)
	randomstrTester($ConstTest$)
	
	set $inTotalChars$ = "5"
	set $inLowerCases$ = "0"
	set $inUpperCases$ = "1"
	set $inDigits$ = "1"
	set $inSpecialChars$ = "8"
	set $ConstTest$ = randomstrWithParameters($inTotalChars$,$inLowerCases$,$inUpperCases$,$inDigits$,$inSpecialChars$)
	randomstrTester($ConstTest$)
	
	set $inTotalChars$ = "15"
	set $inLowerCases$ = "0"
	set $inUpperCases$ = "1"
	set $inDigits$ = "1"
	set $inSpecialChars$ = "8"
	set $ConstTest$ = randomstrWithParameters($inTotalChars$,$inLowerCases$,$inUpperCases$,$inDigits$,$inSpecialChars$)
	randomstrTester($ConstTest$)
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "CompareDotSeparatedNumbers (Bool)"
	set $string1$ = "1.2.3.4.5"
	set $string2$ = "1.2.3.4.5"
	if CompareDotSeparatedNumbers($string1$, "<", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedNumbers($string1$, "<=", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedNumbers($string1$, "=<", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedNumbers($string1$, "=", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedNumbers($string1$, ">=", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedNumbers($string1$, "=>", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedNumbers($string1$, ">", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	
	set $string1$ = "1.20.3.4.5"
	set $string2$ = "1.2.30.4.5"
	if CompareDotSeparatedNumbers($string1$, "<", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedNumbers($string1$, "<=", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedNumbers($string1$, "=<", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedNumbers($string1$, "=", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedNumbers($string1$, ">=", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedNumbers($string1$, "=>", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedNumbers($string1$, ">", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $string1$ = "1.2.30.4.5"
	set $string2$ = "1.20.30.4.5"
	if CompareDotSeparatedNumbers($string1$, "<", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedNumbers($string1$, "<=", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedNumbers($string1$, "=<", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedNumbers($string1$, "=", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedNumbers($string1$, ">=", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedNumbers($string1$, "=>", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedNumbers($string1$, ">", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "CompareDotSeparatedStrings (Bool)"
	set $string1$ = "1.a.b.c.3"
	set $string2$ = "1.a.b.c.3"
	if CompareDotSeparatedStrings($string1$, "<", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedStrings($string1$, "<=", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedStrings($string1$, "=<", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedStrings($string1$, "=", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedStrings($string1$, ">=", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedStrings($string1$, "=>", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedStrings($string1$, ">", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	
	set $string1$ = "1.a.cb.c.3"
	set $string2$ = "1.a.b.c.3"
	if CompareDotSeparatedStrings($string1$, "<", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedStrings($string1$, "<=", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedStrings($string1$, "=<", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedStrings($string1$, "=", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedStrings($string1$, ">=", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedStrings($string1$, "=>", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedStrings($string1$, ">", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $string1$ = "1.a.ab.c.3"
	set $string2$ = "1.a.b.c.3"
	if CompareDotSeparatedStrings($string1$, "<", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedStrings($string1$, "<=", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedStrings($string1$, "=<", $string2$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	if CompareDotSeparatedStrings($string1$, "=", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedStrings($string1$, ">=", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedStrings($string1$, "=>", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	if CompareDotSeparatedStrings($string1$, ">", $string2$)
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	else
		comment "passed"
	endif
	
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "CompareDotSeparatedNumbers"
	set $string1$ = "1.2.3.4.5"
	set $string2$ = "1.2.3.4.5"
	set $ConstTest$ = "0"
	set $CompValue$ = CompareDotSeparatedNumbers($string1$, $string2$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
		comment $string1$+" is equal to "+$string2$
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $string1$ = "1.2.31.4.5"
	set $string2$ = "1.2.13.4.5"
	set $ConstTest$ = "1"
	set $CompValue$ = CompareDotSeparatedNumbers($string1$, $string2$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
		comment $string1$+" is higher then "+$string2$
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $string1$ = "1.2.3.4.5"
	set $string2$ = "1.2.13.4.5"
	set $ConstTest$ = "-1"
	set $CompValue$ = CompareDotSeparatedNumbers($string1$, $string2$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
		comment $string1$+" is lower then "+$string2$
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "CompareDotSeparatedStrings"
	set $string1$ = "1.a.b.c.3"
	set $string2$ = "1.a.b.c.3"
	set $ConstTest$ = "0"
	set $CompValue$ = CompareDotSeparatedStrings($string1$, $string2$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
		comment $string1$+" is equal to "+$string2$
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $string1$ = "1.a.b.c.3"
	set $string2$ = "1.A.B.C.3"
	set $ConstTest$ = "0"
	set $CompValue$ = CompareDotSeparatedStrings($string1$, $string2$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
		comment $string1$+" is equal to "+$string2$
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $string1$ = "1.a.cb.c.3"
	set $string2$ = "1.a.b.c.3"
	set $ConstTest$ = "1"
	set $CompValue$ = CompareDotSeparatedStrings($string1$, $string2$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
		comment $string1$+" is higher then "+$string2$
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $string1$ = "1.a.ab.c.3"
	set $string2$ = "1.a.b.c.3"
	set $ConstTest$ = "-1"
	set $CompValue$ = CompareDotSeparatedStrings($string1$, $string2$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
		comment $string1$+" is lower then "+$string2$
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $string1$ = "1.2.13.4.5"
	set $string2$ = "1.2.3.4.5"
	set $ConstTest$ = "-1"
	set $CompValue$ = CompareDotSeparatedStrings($string1$, $string2$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
		comment $string1$+" is lower then "+$string2$
		comment "using CompareDotSeparatedStrings give wrong results on numbers"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $string1$ = "1.2.3.4.5"
	set $string2$ = "1.2.13.4.5"
	set $ConstTest$ = "1"
	set $CompValue$ = CompareDotSeparatedStrings($string1$, $string2$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
		comment $string1$+" is higher then "+$string2$
		comment "using CompareDotSeparatedStrings give wrong results on numbers"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	
	
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Umlaut"
	set $ConstTest$ = "üöäßÖÜÄáéíóàèùìòâêûîô"
	set $CompValue$ = "üöäßÖÜÄáéíóàèùìòâêûîô"
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.1.2") >= "0"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "getUserContext"
		set $ConstTest$ = getUserContext
	else
		comment "getUserContext not tested, minimum winst needed: 4.11.1.2"
	endif
	
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.3.2") >= "0"
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "stringReplace"
		set $ConstTest$ = "123451234512345"
		set $CompValue$ = stringReplace("1xy451Xy451XY45","xy","23")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "contains"
		set $ConstTest$ = "1xy451Xy451XY45"
		set $CompValue$ ="xy"
		if contains($ConstTest$, $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $CompValue$ ="xY"
		if not(contains($ConstTest$, $CompValue$))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "strPos"
		set $tmp$ = "1xY451Xy451xy45"
		set $ConstTest$ = "7"
		set $CompValue$ = strPos($tmp$,"Xy")
		if $ConstTest$ = $CompValue$
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $tmp$ = lower("1xY451Xy451xy45")
		set $ConstTest$ = "2"
		set $CompValue$ = strPos($tmp$,lower("xy"))
		if $ConstTest$ = $CompValue$
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "strLength"
		set $tmp$ = "123456789"
		set $ConstTest$ = "9"
		set $CompValue$ = strLength($tmp$)
		if $ConstTest$ = $CompValue$
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $tmp$ = ""
		set $ConstTest$ = "0"
		set $CompValue$ = strLength($tmp$)
		if $ConstTest$ = $CompValue$
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "strPart"
		set $tmp$ = "123456789"
		set $ConstTest$ = "34"
		set $CompValue$ = strPart($tmp$,"3","2")
		if $ConstTest$ = $CompValue$
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $tmp$ = "123456789"
		set $ConstTest$ = "56789"
		set $CompValue$ = strPart($tmp$, strPos($tmp$,"56"),strLength($tmp$))
		if $ConstTest$ = $CompValue$
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "lower"
		set $ConstTest$ = "12threefour_!"
		set $CompValue$ = lower("12ThreeFour_!")
		if $ConstTest$ = $CompValue$
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		message "upper"
		set $ConstTest$ = "12THREEFOUR_!"
		set $CompValue$ = upper("12ThreeFour_!")
		if $ConstTest$ = $CompValue$
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "isnumber"
		set $ConstTest$ = "1"
		if isNumber($ConstTest$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "12345"
		if isNumber($ConstTest$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "12.34"
		if not(isNumber($ConstTest$))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "five"
		if not(isNumber($ConstTest$))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "12,23"
		if not(isNumber($ConstTest$))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		if not ("%opsiserviceURL%" = "")
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "getMyIpByTarget"
			;set $ConstTest$ = "%IPAddress%"
			switch $OS$
				case "Windows_nt"
					set $list1$ = getOutStreamFromSection("DosInAnIcon_ipconfig_all")
					;set $tmp$ = takeString(34, $list1$)
					set $tmp$ = takeFirstStringContaining($list1$,"IPv4")
					set $tmp$ = trim($tmp$)
					set $CompValue$ = takeString(-1, splitString ($tmp$, ":"))
					if contains($CompValue$, "(")
						set $CompValue$ = trim(takeString(0, splitString ($CompValue$, "(")))
						;trim(stringReplace($CompValue$,"(Preferred)",""))
					endif
				endcase
				case "Linux"
					set $CompValue$ = GetIpByName(takeString(0,shellCall("hostname -f")))
					if "vmnat.local" = takeString(0,shellCall("hostname -d"))
						set $CompValue$ = GetIpByName(takeString(0,shellCall("hostname"))+".uib.local")
					endif
					if $CompValue$ = "172.16.166.1"
						set $CompValue$ = GetIpByName(takeString(0,shellCall("hostname"))+".uib.local")
					endif
				endcase
				case "macos"
					set $list1$ = getOutStreamFromSection("ShellInAnIcon_ifconfig_all")
					set $CompValue$ = GetIpByName(takeString(0,shellCall("hostname -f")))
					if not (isValidIP4 ($CompValue$))
						set $CompValue$ =  takestring(0,shellCall("ipconfig getifaddr en1"))
					endif
					if not (isValidIP4 ($CompValue$))
						set $CompValue$ =  takestring(0,shellCall("ipconfig getifaddr en5"))
					endif
					if not (isValidIP4 ($CompValue$))
						set $CompValue$ =  takestring(0,shellCall("ipconfig getifaddr en0"))
					endif
				endcase
			endswitch
			set $string1$ = "%opsiServer%"
			set $ConstTest$ = getMyIpByTarget($string1$)
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif ; opsi service
		
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "getIpByName"
		set $ConstTest$ = "127.0.0.1"
		set $string1$ = "localhost"
		markErrorNumber
		set $CompValue$ = getIpByName($string1$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			if errorsOccuredSinceMark > 0
				set $TestResult$ = "not o.k."
			endif
			LogWarning "failed"
		endif
		if not("%opsiServiceUser%" = "")
			markErrorNumber
			set $ConstTest$ = getMyIpByTarget(getIpByName("%opsiServiceUser%"))
			set $CompValue$ = getIpByName("%opsiServiceUser%")
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				if errorsOccuredSinceMark > 0
					set $TestResult$ = "not o.k."
				endif
				LogWarning "failed"
			endif
		endif
		
		;markErrorNumber
		;set $ConstTest$ = getMyIpByTarget(getIpByName("%PCName%"))
		;set $CompValue$ = getIpByName("%PCName%")
		;if ($ConstTest$ = $CompValue$)
		;	comment "passed"
		;else
		;	if errorsOccuredSinceMark = 0
		;		set $TestResult$ = "not o.k."
		;	endif
		;	LogWarning "failed"
		;endif
		
		markErrorNumber
		set $ConstTest$ = getMyIpByTarget(getIpByName("%PCName%"))
		set $CompValue$ = getIpByName("%PCName%")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			if errorsOccuredSinceMark > 0
				set $TestResult$ = "not o.k."
			endif
			LogWarning "failed"
		endif
		
		
		
	else
		comment "stringReplace not tested, minimum winst needed: 4.11.3.2"
	endif
	
	sub_compareResult
	set $winst_string$ = $SubResult$
endif

if ($Flag_calculate$ = "on") or ($MasterFlag$ = "on")
	Message "testing calculate functions"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing calculate functions"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	Set $ExpectedResult$ = "o.k."
	; start testing
	set $TestResult$ = "o.k."
	
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.3.5") >= "0"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "calculate"
		set $ConstTest$ = "0"
		set $CompValue$ = calculate("-1+1")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "1"
		set $CompValue$ = calculate("0+1")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "2"
		set $CompValue$ = calculate("1+1")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "3"
		set $CompValue$ = calculate("2+1")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "10"
		set $CompValue$ = calculate("9+1")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "11"
		set $CompValue$ = calculate("10+1")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		set $ConstTest$ = "10"
		set $CompValue$ = calculate("11-1")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "9"
		set $CompValue$ = calculate("10-1")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "2"
		set $CompValue$ = calculate("3-1")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "1"
		set $CompValue$ = calculate("2-1")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "0"
		set $CompValue$ = calculate("1-1")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "-1"
		set $CompValue$ = calculate("0-1")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $string1$ = "5"
		set $string2$ = "5"
		set $ConstTest$ = "25"
		set $CompValue$ = calculate($string1$+"*"+$string2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $string1$ = "5"
		set $string2$ = "5"
		set $ConstTest$ = "1"
		set $CompValue$ = calculate($string1$+"/"+$string2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $string1$ = "5"
		set $string2$ = "0"
		set $ConstTest$ = ""
		comment " expecting division by zero error and empty string result"
		set $CompValue$ = calculate($string1$+"/"+$string2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $string1$ = "9"
		set $string2$ = "10"
		set $ConstTest$ = "1"
		comment "result 0.9 is rounded to 1 "
		set $CompValue$ = calculate($string1$+"/"+$string2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $string1$ = "10"
		set $string2$ = "9"
		set $ConstTest$ = "1"
		comment "result 1.1111 is rounded to 1 "
		set $CompValue$ = calculate($string1$+"/"+$string2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $string1$ = "5"
		set $string2$ = "5"
		set $ConstTest$ = "55"
		comment " rule * before +"
		set $CompValue$ = calculate($string1$+"+"+$string2$+"*10")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $string1$ = "5"
		set $string2$ = "5"
		set $ConstTest$ = "100"
		comment "brackets before  rule * before + "
		set $CompValue$ = calculate("("+$string1$+"+"+$string2$+")*10")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $string1$ = "5"
		set $string2$ = "ten"
		set $ConstTest$ = ""
		comment "invalid char error"
		set $CompValue$ = calculate($string1$+"*"+$string2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $string1$ = "5"
		set $string2$ = ""
		set $ConstTest$ = "25"
		comment "5* is interpreted as 5*5"
		set $CompValue$ = calculate($string1$+"*")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $string1$ = "5"
		set $string2$ = ""
		set $ConstTest$ = "10"
		comment "5+ is interpreted as 5+5"
		set $CompValue$ = calculate($string1$+"+")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $string1$ = "5"
		set $string2$ = "ten 10"
		set $ConstTest$ = ""
		comment "invalid char error"
		set $CompValue$ = calculate($string1$+"*"+$string2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $string1$ = "nothing"
		set $string2$ = "foo"
		set $ConstTest$ = ""
		comment "invalid char error"
		set $CompValue$ = calculate($string1$+"*"+$string2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $string1$ = "5"
		set $string2$ = "foo"
		set $ConstTest$ = ""
		comment "invalid char error"
		set $CompValue$ = calculate($string1$+"/"+$string2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
	endif ; 4.11.3.5
	
	sub_compareResult
	set $winst_calculate$ = $SubResult$
endif


if ($Flag_infostest$ = "on") or ($MasterFlag$ = "on")
	Message "testing file and versions infos"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing file and versions infos"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	
	
	Set $ExpectedResult$ = "o.k."
	
	set $TestResult$ = "o.k."
	
	if $OS$ = "Windows_NT"
		; Chapter 6.4.1 Info Maps
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "File Infos Test"
		
		comment "ask helper.exe for version info and catch it from output"
		set $INST_ResultList$ = getOutStreamFromSection("DosInAnIcon_helper_version")
		set $ConstTest$ = takeFirstStringContaining($INST_ResultList$,"Version")
		set $ConstTest$ = trim(takeString(1, splitString($ConstTest$,':')))
		comment "get version info from helper.exe by winst function"
		set $InterestingFile$ = "%scriptpath%\"+$opsi_script_test_helper_bin$
		set $INST_Resultlist$ = getFileInfoMap($InterestingFile$)
		set $example$ = getValue("language name 0", $INST_Resultlist$ )
		set $CompValue$ = getValue("fileversion", $INST_Resultlist$ )
		
		for %line% in $INST_Resultlist$ do sub_showEntry
		
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		set $InterestingFile$ = "%winstdir%\winst.exe"
		if not (FileExists($InterestingFile$))
			set $InterestingFile$ = "%winstdir%\winst32.exe"
		endif
		set $INST_Resultlist$ = getFileInfoMap($InterestingFile$)
		for %line% in $INST_Resultlist$ do sub_showEntry
		
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "Locale Infos"
		set  $INST_Resultlist$ = getLocaleInfoMap
		comment "some examples"
		set $example$ = getValue("language_id_2chars", $INST_Resultlist$)
		set $example$ = getValue("language_id", $INST_Resultlist$)
		set $example$ = getValue("localized_name_of_language", $INST_Resultlist$)
		set $example$ = getValue("English_name_of_language", $INST_Resultlist$)
		set $example$ = getValue("native_name_of_language", $INST_Resultlist$)
		set $example$ = getValue("country_code", $INST_Resultlist$)
		set $example$ = getValue("English_name_of_country", $INST_Resultlist$)
		set $example$ = getValue("abbreviated_country_name", $INST_Resultlist$)
		set $example$ = getValue("native_name_of_country", $INST_Resultlist$)
		set $example$ = getValue("default_language_id", $INST_Resultlist$)
		
		comment ""
		comment "all infos"
		for %line% in $INST_Resultlist$ do sub_showEntry
		set $CompValue$ = getValue("default_language_id", $INST_Resultlist$)
		set $INST_Resultlist2$ = getOutStreamFromSection('DosInAnIcon_wmi_get_locale')
		set $ConstTest$ = Trim(takeFirstStringContaining($INST_Resultlist2$, $CompValue$))
		;if $MsVersion$ <= "5.0"
		if CompareDotSeparatedNumbers(GetMsVersionInfo,"<=","5.0")
			comment "not tested at win2k  because wmic is needed"
		else
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "getMSVersionMap"
		comment "get value by winst function"
		set $INST_Resultlist$ = getMSVersionMap
		set $CompValue$ = getValue("product_type_nr", $INST_Resultlist$)
		comment "get value by alternate way"
		set $INST_Resultlist2$ = getOutStreamFromSection('DosInAnIcon_get_wmi_producttype')
		set $ConstTest$ = Trim(takeString(2,$INST_Resultlist2$))
		;if $MsVersion$ <= "5.0"
		if CompareDotSeparatedNumbers(GetMsVersionInfo,"5.0") <= "0"
			comment "not tested at win2k  because wmic is needed"
		else
			comment "compare values"
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif
		set $ConstTest$ = GetMSVersionInfo
		set $CompValue$ = getValue("major_version", $INST_Resultlist$)+"."+getValue("minor_version", $INST_Resultlist$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		for %line% in $INST_Resultlist$ do sub_showEntry
		
		set $INST_Resultlist$ = getSlowInfoMap("not-a-product","off")
		comment ""
		comment "all infos"
		for %line% in $INST_Resultlist$ do sub_showEntry
	endif ; windows
	
	if $OS$ = "Linux"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "getLinuxVersionMap"
		comment "get value by winst function"
		set $INST_Resultlist$ = getLinuxVersionMap
		set $CompValue$ = getValue("Distributor ID", $INST_Resultlist$)
		comment "get value by alternate way"
		if $CompValue$ = 'Ubuntu'
			ShellInAnIcon_get_distribution
			if getLastExitcode = "0"
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif ; Ubuntu
	endif ; Linux
	
	if $OS$ = "macos"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "getMacVersionMap"
		comment "get value by winst function"
		set $INST_Resultlist$ = getMacosVersionMap
		set $CompValue$ = getValue("release", $INST_Resultlist$)
		comment "get value by alternate way"
		set $ConstTest$ = takestring(0,shellcall('sw_vers -productVersion'))
		if $CompValue$ = $ConstTest$
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = getMacosVersionInfo
		if $CompValue$ = $ConstTest$
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
	endif ; macos
	
	
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.2.1") >= "0"
		if not ("%installingProdName%" = "")
			comment "we are in opsi service mode"
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "getProductMap"
			comment "get value by winst function"
			set $INST_Resultlist$ = getProductMap
			set $string1$ = getValue("id", $INST_Resultlist$)
			set $string2$ = getValue("productVersion", $INST_Resultlist$)
			set $string3$ = getValue("packageVersion", $INST_Resultlist$)
			set $CompValue$ = $string1$+"_"+$string2$+"-"+$string3$
			comment "get value by alternate way"
			set $ConstTest$ = "%installingProdName%_%installingProdVersion%"
			comment "compare values"
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			for %line% in $INST_Resultlist$ do sub_showEntry
		endif
	endif
	
	if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.11.5.1")
		if ($OS$ = "windows_nt")
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "getHWBiosInfoMap"
			comment "get value by winst function"
			set $INST_Resultlist$ = getHWBiosInfoMap
			if count($INST_Resultlist$) int> "0"
				for %line% in $INST_Resultlist$ do sub_showEntry
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif
	endif
	
	
	;comment ""
	;comment "-------------------------------------"
	;comment "Testing: "
	;message "getSlowInfoCache"
	;set  $INST_Resultlist$ = getSlowInfoMap("FreePDF_XP","off")
	;comment ""
	;comment "all infos"
	;for %line% in $INST_Resultlist$ do sub_showEntry
	;set $CompValue$ = getValue("binaryname", $INST_Resultlist$)
	;set $ConstTest$ = 'C:\Programme\FreePDF_XP\fpassist.exe'
	
	;if ($ConstTest$ = $CompValue$)
	;	comment "passed"
	;else
	;	set $TestResult$ = "not o.k."
	;	LogWarning "failed"
	;endif
	
;	set  $INST_Resultlist$ = getSlowInfoMap("OpenSSL-0.9.8h-1_is1","off")
;	comment ""
;	comment "all infos"
;	for %line% in $INST_Resultlist$ do sub_showEntry
;	set $CompValue$ = getValue("binaryname", $INST_Resultlist$)
;	;set $ConstTest$ = '%ProgramFilesDir%\OpenSSL\bin\bftest.exe'
;	set $ConstTest$ = '%ProgramFilesDir%\OpenSSL\bin\ssltest.exe'
;
;	if ($ConstTest$ = $CompValue$)
;		comment "passed"
;	else
;		set $TestResult$ = "not o.k."
;		LogWarning "failed"
;	endif
	
	
	
	
	sub_compareResult
	set $infostest$ = $SubResult$
endif

if ($Flag_winst_string_list$ = "on") or ($MasterFlag$ = "on")
	Message "testing string list functions"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing string list functions"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	Set $ExpectedResult$ = "o.k."
	; start testing
	set $TestResult$ = "o.k."
	
	
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "createStringList"
	set $ConstTest$ = "c"
	set $list1$ = createStringList ('a','b', 'c', 'd')
	Set $CompValue$ = takeString(2, $list1$)
	
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $ConstTest$ = "c"
	set $list1$ = createStringList ('a','b', 'c', 'd')
	Set $CompValue$ = takeString(2, $list1$)
	
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $ConstTest$ = "c"
	set $list1$ = createStringList ('a','', 'c', 'd')
	Set $CompValue$ = takeString(2, $list1$)
	
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $ConstTest$ = ""
	set $list1$ = createStringList ('a','', 'c', 'd')
	Set $CompValue$ = takeString(1, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $ConstTest$ = "0"
	set $list1$ = createStringList ()
	Set $CompValue$ = count($list1$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "splitString"
	set $ConstTest$ = "server"
	set $list1$ = splitString ("\\server\share\directory", "\")
	Set $CompValue$ = takeString(2, $list1$)
	
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "splitStringOnWhiteSpace"
	set $ConstTest$ = "Remote"
	set $list1$ = splitStringOnWhiteSpace ("Status Lokal	Remote Netzwerk")
	Set $CompValue$ = takeString(2, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.0.16")
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "splitString Confidential"
		SetConfidential "\\secret1\secret2\secret3"
		set $ConstTest$ = "secret1"
		set $list1$ = splitString ("\\secret1\secret2\secret3", "\")
		Set $CompValue$ = takeString(2, $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		;setDebug_prog = true
		if not(isConfidential(""))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		if isConfidential("secret1")
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		if isConfidential("secret2")
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		if isConfidential("secret3")
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "splitStringOnWhiteSpace Confidential"
		SetConfidential "secret4  secret5	secret6  "
		set $ConstTest$ = "secret6"
		set $list1$ = splitStringOnWhiteSpace ("secret4  secret5	secret6  ")
		Set $CompValue$ = takeString(2, $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		if not(isConfidential(""))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		if isConfidential("secret4")
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		if isConfidential("secret5")
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		if isConfidential("secret6")
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		;setDebug_prog = false
	endif ; 4.12.0.16
	
	
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "loadTextFile"
	Files_copy_dummy
	set $ConstTest$ = "line2"
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeString(2, $list1$)
	
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.2.1") >= "0"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "loadUnicodeTextFile"
		set $ConstTest$ = "line2"
		set $list1$ = loadUnicodeTextFile($HomeTestFiles$+"\dummyUTF-8y.txt")
		Set $CompValue$ = takeString(2, $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		set $list1$ = loadTextFile($HomeTestFiles$+"\dummyUTF-8y.txt")
		Set $CompValue$ = takeString(2, $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		set $list1$ = loadUnicodeTextFile($HomeTestFiles$+"\dummyUTF-16.txt")
		Set $CompValue$ = takeString(2, $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		if not($OS$ = 'macos')
			set $list1$ = loadTextFile($HomeTestFiles$+"\dummyUTF-16.txt")
			Set $CompValue$ = takeString(2, $list1$)
			if ($ConstTest$ = $CompValue$)
				LogWarning "Unexected passed"
			else
				comment "passed"
			endif
		else
			logerror "macos todo"
		endif
	endif
	
	
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "composeString"
	set $ConstTest$ = "a | b | c | d | e"
	set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
	Set $CompValue$ = composeString ($list1$, " | ")
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "takeString"
	set $ConstTest$ = "element1"
	set $list1$ = createStringList ('element0', 'element1', 'element2')
	set $CompValue$ = takeString(1, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "positive index passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "positive index failed"
	endif
	
	set $ConstTest$ = "element2"
	set $list1$ = createStringList ('element0', 'element1', 'element2')
	set $CompValue$ = takeString(-1, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "negative index passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "negative index failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "takeFirstStringContaining"
	set $list1$ = createStringList ('element0', 'element1', 'element2')
	set $ConstTest$ = "element1"
	set $CompValue$ = takeFirstStringContaining($list1$,$ConstTest$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $ConstTest$ = "element2"
	set $CompValue$ = takeFirstStringContaining($list1$,'MENT2')
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	set $ConstTest$ = ""
	set $CompValue$ = takeFirstStringContaining($list1$,'other string')
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "getValue"
	set $ConstTest$ = "element1"
	set $list1$ = createStringList ('key0=element0', 'key1=element1', 'key2=element2')
	set $CompValue$ = getValue("key1",$list1$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "retrieveSection"
	set $ConstTest$ = "c:"
	set $list1$ = retrieveSection ('DosInAnIcon_dummy_receivesection')
	set $CompValue$ = takeString(1, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	;set $list1$ = getOutStreamFromSection ('DosInAnIcon_netstat')
	
	;getReturnListFromSection (Sectionname)
	;if $MsVersion$ <= "5.0"
	if CompareDotSeparatedNumbers(GetMsVersionInfo,"5.0") <= "0"
		comment "not tested at win2k  because wmic is needed"
	else
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "getOutStreamFromSection"
		set $ConstTest$ = "Microsoft Corporation"
		set $list1$ = getOutStreamFromSection ('DosInAnIcon_dummy_getOutStreamFromSection')
		set $CompValue$ = trim(takeString(2, $list1$))
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif
	
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "getSubList"
	comment "Now with numbers (no whitespace) ...."
	set $ConstTest$ = "c"
	set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
	set $list1$ = getSubList(1:3, $list1$)
	set $CompValue$ = takeString (1, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "getSubList(1:3, $list1$) passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "getSubList(1:3, $list1$) failed"
	endif
	set $ConstTest$ = "b"
	set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
	set $list1$ = getSubList(1:, $list1$)
	set $CompValue$ = takeString (0, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "getSubList(1:, $list1$) passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "getSubList(1:, $list1$) failed"
	endif
	set $ConstTest$ = "e"
	set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
	set $list1$ = getSubList(:, $list1$)
	set $CompValue$ = takeString (4, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "getSubList(:, $list1$) passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "getSubList(:, $list1$) failed"
	endif
	set $ConstTest$ = "d"
	set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
	set $list1$ = getSubList(1:-1, $list1$)
	set $CompValue$ = takeString (2, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "getSubList(1:-1, $list1$) passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "getSubList(1:-1, $list1$) failed"
	endif
	comment "Now with numbers (with whitespace) ...."
	set $ConstTest$ = "c"
	set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
	set $list1$ = getSubList(1 : 3, $list1$)
	set $CompValue$ = takeString (1, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "getSubList(1:3, $list1$) passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "getSubList(1:3, $list1$) failed"
	endif
	set $ConstTest$ = "b"
	set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
	set $list1$ = getSubList( 1 :, $list1$)
	set $CompValue$ = takeString (0, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "getSubList(1:, $list1$) passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "getSubList(1:, $list1$) failed"
	endif
	set $ConstTest$ = "e"
	set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
	set $list1$ = getSubList( : , $list1$)
	set $CompValue$ = takeString (4, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "getSubList(:, $list1$) passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "getSubList(:, $list1$) failed"
	endif
	set $ConstTest$ = "d"
	set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
	set $list1$ = getSubList( 1 : -1 , $list1$)
	set $CompValue$ = takeString (2, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "getSubList(1:-1, $list1$) passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "getSubList(1:-1, $list1$) failed"
	endif
	
	if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.0.34")
		comment "Now with string variables  (no whitespace)...."
		comment "-------------------------------------"
		
		set $tmp1$ = "1"
		set $tmp2$ = "3"
		set $ConstTest$ = "c"
		set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		set $list1$ = getSubList($tmp1$:$tmp2$, $list1$)
		set $CompValue$ = takeString (1, $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "getSubList(1:3, $list1$) passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "getSubList(1:3, $list1$) failed"
		endif
		set $ConstTest$ = "b"
		set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		set $list1$ = getSubList($tmp1$:, $list1$)
		set $CompValue$ = takeString (0, $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "getSubList(1:, $list1$) passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "getSubList(1:, $list1$) failed"
		endif
		set $tmp1$ = ""
		set $ConstTest$ = "e"
		set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		set $list1$ = getSubList($tmp1$:, $list1$)
		set $CompValue$ = takeString (4, $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "getSubList(:, $list1$) passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "getSubList(:, $list1$) failed"
		endif
		set $tmp1$ = "1"
		set $tmp2$ = "-1"
		set $ConstTest$ = "d"
		set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		set $list1$ = getSubList($tmp1$:$tmp2$, $list1$)
		set $CompValue$ = takeString (2, $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "getSubList(1:-1, $list1$) passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "getSubList(1:-1, $list1$) failed"
		endif
		
		comment "Now with string variables  (with whitespace)...."
		comment "-------------------------------------"
		
		set $tmp1$ = "1"
		set $tmp2$ = "3"
		set $ConstTest$ = "c"
		set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		set $list1$ = getSubList( $tmp1$ : $tmp2$ , $list1$)
		set $CompValue$ = takeString (1, $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "getSubList(1:3, $list1$) passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "getSubList(1:3, $list1$) failed"
		endif
		set $ConstTest$ = "b"
		set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		set $list1$ = getSubList( $tmp1$ : , $list1$)
		set $CompValue$ = takeString (0, $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "getSubList(1:, $list1$) passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "getSubList(1:, $list1$) failed"
		endif
		set $tmp1$ = ""
		set $ConstTest$ = "e"
		set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		set $list1$ = getSubList( $tmp1$ : , $list1$)
		set $CompValue$ = takeString (4, $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "getSubList(:, $list1$) passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "getSubList(:, $list1$) failed"
		endif
		set $tmp1$ = "1"
		set $tmp2$ = "-1"
		set $ConstTest$ = "d"
		set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		set $list1$ = getSubList( $tmp1$ : $tmp2$ , $list1$)
		set $CompValue$ = takeString (2, $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "getSubList(1:-1, $list1$) passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "getSubList(1:-1, $list1$) failed"
		endif
		
		comment "Now with string functions ...."
		comment "-------------------------------------"
		
		set $list2$ = createStringList("","-1","0","1","2","3","4","5","6",)
		set $ConstTest$ = "c"
		set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		set $list1$ = getSubList(takestring(3,$list2$):takestring(5,$list2$), $list1$)
		set $CompValue$ = takeString (1, $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "getSubList(1:3, $list1$) passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "getSubList(1:3, $list1$) failed"
		endif
		set $ConstTest$ = "b"
		set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		set $list1$ = getSubList(takestring(3,$list2$):takestring(0,$list2$), $list1$)
		set $CompValue$ = takeString (0, $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "getSubList(1:, $list1$) passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "getSubList(1:, $list1$) failed"
		endif
		set $tmp1$ = ""
		set $ConstTest$ = "e"
		set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		set $list1$ = getSubList(takestring(0,$list2$):takestring(0,$list2$), $list1$)
		set $CompValue$ = takeString (4, $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "getSubList(:, $list1$) passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "getSubList(:, $list1$) failed"
		endif
		set $tmp1$ = "1"
		set $tmp2$ = "-1"
		set $ConstTest$ = "d"
		set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		set $list1$ = getSubList(takestring(3,$list2$):takestring(1,$list2$), $list1$)
		set $CompValue$ = takeString (2, $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "getSubList(1:-1, $list1$) passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "getSubList(1:-1, $list1$) failed"
		endif
	endif ; 4.12.0.34
	
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "getlistContaining"
	set $ConstTest$ = "c"
	set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
	set $list1$ = getlistContaining($list1$, $ConstTest$)
	set $CompValue$ = takeString (0, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	set $ConstTest$ = "C"
	set $list1$ = createStringList ('a', 'b', 'c', 'c', 'd', 'e')
	set $list1$ = getlistContaining($list1$, $ConstTest$)
	set $CompValue$ = takeString (1, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	set $ConstTest$ = "0"
	set $list1$ = createStringList ('a', 'b', 'c', 'c', 'd', 'e')
	set $list1$ = getlistContaining($list1$, 'other string')
	set $CompValue$ = count($list1$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.0.16")
		message "getIndexFromListByContaining..string ..."
		set $tmp$ = "c"
		set $ConstTest$ = "2"
		set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		set $CompValue$ = getIndexFromListByContaining($list1$, $tmp$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $tmp$ = "C"
		set $ConstTest$ = "2"
		set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		set $CompValue$ = getIndexFromListByContaining($list1$, $tmp$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $tmp$ = "other string"
		set $ConstTest$ = ""
		set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		set $CompValue$ = getIndexFromListByContaining($list1$, $tmp$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		
		;message "getIndexFromListByContaining..list ..."
		;set $ConstTest$ = "2"
		;set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		;set $list2$ = createStringList ('u', 'v', 'w', 'c', 'z')
		;set $CompValue$ = getIndexFromListByContaining($list1$, $list2$)
		;if ($ConstTest$ = $CompValue$)
		;	comment "passed"
		;else
		;	set $TestResult$ = "not o.k."
		;	LogWarning "failed"
		;endif
		;set $ConstTest$ = "2"
		;set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		;set $list2$ = createStringList ('U', 'V', 'W', 'C', 'Z')
		;set $CompValue$ = getIndexFromListByContaining($list1$, $list2$)
		;if ($ConstTest$ = $CompValue$)
		;	comment "passed"
		;else
		;	set $TestResult$ = "not o.k."
		;	LogWarning "failed"
		;endif
		;set $tmp$ = "other string"
		;set $ConstTest$ = ""
		;set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		;set $list2$ = createStringList ('U', 'V', 'W', 'X', 'Z')
		;set $CompValue$ = getIndexFromListByContaining($list1$, $list2$)
		;if ($ConstTest$ = $CompValue$)
		;	comment "passed"
		;else
		;	set $TestResult$ = "not o.k."
		;	LogWarning "failed"
		;endif
		
		;	  * new function : getSubListByMatch(<search string>, <target list>) :stringlist
		;* new function : getSubListByMatch(<search list>, <target list>) :stringlist
		;* new function : getSubListByContaining(<search string>, <target list>) :stringlist
		;* new function : getSubListByContaining(<search list>, <target list>) :stringlist
		;* new function : getSubListByKey(<search string>, <target list>) :stringlist
		;* new function : getSubListByKey(<search list>, <target list>) :stringlist
		;* new function : getKeyList(<list>) :stringlist
		message "getSubListByMatch..string ..."
		set $tmp$ = "c"
		set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		set $list2$ = getSubListByMatch($tmp$,$list1$)
		set $ConstTest$ = "c"
		set $CompValue$ = takeString(0,$list2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $tmp$ = "C"
		set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		set $list2$ = getSubListByMatch($tmp$,$list1$)
		set $ConstTest$ = "C"
		set $CompValue$ = takeString(0,$list2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $tmp$ = "other string"
		set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		set $list2$ = getSubListByMatch($tmp$,$list1$)
		set $ConstTest$ = "0"
		set $CompValue$ = count($list2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		message "getSubListByMatch..list ..."
		set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		set $list2$ = createStringList ('u', 'v', 'w', 'c', 'z')
		set $list3$ = getSubListByMatch($list2$, $list1$)
		set $ConstTest$ = "c"
		set $CompValue$ = takeString(0,$list3$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		set $list2$ = createStringList ('U', 'V', 'W', 'C', 'Z')
		set $list3$ = getSubListByMatch($list2$, $list1$)
		set $ConstTest$ = "c"
		set $CompValue$ = takeString(0,$list3$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $tmp$ = "other string"
		set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		set $list2$ = createStringList ('U', 'V', 'W', 'X', 'Z')
		set $list3$ = getSubListByMatch($list2$, $list1$)
		set $ConstTest$ = "0"
		set $CompValue$ = count($list3$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		message "getSubListByContaining..string ..."
		set $tmp$ = "tt"
		set $list1$ = createStringList ('all ants', 'all bottles', 'all circles', 'all doors', 'all elephants')
		set $list2$ = getSubListByContaining($tmp$,$list1$)
		set $ConstTest$ = "all bottles"
		set $CompValue$ = takeString(0,$list2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $tmp$ = "TT"
		set $list1$ = createStringList ('all ants', 'all bottles', 'all circles', 'all doors', 'all elephants')
		set $list2$ = getSubListByContaining($tmp$,$list1$)
		set $ConstTest$ = "all bottles"
		set $CompValue$ = takeString(0,$list2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $tmp$ = "other string"
		set $list1$ = createStringList ('all ants', 'all bottles', 'all circles', 'all doors', 'all elephants')
		set $list2$ = getSubListByContaining($tmp$,$list1$)
		set $ConstTest$ = "0"
		set $CompValue$ = count($list2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		message "getSubListByContaining..list ..."
		set $list1$ = createStringList ('all ants', 'all bottles', 'all circles', 'all doors', 'all elephants')
		set $list2$ = createStringList ('not', 'really not', 'not at all', 'tt', 'never ever')
		set $list3$ = getSubListByContaining($list2$, $list1$)
		set $ConstTest$ = "all bottles"
		set $CompValue$ = takeString(0,$list3$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $list1$ = createStringList ('all ants', 'all bottles', 'all circles', 'all doors', 'all elephants')
		set $list2$ = createStringList ('NOT', 'Really Not', 'not at all', 'TT', 'never ever')
		set $list3$ = getSubListByContaining($list2$, $list1$)
		set $ConstTest$ = "all bottles"
		set $CompValue$ = takeString(0,$list3$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $list1$ = createStringList ('all ants', 'all bottles', 'all circles', 'all doors', 'all elephants')
		set $list2$ = createStringList ('NOT', 'Really Not', 'not at all', 'not a bottle', 'never ever')
		set $list3$ = getSubListByContaining($list2$, $list1$)
		set $ConstTest$ = "0"
		set $CompValue$ = count($list3$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $list1$ = createStringList ('all ants', 'all bottles', 'all circles', 'all doors', 'all elephants')
		set $list2$ = createStringList ('NOT', 'Really Not', 'not at all', 'ants', 'never ever')
		set $list3$ = getSubListByContaining($list2$, $list1$)
		set $ConstTest$ = "2"
		set $CompValue$ = count($list3$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		message "getSubListByKey..string ..."
		set $tmp$ = "all"
		set $list1$ = createStringList ('all=ants', 'my=bottles', 'round=circles', 'open=doors', 'big=elephants')
		set $list2$ = getSubListByKey($tmp$,$list1$)
		set $ConstTest$ = "all=ants"
		set $CompValue$ = takeString(0,$list2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $tmp$ = "ALL"
		set $list1$ = createStringList ('all=ants', 'my=bottles', 'round=circles', 'open=doors', 'big=elephants')
		set $list2$ = getSubListByKey($tmp$,$list1$)
		set $ConstTest$ = "all=ants"
		set $CompValue$ = takeString(0,$list2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $tmp$ = "other"
		set $list1$ = createStringList ('all=ants', 'my=bottles', 'round=circles', 'open=doors', 'big=elephants')
		set $list2$ = getSubListByKey($tmp$,$list1$)
		set $ConstTest$ = "0"
		set $CompValue$ = count($list2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		message "getSubListByKey..list ..."
		set $list1$ = createStringList ('all=ants', 'my=bottles', 'round=circles', 'open=doors', 'big=elephants')
		set $list2$ = createStringList ('all', 'really not', 'not at all', 'tt', 'never ever')
		set $list3$ = getSubListByKey($list2$, $list1$)
		set $ConstTest$ = "all=ants"
		set $CompValue$ = takeString(0,$list3$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $list1$ = createStringList ('all=ants', 'my=bottles', 'round=circles', 'open=doors', 'big=elephants')
		set $list2$ = createStringList ('ALL', 'really not', 'not at all', 'tt', 'never ever')
		set $list3$ = getSubListByKey($list2$, $list1$)
		set $ConstTest$ = "all=ants"
		set $CompValue$ = takeString(0,$list3$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $list1$ = createStringList ('all=ants', 'my=bottles', 'round=circles', 'open=doors', 'big=elephants')
		set $list2$ = createStringList ('ANTS', 'really not', 'not at all', 'tt', 'never ever')
		set $list3$ = getSubListByKey($list2$, $list1$)
		set $ConstTest$ = "0"
		set $CompValue$ = count($list3$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $list1$ = createStringList ('all=ants', 'my=bottles', 'round=circles', 'open=doors', 'big=elephants')
		set $list2$ = createStringList ('all', 'really not', 'not at all', 'my', 'never ever')
		set $list3$ = getSubListByKey($list2$, $list1$)
		set $ConstTest$ = "2"
		set $CompValue$ = count($list3$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		message "getKeyList..list ..."
		set $list1$ = createStringList ('all=ants', 'my=bottles', 'round=circles', 'open=doors', 'big=elephants')
		set $list2$ = createStringList ('all', 'my', 'round', 'open', 'big')
		set $list3$ = getKeyList($list1$)
		set $ConstTest$ = "all"
		set $CompValue$ = takeString(0,$list3$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = count($list2$)
		set $CompValue$ = count($list3$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $list1$ = createStringList ('ALL=ants', 'my=bottles', 'round=circles', 'open=doors', 'big=elephants')
		set $list2$ = createStringList ('ALL', 'My', 'rouND', 'OPEN', 'big')
		set $list3$ = getKeyList($list1$)
		set $ConstTest$ = "ALL"
		set $CompValue$ = takeString(0,$list3$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = count($list2$)
		set $CompValue$ = count($list3$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $list1$ = createStringList ('all=ants', 'my=bottles', 'round=circles', 'open=doors', 'big=elephants')
		set $list2$ = createStringList ('all', 'my', 'round', 'open', 'big')
		set $list3$ = getKeyList($list1$)
		set $ConstTest$ = count($list1$)
		set $CompValue$ = count($list3$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = count($list2$)
		set $CompValue$ = count($list3$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif ; 4.12.0.16
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "reverse"
	set $ConstTest$ = "e"
	set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
	set $list1$ = reverse($list1$)
	set $CompValue$ = takeString (0, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "addtolist"
	set $ConstTest$ = "f"
	set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
	set $list1$ = addtolist($list1$,'f')
	set $CompValue$ = takeString (5, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "addlisttolist"
	set $ConstTest$ = "g"
	set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
	set $list2$ = createStringList ('f', 'g')
	set $list1$ = addlisttolist($list1$,$list2$)
	set $CompValue$ = takeString (6, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	if $OS$ = "Windows_NT"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "getSwauditInfoList"
		set $ConstTest$ = "OpenSSL-0.9.8h-1_is1"
		set $list1$ = getSwauditInfoList ("HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\OpenSSL-0.9.8h-1_is1", "softwareHashlist", "x86")
		set $CompValue$ = getvalue ("windowsSoftwareId", $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "getSwauditInfoList"
		set $ConstTest$ = "AddressBook"
		;set $list1$ = getSwauditInfoList ("HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\AutoHotkey", "softwareHashlist", "x86")
		set $list1$ = getSwauditInfoList ("HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\AddressBook", "softwareHashlist", "x86")
		;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\AutoHotkey
		set $CompValue$ = getvalue ("windowsSoftwareId", $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif ; windows
	
	; Iterating through String Lists
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Iteration 1"
	set $ConstTest$ = "abcde"
	set $CompValue$ = ""
	set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
	for %s% in $list1$ do set $CompValue$ = $CompValue$ + '%s%'
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Iteration 2"
	set $ConstTest$ = "abcde"
	set $CompValue$ = ""
	set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
	for %s% in $list1$ do sub_iteration_test
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Iteration 3"
	Files_del_iteration_txt
	set $ConstTest$ = "abcde"
	set $CompValue$ = ""
	set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
	if $OS$ = "Windows_NT"
		for %s% in $list1$ do DosInAnIcon_iteration_test
	else
		for %s% in $list1$ do ShellInAnIcon_Linux_iteration_test
	endif
	set $list1$ = loadTextFile ($HomeTestFiles$+"\iteration.txt")
	for %s% in $list1$ do set $CompValue$ = $CompValue$ + '%s%'
	Files_del_iteration_txt
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Iteration 4"
	set $ConstTest$ = "abcde"
	set $CompValue$ = ""
	set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
	for %s% in $list1$ do sub_subsubiteration_test1
	if not ($ConstTest$ = $CompValue$)
		comment "passed"
		comment "the use of the temporary loop constant in a subsub section does not work"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.1.2") >= "0"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "getProcessList"
		switch $OS$
			case "Windows_nt"
			set $ConstTest$ = "helperchild.exe"
			killtask $ConstTest$
			Winbatch_startprocess_with_child_nowait
			set $list1$ = getProcessList
			set $CompValue$ = takeFirstStringContaining($list1$,$ConstTest$)
			set $CompValue$ = takeString(0,splitString($CompValue$,";"))
			killtask $ConstTest$
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			endcase
			case "Linux"
			set $CompValue$ = ""
			set $list1$ = getProcessList
				set $ConstTest$ = "opsi-script-gui"
			comment " shortcommand gives only the first 15 chars)"
			set $ConstTest$ = strPart($ConstTest$,"1","15")
			set $list2$ = getListContaining($list1$,$ConstTest$)
			if count($list2$) = "0"
				set $ConstTest$ = "opsi-script"
				set $list2$ = getListContaining($list1$,$ConstTest$)
			endif
			for %aktprocess% in $list2$ do sub_getprocess_by_shortcommand
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			endcase
			case "macos"
				set $CompValue$ = ""
				set $list1$ = getProcessList
				set $ConstTest$ = "opsi-script-gui"
				set $list2$ = getListContaining($list1$,$ConstTest$)
				if count($list2$) = "0"
					set $ConstTest$ = "opsi-script"
					set $list2$ = getListContaining($list1$,$ConstTest$)
				endif
				for %aktprocess% in $list2$ do sub_getprocess_by_command
				if ($ConstTest$ = $CompValue$)
					comment "passed"
	else
					set $TestResult$ = "not o.k."
					LogWarning "failed"
				endif
			endcase
		endswitch
	else
		comment "getProcessList not tested, minimum winst needed: 4.11.1.2"
	endif
	
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.6.1") >= "0"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "processIsRunning"
		if $OS$ = "Windows_NT"
			set $ConstTest$ = "helperchild.exe"
			set $tmp$ = processCall('"%ScriptPath%\'+$opsi_script_test_helper_bin$+'" --fork-and-stop=2')
			set $list1$ = getProcessList
			if processIsRunning($ConstTest$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			killtask $ConstTest$
			
			if not(processIsRunning("not-expected-process.exe"))
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		else ; windows / linux
			set $ConstTest$ = "opsi-script"
			if processIsRunning("opsi-script") or processIsRunning("opsi-script-nogui")
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif ; windows / linux
	else
		comment "processIsRunning not tested, minimum winst needed: 4.11.6.1"
	endif
	
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.3.2") >= "0"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "getProfilesDirList"
		set $list1$ = getProfilesDirList
		if $OS$ = "Windows_NT"
			set $list2$ = getRegistryKeyListSysnative('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList')
			set $list2$ = getListContaining($list2$,'S-1-5-')
			set $list2$ = getListContaining($list2$,'-500')
			;if ($MsVersion$ = "6.2")
			;	comment "we are on win8"
			;	set $list2$ = getListContaining($list2$,'-1001')
			;else
			;	set $list2$ = getListContaining($list2$,'-500')
			;endif
			set $list2$ = reverse ($list2$)
			set $ConstTest$ = takeString(0,$list2$)
			set $ConstTest$ = SidToName($ConstTest$)
			set $CompValue$ = takeFirstStringContaining($list1$,$ConstTest$)
			if not($CompValue$ = '')
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			if FileExists($CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif ; windows
	else
		comment "getProfilesDirList not tested, minimum winst needed: 4.11.3.2"
	endif
	
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.4.4") >= "0"
		set $ConstTest$ = "0"
		set $list1$ = createStringList ('a', 'b', 'c', 'd', 'e')
		set $list1$ = emptylist ($list1$)
		set $CompValue$ = count($list1$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif ; 4.11.4.4
	
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.5.1") >= "0"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "for to loop"
		set $ConstTest$ = "12345"
		set $CompValue$ = ""
		for %s% = "1" to "5" do sub_iteration_test
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "4567891011"
		set $CompValue$ = ""
		set $string1$ = "4"
		set $string2$ = "11"
		for %s% = $string1$ to $string2$ do sub_iteration_test
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "removeFromListByContaining"
		set $string1$ = "%Scriptpath%\test-files\encoding\10lines-cp1252.txt"
		set $list1$ = loadTextFileWithEncoding($string1$, "cp1252")
		comment "search with string"
		comment "search with string constant"
		set $ConstTest$ = "10"
		set $list2$ = removeFromListByContaining("line 5", $list1$)
		set $CompValue$ = count($list2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		set $ConstTest$ = "10"
		set $list2$ = removeFromListByContaining("LINE 5", $list1$)
		comment "the match is case insensitive"
		set $CompValue$ = count($list2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		
		set $ConstTest$ = "1"
		set $list2$ = removeFromListByContaining("line", $list1$)
		set $CompValue$ = count($list2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		set $ConstTest$ = "9"
		comment "searchstr 1 will found in 'line 1' and 'line 10'"
		set $list2$ = removeFromListByContaining("1", $list1$)
		set $CompValue$ = count($list2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment "search with string function"
		set $ConstTest$ = "10"
		set $list2$ = removeFromListByContaining(trim(" line 5 "), $list1$)
		set $CompValue$ = count($list2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment "search with string variable"
		set $string1$ = "line 5"
		set $ConstTest$ = "10"
		set $list2$ = removeFromListByContaining($string1$, $list1$)
		set $CompValue$ = count($list2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment "search with string list"
		comment "search with string list variable"
		set $list3$ = createStringList ('1', '2', '3', '4', '5')
		comment "searchstr 1 will found in 'line 1' and 'line 10'"
		set $ConstTest$ = "5"
		set $list2$ = removeFromListByContaining($list3$, $list1$)
		set $CompValue$ = count($list2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment "search with string list variable"
		comment "searchstr 1 will found in 'line 1' and 'line 10'"
		set $ConstTest$ = "5"
		set $list2$ = removeFromListByContaining(createStringList ('1', '2', '3', '4', '5'), $list1$)
		set $CompValue$ = count($list2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
	endif ; 4.11.5
	
	
	; Tests for WinstVersion >= 4.12.3
	if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.3")
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "listFiles"
		Files_copy_for_filelist ;initialize test directory
		
		comment "Search all  files in $HomeTestFiles$"
		if $OS$ = "Windows_NT"
			set $list2$ = getOutStreamFromSection('DosInAnIcon_ListFiles_Test1')
		else
			set $list2$ = getOutStreamFromSection('ShellInAnIcon_ListFiles_Test1')
		endif
		;set $list2$ = GetListContaining($list2$, ".")
		set $list3$ = listFiles($HomeTestFiles$,"*.*","False")
		if (count($list2$) = count($list3$))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment "No search pattern given, search all files in $HomeTestFiles$"
		if $OS$ = "Windows_NT"
			set $list2$ = getOutStreamFromSection('DosInAnIcon_ListFiles_Test1')
		else
			set $list2$ = getOutStreamFromSection('ShellInAnIcon_ListFiles_Test1')
		endif
		set $list3$ = listFiles($HomeTestFiles$,"","False")
		if (count($list2$) = count($list3$))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment "Search all exe files in $HomeTestFiles$ no subdirectories"
		if $OS$ = "Windows_NT"
			set $list2$ = getOutStreamFromSection('DosInAnIcon_ListFiles_Test1')
		else
			set $list2$ = getOutStreamFromSection('ShellInAnIcon_ListFiles_Test1')
		endif
		set $list2$ = GetListContaining($list2$, ".exe")
		set $list3$ = listFiles($HomeTestFiles$,"*.exe","false")
		if (count($list2$) = count($list3$))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment "Search all exe files in $HomeTestFiles$ and subdirectories"
		if $OS$ = "Windows_NT"
			set $list2$ = getOutStreamFromSection('DosInAnIcon_ListFiles_Test3')
		else
			set $list2$ = getOutStreamFromSection('ShellInAnIcon_ListFiles_Test3')
		endif
		;set $list2$ = GetListContaining($list2$, ".exe")
		set $list3$ = listFiles($HomeTestFiles$,"*.exe","True")
		if (count($list2$) = count($list3$))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment "Search all txt files in $HomeTestFiles$"
		if $OS$ = "Windows_NT"
			set $list2$ = getOutStreamFromSection('DosInAnIcon_ListFiles_Test1')
		else
			set $list2$ = getOutStreamFromSection('ShellInAnIcon_ListFiles_Test1')
		endif
		set $list2$ = GetListContaining($list2$, ".txt")
		set $list3$ = listFiles($HomeTestFiles$,"*.txt","False")
		if (count($list2$) = count($list3$))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment "Search file encode-cp866.opsiscript in $HomeTestFiles$"
		if $OS$ = "Windows_NT"
			set $list2$ = getOutStreamFromSection('DosInAnIcon_ListFiles_Test5')
		else
			set $list2$ = getOutStreamFromSection('ShellInAnIcon_ListFiles_Test5')
		endif ; windows
		;set $list2$ = GetListContaining($list2$, "encode-cp866.opsiscript")
		set $list3$ = listFiles($HomeTestFiles$,"encode-cp866.opsiscript","False")
		if (count($list2$) = count($list3$))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		if $OS$ = "Windows_NT"
			comment "Search file in %System% with redirection for 32bit programs to SysWOW64"
			set $list2$ = getOutStreamFromSection('DosInAnIcon_ListFiles_Test6')
			set $list3$ = listFiles("%System%","*.*","False")
			if (count($list2$) = count($list3$))
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			
			comment "Search file in %System% with redirection disabled"
			set $list2$ = getOutStreamFromSection('DosInAnIcon_ListFiles_Test6 winst /64bit')
			; set $list2$ = GetListContaining($list2$, "encode-cp866.opsiscript")
			set $list3$ = listFiles("%System%","*.*","False","64bit")
			if (count($list2$) = count($list3$))
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif ; windows
	endif ;4.12.3
	
	if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.3.9")
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "setValueByKey (with default keyvalue separator: =)"
		comment ""
		set $INST_Resultlist$ = createStringList("a=1","b=2","c=2")
		set $INST_Resultlist$ = setValueByKey("mykey","myvalue",$INST_Resultlist$)
		set $ConstTest$ = "myvalue"
		set $CompValue$ = getValue("mykey", $INST_Resultlist$)
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $INST_Resultlist$ = createStringList("a = 1","b = 2","c = 2")
		set $INST_Resultlist$ = setValueByKey("b","myvalue",$INST_Resultlist$)
		set $ConstTest$ = "myvalue"
		set $CompValue$ = getValue("b", $INST_Resultlist$)
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "setValueByKey (with explicit set keyvalue separator)"
		comment ""
		set $INST_Resultlist$ = createStringList("a:1","b:2","c:2")
		set $INST_Resultlist$ = setValueByKey("mykey","myvalue",$INST_Resultlist$,":")
		set $ConstTest$ = "myvalue"
		set $CompValue$ = getValueBySeparator("mykey", ":", $INST_Resultlist$)
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		set $INST_Resultlist$ = createStringList("a:1","b:2","c:2")
		set $INST_Resultlist$ = setValueByKey("b","myvalue",$INST_Resultlist$,":")
		set $ConstTest$ = "myvalue"
		set $CompValue$ = getValueBySeparator("b", ":", $INST_Resultlist$)
		comment "compare values"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
	endif ; 4.12.3.9
	
	if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.4.5")
		
		comment "Testing: "
		message "areStringlistsEqual"
		
		
		Set $testlist0$ = CreateStringList("key1=value1", "key2 = value2", "key3 =value3", "key4= value4")
		
		Set $testlist1$ = CreateStringList("key1=value1", "key2 = value2", "key3 =value3", "key4= value4", " key5 = value5 ")
		Set $testlist2$ = CreateStringList("KEY1 = value1", "key2= Value2", "key3 =value3", " Key4=value4 ", " key5=VALUE5 ")
		
		Set $testlist3$ = CreateStringList("key1=value1", "key2 = value2", "key3 =value3", "key4= value4", " key5 = value5 ")
		
		Set $testlist4$ = CreateStringList("string1", "STRING2", "String3", "StRiNg4", " string5 ")
		Set $testlist5$ = CreateStringList("string1", "STRING2", "String3", "StRiNg4", " string5 ")
		Set $testlist6$ = CreateStringList("STRING1", "STRING2", "STRING3", "STRING4", " STRING5 ")
		Set $testlist7$ = CreateStringList("STRING1", "STRING2", "STRING3", "STRING4", "STRING5")
		
		DefFunc myAreStringlistEqualTester($list1$ : stringlist, $list2$ : stringlist, $flag$ : string, $ConstTest$ : string) : void
			DefVar $CompValue$
			set $CompValue$ = booltostring(areListsEqual($list1$,$list2$,$flag$))
			if $CompValue$ = $ConstTest$
				comment "Testing areStringlistsEqual succeeded"
			else
				set $TestResult$ = "not o.k."
				LogWarning "Testing areStringlistsEqual failed"
			endif
		endfunc
		
		myAreStringlistEqualTester($testlist0$,$testlist1$,"FLAG_AUTOMODE","false")
		
		myAreStringlistEqualTester($testlist1$,$testlist2$,"FLAG_AUTOMODE","true")
		myAreStringlistEqualTester($testlist1$,$testlist2$,"FLAG_AUTO_CS","false")
		myAreStringlistEqualTester($testlist1$,$testlist3$,"FLAG_STRING_CS","true")
		
		myAreStringlistEqualTester($testlist4$,$testlist5$,"FLAG_AUTOMODE","true")
		myAreStringlistEqualTester($testlist5$,$testlist6$,"FLAG_AUTO_CS","false")
		myAreStringlistEqualTester($testlist4$,$testlist6$,"FLAG_STRING_CS","false")
		myAreStringlistEqualTester($testlist6$,$testlist7$,"FLAG_AUTO_CS","false")
		
	endif ; 4.12.4.5
	
	Files_empty_folder ;remove test files
	;End of Testing listFiles
	
	sub_compareResult
	set $winst_string_list$ = $SubResult$
endif

if ($Flag_winst_controls$ = "on") or ($MasterFlag$ = "on")
	Message "testing control functions"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing control functions"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	Set $ExpectedResult$ = "o.k."
	; start testing
	set $TestResult$ = "o.k."
	
	if $OS$ = "Windows_NT"
		;if $MsVersion$ <= "5.0"
		if CompareDotSeparatedNumbers(GetMsVersionInfo,"5.0") <= "0"
			comment "not tested at win2k  because tasklist is needed"
		else
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "Killtask"
			WinBatch_prepare_killtask /LetThemGo
			Set $ConstTest$ = ""
			if CompareDotSeparatedNumbers("%WinstVersion%","4.11.1.2") >= "0"
				set $list1$ = getProcessList
			endif
			set $list1$ = getOutStreamFromSection("DosInAnIcon_getTask")
			set $tmp$ = takeFirstStringContaining($list1$,"notepad.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			if $CompValue$ = "notepad.exe"
				comment "this should kill the notepad ..."
				Killtask "NoTePaD.exe"
				comment "this should not found any notepad.exe ..."
				Killtask "notepad.exe"
			endif
			sleepseconds 1
			set $list1$ = getOutStreamFromSection("DosInAnIcon_getTask")
			set $list1$ = getListContaining($list1$,"Console")
			set $tmp$ = takeFirstStringContaining($list1$,"notepad.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif ; windows
		
		if not ("%opsiserviceURL%" = "")
			if CompareDotSeparatedNumbers("%WinstVersion%","4.11.1.1") >= "0"
				comment ""
				comment "-------------------------------------"
				comment "Testing: "
				message "runningAsAdmin"
				comment " we assume that we running in opsi service mode as admin"
				if runningAsAdmin
					comment "passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "failed"
				endif
			else
				comment "runningAsAdmin not tested, minimum winst needed: 4.11.1.1"
			endif
		endif
		
		;if $MsVersion$ <= "5.0"
		if CompareDotSeparatedNumbers(GetMsVersionInfo,"5.0") <= "0"
			comment "not tested at win2k  because tasklist is needed"
		else
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "ShowMessageFile"
			Killtask "autoit3.exe"
			Execwith_autoit_close_showmessage "%SCRIPTPATH%\autoit3.exe" WINST /letThemGo
			ShowMessageFile "%SCRIPTPATH%\test-files\testmessage.txt"
			sleepseconds 2
			set $list1$ = getOutStreamFromSection("DosInAnIcon_getTask_autoit3")
			set $tmp$ = takeFirstStringContaining($list1$,"autoit3.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			Set $ConstTest$ = ""
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			Killtask "autoit3.exe"
			includelog "%opsiLogDir%\au3.log" "200"
			
		endif
		
	endif ; windows
	
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.2.6") >= "0"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "ChangeDirectory"
		comment "backup actual working directory"
		if $OS$ = "Windows_NT"
			set $SectionName$ = "DosInAnIcon_dir"
		else
			set $SectionName$ = "ShellInAnIcon_dir"
		endif
		set $list1$ = getOutstreamfromSection($SectionName$)
		set $tmp$ = takeString(0,$list1$)
		
		Set $ConstTest$ = "%ScriptPath%"
		ChangeDirectory $ConstTest$
		set $list1$ = getOutstreamfromSection($SectionName$)
		if not ("" = takeFirstStringContaining($list1$,$ConstTest$))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment "restore actual working directory"
		Set $ConstTest$ = $tmp$
		ChangeDirectory $ConstTest$
		set $list1$ = getOutstreamfromSection($SectionName$)
		if not ("" = takeFirstStringContaining($list1$,$ConstTest$))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif
	
	
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "ShowBitMap"
	ShowBitmap "%ScriptPath%\test-files\images\opsi.png" "png"
	sleepseconds 1
	ShowBitmap "" "no picture"
	sleepseconds 1
	ShowBitmap "%ScriptPath%\test-files\images\opsi.png" "png: very long name with a lot of chars"
	sleepseconds 1
	ShowBitmap "" "no picture"
	sleepseconds 1
	ShowBitmap "%ScriptPath%\test-files\images\opsi.jpg" "jpeg"
	sleepseconds 1
	if "1" =CompareDotSeparatedNumbers("%WinstVersion%","4.11.0.0")
		ShowBitmap "%ScriptPath%\test-files\images\tortoisesvn_test.png" $ProductId$
		sleepseconds 1
	endif
	ShowBitmap "%ScriptPath%\test-files\images\blitzrechnen.png" 'blitzrechnen ohne /3'
	sleepseconds 1
	if $OS$ = "Windows_NT"
		ShowBitmap /3 "%ScriptPath%\test-files\images\blitzrechnen.png" 'blitzrechnen mit /3'
		sleepseconds 1
	endif
	ShowBitmap "" "no picture"
	sleepseconds 1
	ShowBitmap "%ScriptPath%\test-files\images\acrobat_logo.png" "0"
	sleepseconds 1
	ShowBitmap "" "01"
	sleepseconds 1
	ShowBitmap "%ScriptPath%\test-files\images\acrobat_logo1.png" "012"
	sleepseconds 1
	ShowBitmap "" "0123"
	sleepseconds 1
	ShowBitmap "%ScriptPath%\test-files\images\acrobat_logo2.png" "01234"
	sleepseconds 1
	ShowBitmap "" "012345"
	sleepseconds 1
	ShowBitmap "" "0123456"
	sleepseconds 1
	ShowBitmap "" "01234567"
	sleepseconds 1
	ShowBitmap "" "0123456789"
	sleepseconds 1
	ShowBitmap "" "012345678901"
	sleepseconds 1
	ShowBitmap "" "0123456789012"
	sleepseconds 1
	ShowBitmap "" "01234567890123"
	sleepseconds 1
	ShowBitmap "" "012345678901234"
	sleepseconds 1
	ShowBitmap "" "0123456789012345"
	sleepseconds 1
	ShowBitmap "" "01234567890123456"
	sleepseconds 1
	ShowBitmap "" "012345678901234567"
	sleepseconds 1
	ShowBitmap "" "0123456789012345678"
	sleepseconds 1
	ShowBitmap "" "01234567890123456789"
	sleepseconds 1
	ShowBitmap "%ScriptPath%\opsi.png" $ProductId$
	sleepseconds 1
	IconizeWinst
	sleepseconds 1
	RestoreWinst
	sleepseconds 1
	NormalizeWinst
	sleepseconds 1
	RestoreWinst
	sleepseconds 1
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.5") >= "0"
		MaximizeWinst
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: SetSkinDirectory"
	message "SetSkinDirectory"
	SetSkinDirectory "%ScriptPath%\testskin"
	sleepseconds 1
	SetSkinDirectory ""
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "sleepSeconds / markTime / diffTime - takes 2 seconds"
	if $OS$ = "Windows_NT"
		markTime
		set $list1$ = getOutStreamFromSection("DosInAnIcon_time")
		set $tmp$ = takeString(0, $list1$)
		Set $ConstTest$ = takeString(0, splitString ($tmp$, ","))
		comment "sleepSeconds 2"
		marktime
		sleepSeconds 2
		difftime
		set $list1$ = getOutStreamFromSection("DosInAnIcon_time")
		set $tmp$ = takeString(0, $list1$)
		set $CompValue$ = takeString(0, splitString ($tmp$, ","))
		if $ConstTest$ < $CompValue$
			comment "sleepSeconds assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "sleepSeconds failed"
		endif
		diffTime
	else ; windows
		markTime
		set $list1$ = getOutStreamFromSection("ShellInAnIcon_time")
		set $ConstTest$ = takeString(0, $list1$)
		comment "sleepSeconds 2"
		marktime
		sleepSeconds 2
		difftime
		set $list1$ = getOutStreamFromSection("ShellInAnIcon_time")
		set $CompValue$ = takeString(0, $list1$)
		if $ConstTest$ < $CompValue$
			comment "sleepSeconds assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "sleepSeconds failed"
		endif
		diffTime
	endif ; windows
	
	; Conditional Statements (if Statements)
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "if / else"
	if ("1" = "1")
		comment "if passed"
	endif
	if ("1" = "2")
		LogWarning "else failed"
		set $TestResult$ = "not o.k."
	else
		comment "else passed"
	endif
	
	;  Boolean Expressions
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "FileExists"
	Files_empty_folder
	if $OS$ = "Windows_NT"
		DosInAnIcon_prepare_fileExists
	else
		ShellInAnIcon_prepare_fileExists
	endif
	if FileExists($HomeTestFiles$+"\dummy.txt")
		if not(FileExists ($HomeTestFiles$+"\dummy2.txt"))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	if $OS$ = "Windows_NT"
		Set $list$ = getOutStreamFromSection ('dosbatch_profiledir')
		comment "loop over the result"
		for $x$ in $list$ do sub_file_exists
	endif ; windows
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "LineExistsIn"
	if (LineExistsIn("dummy", $HomeTestFiles$+"\dummy.txt"))
		if not (LineExistsIn("dummy2", $HomeTestFiles$+"\dummy.txt"))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "LineBeginning_ExistsIn"
	if (LineBeginning_ExistsIn("dum", $HomeTestFiles$+"\dummy.txt"))
		if not (LineBeginning_ExistsIn("d2", $HomeTestFiles$+"\dummy.txt"))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	Files_empty_folder
	
	;if $MsVersion$ <= "5.0"
	if CompareDotSeparatedNumbers(GetMsVersionInfo,"5.0") <= "0"
		comment "not tested at win2k  because wmic is needed"
	else
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "HasMinimumSpace"
		set $list1$ = getOutStreamFromSection("DosInAnIcon_getFreeSpace")
		set $tmp$ = takeString(2, $list1$)
		if (HasMinimumSpace ("%Systemdrive%", "100"))
			if ($tmp$ > "100")
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "markErrorNumber / errorsOccuredSinceMark"
	set $ConstTest$ = "error"
	markErrorNumber
	LogError "create a error for testing error counter"
	if errorsOccuredSinceMark > 0
		set $CompValue$ = "error"
	else
		set $CompValue$ = "no error"
	endif
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		LogWarning "failed"
		set $TestResult$ = "not o.k."
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "markErrorNumber / errorsOccuredSinceMark"
	set $ConstTest$ = "no error"
	markErrorNumber
	LogWarning "create a warning for testing error counter"
	if errorsOccuredSinceMark > 0
		set $CompValue$ = "error"
	else
		set $CompValue$ = "no error"
	endif
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		LogWarning "failed"
		set $TestResult$ = "not o.k."
	endif
	
	
	if $OS$ = "Windows_NT"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "tracemode"
		set $opsi_message_title$ = "opsi-script Message"
		if CompareDotSeparatedNumbers("%winstversion%","<","4.11.6.11")
			comment "backward compatibility"
			set $opsi_message_title$ = "opsi-winst Message"
		endif
		execwith_autoit_close_trace_window  "%SCRIPTPATH%\autoit3.exe" WINST /letThemGo
		comment "not in trace window"
		Tracemode=on
		comment "in trace window"
		Tracemode=off
		comment "not in trace window"
		Tracemode=on
		comment "in trace window"
		Tracemode=off
		comment "not in trace window"
		if CompareDotSeparatedNumbers("%winstversion%","4.10.8.9") = "1"
			Tracemode=on
			comment "should be turned off by autoit"
		endif
		killtask "autoit3.exe"
	endif ; windows
	
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.2.1") >= "0"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "includelog"
		if not($OS$ = 'macos')
			set $string1$ = "%Scriptpath%\test-files\encoding\10lines-cp1252.txt"
			set $string2$ = "5"
			;includelog "%Scriptpath%\test-files\encoding\10lines.txt" "5"
			includelog $string1$ $string2$
			if CompareDotSeparatedNumbers("%WinstVersion%","4.11.3.2") >= "0"
				set $string2$ = "-5"
				includelog $string1$ $string2$
				includelog $string1$ $string2$ "auto"
			endif
			set $string1$ = "%Scriptpath%\test-files\encoding\10lines-cp1252.txt"
			set $string2$ = "5"
			;includelog "%Scriptpath%\test-files\encoding\10lines.txt" "5"
			includelog $string1$ $string2$
			if CompareDotSeparatedNumbers("%WinstVersion%","4.11.3.2") >= "0"
				set $string2$ = "-5"
				includelog $string1$ $string2$
				includelog $string1$ $string2$ "auto"
			endif
			if CompareDotSeparatedNumbers("%WinstVersion%","4.11.4.1") >= "0"
				set $string1$ = "%Scriptpath%\test-files\encoding\10lines-utf16.txt"
				set $string2$ = "5"
				includelog $string1$ $string2$
				includelog $string1$ $string2$ "auto"
				includelog $string1$ $string2$ "UCS-2BE"
				set $string1$ = "%Scriptpath%\test-files\encoding\10lines-utf32.txt"
				set $string2$ = "5"
				includelog $string1$ $string2$
				includelog $string1$ $string2$ "auto"
				includelog $string1$ $string2$ "ucs2be"
				includelog $string1$ $string2$ "utf32"
			endif
		else
			logerror "macos todo"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "GetScriptMode"
		
		set $CompValue$ = GetScriptMode
		set $ConstTest$ = "Machine"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			LogWarning "failed"
			set $TestResult$ = "not o.k."
		endif
	endif
	
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.3.2") >= "0"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "syntax error handling"
		markErrorNumber
		FatalOnSyntaxError = False
		ScriptErrorMessages = False
		This-is-a-syntax-error
		FatalOnSyntaxError = True
		;ScriptErrorMessages = True
		if errorsOccuredSinceMark > 0
			comment "passed"
		else
			LogWarning "failed"
			set $TestResult$ = "not o.k."
		endif
	endif
	
	if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.11.5")
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "Switch Case EndCase DefaultCase EndSwitch"
		set $ConstTest$ = "5"
		Switch $ConstTest$
			Case "1"
				set $CompValue$ = "1"
			EndCase
			Case "2"
				set $CompValue$ = "2"
			EndCase
			Case "3"
				set $CompValue$ = "3"
			EndCase
			Case "4"
				set $CompValue$ = "4"
			EndCase
			Case "5"
				set $CompValue$ = "5"
			EndCase
			Case "6"
				set $CompValue$ = "6"
			EndCase
			Case "7"
				set $CompValue$ = "7"
			EndCase
			DefaultCase
				set $CompValue$ = "notexisting"
			EndCase
		EndSwitch
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment "Set the opsi-winst-followup product to setup"
		opsiServiceCall_setFollowUp
	endif ; 4.11.5
	
	if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.3.6")
		
		forceLogInAppendMode = true
		
		forceLogInAppendMode = false
		
	endif ; 4.12.3.6
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "runningOnUefi"
	switch $OS$
		case "Windows_nt"
			set $list$ = shellCall('bcdedit /enum')
			set $tmp1$ = takeFirstStringContaining($list$,"\windows\system32\winload")
			if contains($tmp1$,".efi")
				set $tmp$ = "0"
			else
				set $tmp$ = "-1"
			endif
		endcase
		case "Linux"
			set $tmp$ = shellCall('efibootmgr -v')
		endcase
		case "macos"
			set $tmp$ = "0"
		endcase
	endswitch
	
	set $CompValue$ = boolToString($tmp$ = "0")
	set $ConstTest$ = boolToString(runningOnUefi)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		LogWarning "runningOnUefi failed"
		set $TestResult$ = "not o.k."
	endif
	
	
	sub_compareResult
	
	set $winst_controls$ = $SubResult$
endif

if ($Flag_subtestsub$ = "on") or ($MasterFlag$ = "on")
	Message "testing sub"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing sub"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	Set $ExpectedResult$ = "o.k."
	set $TestResult$ = ""
	
	set $AktTestSubScript$ = "%ScriptPath%\test-files\sub\subtestsub.ins"
	sub_executeTest
	set $subtestsub$ = $SubResult$
endif

sub "%scriptpath%\sub-scripts\filestest.opsiscript"

;if ($Flag_winst_patches$ = "on") or ($MasterFlag$ = "on")
;	Message "testing patches functions"
sub "%scriptpath%\sub-scripts\patchesini.opsiscript"

;if ($Flag_winst_patches$ = "on") or ($MasterFlag$ = "on")
;	Message "testing patches functions"
;	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
;	comment ""
;	comment "testing patches functions"
;	comment ""
;	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
;	Set $ExpectedResult$ = "o.k."
;	; start testing
;	;Set $HomeTestFiles$ = "C:\tmp\testFiles"
;	set $TestResult$ = "o.k."
;	
;	; Chapter 7.2 Patches Sectione
;	
;	comment ""
;	comment "-------------------------------------"
;	comment "Testing: "
;	comment "add, set, addnew, change, del, replace"
;	
;	if $OS$ = "Linux"
;		ShellInAnIcon_create_ini
;	else
;		DosInAnIcon_create_ini
;	endif
;	Patches_dummy_ini $HomeTestFiles$+"\dummy.ini"
;	if (FileExists($HometestFiles$+"\dummy.ini"))
;		message "add"
;		set $ConstTest$ = "[secdummy]"
;		set $ConstTest2$ = "dummy1=add1"
;		Set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.ini")
;		Set $CompValue$ = Trim(takeString(0, $list1$))
;		Set $CompValue2$ = Trim(takeString(1, $list1$))
;		if (($ConstTest$ = $CompValue$) AND ($ConstTest2$ = $CompValue2$))
;			comment "add passed"
;		else
;			set $TestResult$ = "not o.k."
;			LogWarning "add failed"
;		endif
;		
;		message "set"
;		set $ConstTest$ = "[secdummy]"
;		set $ConstTest2$ = "dummy2=set1"
;		Set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.ini")
;		Set $CompValue$ = Trim(takeString(0, $list1$))
;		Set $CompValue2$ = Trim(takeString(2, $list1$))
;		if (($ConstTest$ = $CompValue$) AND ($ConstTest2$ = $CompValue2$))
;			comment "set passed"
;		else
;			set $TestResult$ = "not o.k."
;			LogWarning "set failed"
;		endif
;		
;		message "addnew"
;		set $ConstTest$ = "[secdummy]"
;		set $ConstTest2$ = "dummy1=addnew1"
;		Set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.ini")
;		Set $CompValue$ = Trim(takeString(0, $list1$))
;		Set $CompValue2$ = Trim(takeString(6, $list1$))
;		if (($ConstTest$ = $CompValue$) AND ($ConstTest2$ = $CompValue2$))
;			comment "addnew passed"
;		else
;			set $TestResult$ = "not o.k."
;			LogWarning "addnew failed"
;		endif
;		
;		message "change"
;		set $ConstTest$ = "[secdummy]"
;		set $ConstTest2$ = "dummy3=change1"
;		Set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.ini")
;		Set $CompValue$ = Trim(takeString(0, $list1$))
;		Set $CompValue2$ = Trim(takeString(3, $list1$))
;		if (($ConstTest$ = $CompValue$) AND ($ConstTest2$ = $CompValue2$))
;			comment "change passed"
;		else
;			set $TestResult$ = "not o.k."
;			LogWarning "change failed"
;		endif
;		
;		message "delete"
;		set $ConstTest$ = "[secdummy]"
;		set $ConstTest2$ = "dummy5=add5"
;		Set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.ini")
;		Set $CompValue$ = Trim(takeString(0, $list1$))
;		Set $CompValue2$ = Trim(takeString(4, $list1$))
;		if (($ConstTest$ = $CompValue$) AND ($ConstTest2$ = $CompValue2$))
;			comment "delete passed"
;		else
;			set $TestResult$ = "not o.k."
;			LogWarning "delete failed"
;		endif
;		
;		message "replace"
;		set $ConstTest$ = "[secdummy]"
;		set $ConstTest2$ = "replace1=replace1"
;		Set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.ini")
;		Set $CompValue$ = Trim(takeString(0, $list1$))
;		Set $CompValue2$ = Trim(takeString(5, $list1$))
;		if (($ConstTest$ = $CompValue$) AND ($ConstTest2$ = $CompValue2$))
;			comment "replace passed"
;		else
;			set $TestResult$ = "not o.k."
;			LogWarning "replace failed"
;		endif
;	else
;		set $TestResult$ = "not o.k."
;		logError "Fatal: could not create .ini file"
;		isFatalError
;	endif
;	
;	comment ""
;	comment "-------------------------------------"
;	comment "Testing: "
;	message "GetValueFromInifile"
;	if (FileExists($HometestFiles$+"\dummy.ini"))
;		;GetValueFromInifile
;		set $ConstTest$ = "add1"
;		Set $CompValue$ = GetValueFromInifile($HometestFiles$+"\dummy.ini", "secdummy", "dummy1", "failed")
;		if ($ConstTest$ = $CompValue$)
;			comment "GetValueFromInifile passed"
;		else
;			set $TestResult$ = "not o.k."
;			LogWarning "GetValueFromInifile failed"
;		endif
;		
;		message "GetIni"
;		comment "GetIni is deprecated - use GetValueFromInifile)
;		set $ConstTest$ = "add1"
;		Set $CompValue$ = GetIni($HometestFiles$+"\dummy.ini"[secdummy] dummy1)
;		if ($ConstTest$ = $CompValue$)
;			comment "GetIni passed"
;		else
;			set $TestResult$ = "not o.k."
;			LogWarning "GetIni failed"
;		endif
;		
;		comment "Here comes the actual ini file:"
;		Set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.ini")
;	else
;		set $TestResult$ = "not o.k."
;		logError "Fatal: could not create .ini file"
;		isFatalError
;	endif
;	
;	
;	comment ""
;	comment "-------------------------------------"
;	comment "Testing: "
;	message "delsec"
;	
;	set $SectionName$ ="[secdummy]"
;	Patches_dummy_ini_delsec $HomeTestFiles$+"\dummy.ini"
;	;if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.1.0")
;	;; encoding in patches has to be fixed
;	;	if (FileExists($HometestFiles$+"\dummy.ini"))
;	;		set $ConstTest$ = "[secdüöä]"
;	;		Set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.ini")
;	;		Set $CompValue$ = Trim(takeString(0, $list1$))
;	;		if ($ConstTest$ = $CompValue$)
;	;			comment "passed"
;	;		else
;	;			set $TestResult$ = "not o.k."
;	;			LogWarning "failed"
;	;		endif
;	;	else
;	;		set $TestResult$ = "not o.k."
;	;		logError "Fatal: could not find .ini file"
;	;		isFatalError
;	;	endif
;	;	set $SectionName$ ="[secdüöä]"
;	;	Patches_dummy_ini_delsec $HomeTestFiles$+"\dummy.ini"
;	;	if (FileExists($HometestFiles$+"\dummy.ini"))
;	;		set $ConstTest$ = ""
;	;		Set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.ini")
;	;		Set $CompValue$ = Trim(takeString(0, $list1$))
;	;		if ($ConstTest$ = $CompValue$)
;	;			comment "passed"
;	;		else
;	;			set $TestResult$ = "not o.k."
;	;			LogWarning "failed"
;	;		endif
;	;	else
;	;		set $TestResult$ = "not o.k."
;	;		logError "Fatal: could not find .ini file"
;	;		isFatalError
;	;	endif
;	;endif ; 4.12.1.0
;	
;	;Files_remove_folder
;	
;	if not($OS$ = "macos")
;		if CompareDotSeparatedNumbers("%WinstVersion%","4.11.3.2") >= "0"
;			comment ""
;			comment "-------------------------------------"
;			comment "Testing: "
;			message "Patches /AllNTUserProfiles"
;			Patches_dummy_ini "%userprofiledir%\opsi-winst-test.ini" /AllNTUserProfiles
;			set $list1$ = getProfilesDirList
;			for %s% in $list1$ do sub_check_profile_ini
;			Files_remove_profile_ini /AllNTUserProfiles
;		endif ; 4.11.3.2
;	endif
;	
;	
;	if $OS$ = "Linux"
;		ShellInAnIcon_create_ini
;	else
;		DosInAnIcon_create_ini
;	endif
;	Patches_dummy_ini $HomeTestFiles$+"\dummy.ini"
;	;if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.4.5")
;	if $test_experimental$ = "true"
;		
;		comment "Testing: "
;		message "GetSectionFromInifile"
;		
;		if (FileExists($HometestFiles$+"\dummy.ini"))
;			;GetSectionFromInifile
;			
;			set $list1$ = createStringList ('dummy1=add1', 'dummy2=set1', 'dummy3=change1', 'dummy5=add5', 'replace1=replace1', 'dummy1=addnew1')
;			Set $CompList1$ = GetSectionFromInifile("secdummy", $HometestFiles$+"\dummy.ini")
;			
;			set $list2$ = createStringList ('dümmy7=üöäßÜÖÄ')
;			Set $CompList2$ = GetSectionFromInifile("secdüöä", $HometestFiles$+"\dummy.ini")
;			
;			set $test1list1$ = getSubListByMatch($list1$,$CompList1$)
;			set $test2list1$ = getSubListByMatch($CompList1$,$list1$)
;			
;			set $test1list2$ = getSubListByMatch($list2$,$CompList2$)
;			set $test2list2$ = getSubListByMatch($CompList2$,$list2$)
;			
;			if (count($test1list1$)=count($list1$) AND count($test2list1$)=count($CompList1$) AND count($test1list2$)=count($list2$) AND count($test2list2$)=count($CompList2$))
;				comment "GetSectionFromInifile passed"
;			else
;				set $TestResult$ = "not o.k."
;				LogWarning "GetSectionFromInifile failed"
;			endif
;		else
;			set $TestResult$ = "not o.k."
;			logError "Fatal: could not create .ini file"
;			isFatalError
;		endif
;	endif
;	
;	
;	sub_compareResult
;	set $winst_patches$ = $SubResult$
;endif


if ($Flag_winst_patch_hosts$ = "on") or ($MasterFlag$ = "on")
	Message "testing patchHosts functions"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing patchHosts functions"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	Set $ExpectedResult$ = "o.k."
	set $TestResult$ = "o.k."
	
; 7.3 PatchHost s Sections
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	comment "setAddr, setname, setalias, setalias, setComment"
	
	switch $OS$
		case "Windows_nt"
			DosInAnIcon_create_hosts
		endcase
		case "Linux"
			ShellInAnIcon_create_hosts
		endcase
		case "macos"
			ShellInAnIcon_create_hosts
		endcase
	endswitch
	
	PatchHosts_add $HomeTestFiles$+"\hosts"
	if (FileExists($HometestFiles$+"\hosts"))
		
		message "setAddr"
		set $ConstTest$ = "111.111.111.111"
		set $ConstTest2$ = "ServerNo1.mydom.org"
		Set $list1$ = loadTextFile($HomeTestFiles$+"\hosts")
		set $CompValue$ = takeString(0, splitString (takeString(1, $list1$), "	"))
		set $CompValue2$ = takeString(1, splitString (takeString(1, $list1$), "	"))
		if (($ConstTest$ = $CompValue$) AND ($ConstTest2$ = $CompValue2$))
			comment "setAddr passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "setAddr failed"
		endif
		
		message "setName"
		set $ConstTest$ = "222.222.222.222"
		set $ConstTest2$ = "ServerNo2.mydom.org"
		Set $list1$ = loadTextFile($HomeTestFiles$+"\hosts")
		set $CompValue$ = takeString(0, splitString (takeString(2, $list1$), "	"))
		set $CompValue2$ = takeString(1, splitString (takeString(2, $list1$), "	"))
		if (($ConstTest$ = $CompValue$) AND ($ConstTest2$ = $CompValue2$))
			comment "setName passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "setName failed"
		endif
		
		message "setAlias <hostname> <alias>"
		set $ConstTest$ = "myServerNo1"
		Set $list1$ = loadTextFile($HomeTestFiles$+"\hosts")
		set $CompValue$ = takeString(2, splitString (takeString(1, $list1$), "	"))
		if ($ConstTest$ = $CompValue$)
			comment "setAlias <hostname> <alias> passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "setAlias <hostname> <alias> failed"
		endif
		
		message "setAlias <ipadresse> <alias>"
		set $ConstTest$ = "myServerNo2"
		Set $list1$ = loadTextFile($HomeTestFiles$+"\hosts")
		set $CompValue$ = takeString(2, splitString (takeString(2, $list1$), "	"))
		if ($ConstTest$ = $CompValue$)
			comment "setAlias <ipadresse> <alias> passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "setAlias <ipadresse> <alias> failed"
		endif
		
		message "setComment"
		set $ConstTest$ = "# Hello World"
		Set $list1$ = loadTextFile($HomeTestFiles$+"\hosts")
		set $CompValue$ = takeString(3, splitString (takeString(2, $list1$), "	"))
		if ($ConstTest$ = $CompValue$)
			comment "setComment passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "setComment failed"
		endif
	endif
	
	comment "once again ....."
	
	PatchHosts_add $HomeTestFiles$+"\hosts"
	if (FileExists($HometestFiles$+"\hosts"))
		
		message "setAddr"
		set $ConstTest$ = "111.111.111.111"
		set $ConstTest2$ = "ServerNo1.mydom.org"
		Set $list1$ = loadTextFile($HomeTestFiles$+"\hosts")
		set $CompValue$ = takeString(0, splitString (takeString(1, $list1$), "	"))
		set $CompValue2$ = takeString(1, splitString (takeString(1, $list1$), "	"))
		if (($ConstTest$ = $CompValue$) AND ($ConstTest2$ = $CompValue2$))
			comment "setAddr passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "setAddr failed"
		endif
		
		message "setName"
		set $ConstTest$ = "222.222.222.222"
		set $ConstTest2$ = "ServerNo2.mydom.org"
		Set $list1$ = loadTextFile($HomeTestFiles$+"\hosts")
		set $CompValue$ = takeString(0, splitString (takeString(2, $list1$), "	"))
		set $CompValue2$ = takeString(1, splitString (takeString(2, $list1$), "	"))
		if (($ConstTest$ = $CompValue$) AND ($ConstTest2$ = $CompValue2$))
			comment "setName passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "setName failed"
		endif
		
		message "setAlias <hostname> <alias>"
		set $ConstTest$ = "myServerNo1"
		Set $list1$ = loadTextFile($HomeTestFiles$+"\hosts")
		set $CompValue$ = takeString(2, splitString (takeString(1, $list1$), "	"))
		if ($ConstTest$ = $CompValue$)
			comment "setAlias <hostname> <alias> passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "setAlias <hostname> <alias> failed"
		endif
		
		message "setAlias <ipadresse> <alias>"
		set $ConstTest$ = "myServerNo2"
		Set $list1$ = loadTextFile($HomeTestFiles$+"\hosts")
		set $CompValue$ = takeString(2, splitString (takeString(2, $list1$), "	"))
		if ($ConstTest$ = $CompValue$)
			comment "setAlias <ipadresse> <alias> passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "setAlias <ipadresse> <alias> failed"
		endif
		
		message "setComment"
		set $ConstTest$ = "# Hello World"
		Set $list1$ = loadTextFile($HomeTestFiles$+"\hosts")
		set $CompValue$ = takeString(3, splitString (takeString(2, $list1$), "	"))
		if ($ConstTest$ = $CompValue$)
			comment "setComment passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "setComment failed"
		endif
	endif
	
	Files_copy_vmnat_hosts
	PatchHosts_vmnat $HomeTestFiles$+"\hosts_vmnat"
	Set $list1$ = loadTextFile($HomeTestFiles$+"\hosts_vmnat")
	PatchHosts_vmnat $HomeTestFiles$+"\hosts_vmnat"
	Set $list1$ = loadTextFile($HomeTestFiles$+"\hosts_vmnat")
	PatchHosts_vmnat $HomeTestFiles$+"\hosts_vmnat"
	Set $list1$ = loadTextFile($HomeTestFiles$+"\hosts_vmnat")
	PatchHosts_vmnat $HomeTestFiles$+"\hosts_vmnat"
	Set $list1$ = loadTextFile($HomeTestFiles$+"\hosts_vmnat")
	
	if runningAsAdmin
		message "setAddr"
		set $ConstTest$ = ""
		PatchHosts_system_add
		if $OS$ = "Windows_NT"
			set $SectionName$ = "DosInAnIcon_hosts_ping"
		else
			set $SectionName$ = "ShellInAnIcon_hosts_ping"
		endif
		Set $list1$ = getoutstreamfromsection($SectionName$)
		PatchHosts_system_delete
		set $CompValue$ = takeFirstStringContaining($list1$, "1.2.3.4")
		if not ($ConstTest$ = $CompValue$)
			Set $list1$ = getoutstreamfromsection($SectionName$)
			set $CompValue$ = takeFirstStringContaining($list1$, "1.2.3.4")
			if $OS$ = "Linux"
				if LineContaining_ExistsIn( "1.2.3.4","/etc/hosts")
					set $CompValue$ = "failed"
				else
					set $CompValue$ = ""
				endif
			endif
			if $ConstTest$ = $CompValue$
				comment "setAddr passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "setAddr failed"
			endif
		else
			set $TestResult$ = "not o.k."
			LogWarning "setAddr failed"
		endif
	endif
	
	
	sub_compareResult
	set $winst_patch_hosts$ = $SubResult$
endif

if ($Flag_winst_patch_text_file$ = "on") or ($MasterFlag$ = "on")
	Message "testing PatchTextFile functions"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing PatchTextFile functions"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	Set $ExpectedResult$ = "o.k."
	
	set $TestResult$ = "o.k."
	Files_copy_patchtextfile
; 7.5 PatchTextFile Sections
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Set_Netscape_User_Pref"
	PatchTextFile_Set_Netscape_User_Pref $HomeTestFiles$+"\prefs.js"
	set $ConstTest$ = 'user_pref("browser.startup.homepage", "http://uib.de");'
	set $list1$ = loadTextFile($HomeTestFiles$+"\prefs.js")
	Set $CompValue$ = Trim(takeFirstStringContaining($list1$, "http://uib.de"))
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "AddStringListElement_To_Netscape_User_Pref"
	PatchTextFile_AddStringListElement_To_Netscape_User_Pref $HomeTestFiles$+"\prefs.js"
	set $ConstTest$ = 'user_pref("intl.charsetmenu.browser.cache", "us-ascii, ISO-8859-1, UTF-8,UTF-16, UTF-32");'
	set $list1$ = loadTextFile($HomeTestFiles$+"\prefs.js")
	Set $CompValue$ = Trim(takeFirstStringContaining($list1$,"intl.charsetmenu.browser.cache"))
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Set_Mozilla_Pref"
	PatchTextFile_Set_Mozilla_pref_Pref $HomeTestFiles$+"\prefs.js"
	set $list1$ = loadTextFile($HomeTestFiles$+"\prefs.js")
	set $ConstTest$ = 'user_pref("key.1", "http://opsi.org");'
	Set $CompValue$ = Trim(takeFirstStringContaining($list1$,"key.1"))
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	set $ConstTest$ = 'pref("key.2", "http://opsi.org");'
	Set $CompValue$ = Trim(takeFirstStringContaining($list1$,"key.2"))
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	set $ConstTest$ = 'lock_pref("key.3", "http://opsi.org");'
	Set $CompValue$ = Trim(takeFirstStringContaining($list1$,"key.3"))
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	set $ConstTest$ = 'foobar("key.4", "http://opsi.org");'
	Set $CompValue$ = Trim(takeFirstStringContaining($list1$,"key.4"))
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "AddStringListElement_To_Netscape_User_Pref"
	PatchTextFile_AddStringListElement_To_Mozilla_Pref $HomeTestFiles$+"\prefs.js"
	set $ConstTest$ = 'user_pref("network.proxy.no_proxies_on", "localhost, 127.0.0.1, vmix, bonifax, opsi.org");'
	set $list1$ = loadTextFile($HomeTestFiles$+"\prefs.js")
	Set $CompValue$ = Trim(takeFirstStringContaining($list1$,"network.proxy.no_proxies_on"))
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "DeleteTheLine / AdvanceLine"
	PatchTextFile_AdvanceLine_DeleteTheLine $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line containing dummy1."
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeString(0, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "FindLine"
	PatchTextFile_findLine $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line1 with no sense"
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeString(0, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "FindLine_StartingWith"
	PatchTextFile_FindLine_StartingWith $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line3 with no sense"
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeString(3, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "FindLine_Containing"
	PatchTextFile_FindLine_Containing $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line2 with no sense"
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeString(1, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "GoToTop"
	PatchTextFile_GoToTop $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line2 with no sense"
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeString(0, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "GoToBottom"
	PatchTextFile_GoToBottom $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line2 with no sense"
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeString(0, $list1$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "AddLine"
	PatchTextFile_AddLine $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line added by winst"
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeFirstStringContaining($list1$, $ConstTest$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "InsertLine"
	PatchTextFile_InsertLine $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line inserted by winst"
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeFirstStringContaining($list1$, $ConstTest$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "AppendLine"
	PatchTextFile_AppendLine $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line appended by winst"
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeFirstStringContaining($list1$, $ConstTest$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Append_File"
	PatchTextFile_Append_File $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line3appendbyFile"
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeFirstStringContaining($list1$, $ConstTest$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Subtract_File"
	PatchTextFile_Subtract_File $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line1appendbyFile"
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeFirstStringContaining($list1$, $ConstTest$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "SaveToFile"
	PatchTextFile_SaveToFile $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line1appendbyFile"
	if (fileExists($HomeTestFiles$+"\savetofile.txt"))
		set $list1$ = loadTextFile($HomeTestFiles$+"\savetofile.txt")
		Set $CompValue$ = takeFirstStringContaining($list1$, $ConstTest$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "Sorted"
	PatchTextFile_Sorted $HomeTestFiles$ + "\dummy.txt"
	set $ConstTest$ = "Line0appendbyFile"
	set $ConstTest2$ = "Line4appendbyFile"
	set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
	Set $CompValue$ = takeString(0, $list1$)
	Set $CompValue2$ = takeString(-1, $list1$)
	if (($ConstTest$ = $CompValue$) AND ($ConstTest2$ = $CompValue2$))
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.4.6") >= "0"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "key value pairs"
		PatchTextFile_setvalues $HomeTestFiles$ + "\dummy.txt"
		set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
		set $ConstTest$ = 'no'
		set $ConstTest2$ = "so_tight"
		Set $CompValue$ = getValue("set me to no", $list1$)
		Set $CompValue2$ = getValue("tight", $list1$)
		if (($ConstTest$ = $CompValue$) AND ($ConstTest2$ = $CompValue2$))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "java!"
		set $ConstTest2$ = "great"
		Set $CompValue$ = getValuebySeparator("divided by a colon", ":", $list1$)
		Set $CompValue2$ = getValuebySeparator("divided by a greater-than sign", ">",$list1$)
		if (($ConstTest$ = $CompValue$) AND ($ConstTest2$ = $CompValue2$))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "search and replace"
		PatchTextFile_searchAndReplace $HomeTestFiles$ + "\dummy.txt"
		set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.txt")
		set $ConstTest$ = "lazarus!"
		Set $CompValue$ = getValuebySeparator("divided by a colon", ":", $list1$)
		if (($ConstTest$ = $CompValue$))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif ; 4.11.4.6
	
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "config file example"
	PatchTextFile_vmnet8_config $HomeTestFiles$ + "\vmnet8.txt"
	set $ConstTest$ = "0"
	set $list1$ = loadTextFile($HomeTestFiles$+"\vmnet8.txt")
	Set $CompValue$ = count($list1$)
	if $ConstTest$ = $CompValue$
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	Files_empty_folder
	
	if not($OS$ = 'macos')
		if CompareDotSeparatedNumbers("%WinstVersion%","4.11.3.4") >= "0"
			
			Files_profile_copy /AllNTUserProfiles
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "DeleteTheLine / AdvanceLine"
			PatchTextFile_AdvanceLine_DeleteTheLine "%userprofiledir%\opsi-winst-test\dummy.txt" /AllNTUserProfiles
			set $tmp$ = "0"
			set $ConstTest$ = "Line containing dummy1."
			set $list1$ = getProfilesDirList
			for %s% in $list1$ do sub_check_profile_txt
			
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "FindLine"
			PatchTextFile_findLine "%userprofiledir%\opsi-winst-test\dummy.txt" /AllNTUserProfiles
			set $ConstTest$ = "Line1 with no sense"
			set $tmp$ = "0"
			set $list1$ = getProfilesDirList
			for %s% in $list1$ do sub_check_profile_txt
			
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "FindLine_StartingWith"
			PatchTextFile_FindLine_StartingWith "%userprofiledir%\opsi-winst-test\dummy.txt" /AllNTUserProfiles
			set $ConstTest$ = "Line3 with no sense"
			set $tmp$ = "3"
			set $list1$ = getProfilesDirList
			for %s% in $list1$ do sub_check_profile_txt
			
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "FindLine_Containing"
			PatchTextFile_FindLine_Containing "%userprofiledir%\opsi-winst-test\dummy.txt" /AllNTUserProfiles
			set $ConstTest$ = "Line2 with no sense"
			set $tmp$ = "1"
			set $list1$ = getProfilesDirList
			for %s% in $list1$ do sub_check_profile_txt
			
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "GoToTop"
			PatchTextFile_GoToTop "%userprofiledir%\opsi-winst-test\dummy.txt" /AllNTUserProfiles
			set $ConstTest$ = "Line2 with no sense"
			set $tmp$ = "0"
			set $list1$ = getProfilesDirList
			for %s% in $list1$ do sub_check_profile_txt
			
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "GoToBottom"
			PatchTextFile_GoToBottom "%userprofiledir%\opsi-winst-test\dummy.txt" /AllNTUserProfiles
			set $ConstTest$ = "Line2 with no sense"
			set $tmp$ = "0"
			set $list1$ = getProfilesDirList
			for %s% in $list1$ do sub_check_profile_txt
			
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "AddLine"
			PatchTextFile_AddLine "%userprofiledir%\opsi-winst-test\dummy.txt" /AllNTUserProfiles
			set $ConstTest$ = "Line added by winst"
			set $tmp$ = "1"
			set $list1$ = getProfilesDirList
			for %s% in $list1$ do sub_check_profile_txt
			
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "InsertLine"
			PatchTextFile_InsertLine "%userprofiledir%\opsi-winst-test\dummy.txt" /AllNTUserProfiles
			set $ConstTest$ = "Line inserted by winst"
			set $tmp$ = "1"
			set $list1$ = getProfilesDirList
			for %s% in $list1$ do sub_check_profile_txt
			
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "AppendLine"
			PatchTextFile_AppendLine "%userprofiledir%\opsi-winst-test\dummy.txt" /AllNTUserProfiles
			set $ConstTest$ = "Line appended by winst"
			set $tmp$ = "3"
			set $list1$ = getProfilesDirList
			for %s% in $list1$ do sub_check_profile_txt
			
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "Append_File"
			PatchTextFile_Append_File_prof "%userprofiledir%\opsi-winst-test\dummy.txt" /AllNTUserProfiles
			set $ConstTest$ = "Line3appendbyFile"
			set $tmp$ = "6"
			set $list1$ = getProfilesDirList
			for %s% in $list1$ do sub_check_profile_txt
			
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "Subtract_File"
			PatchTextFile_Subtract_File_prof "%userprofiledir%\opsi-winst-test\dummy.txt" /AllNTUserProfiles
			set $ConstTest$ = "Line1appendbyFile"
			set $list1$ = getProfilesDirList
			set $tmp$ = "0"
			for %s% in $list1$ do sub_check_profile_txt
			
			;comment ""
			;comment "-------------------------------------"
			;comment "Testing: "
			;message "SaveToFile"
			;PatchTextFile_SaveToFile "%userprofiledir%\opsi-winst-test\dummy.txt" /AllNTUserProfiles
			;set $ConstTest$ = "Line1appendbyFile"
			;if (fileExists("%CurrentProfileDir%\opsi-winst-test\savetofile.txt"))
			;	set $list1$ = loadTextFile("%CurrentProfileDir%\opsi-winst-test\savetofile.txt")
			;	Set $CompValue$ = takeString(0, $list1$)
			;	if ($ConstTest$ = $CompValue$)
			;		comment "passed"
			;	else
			;		set $TestResult$ = "not o.k."
			;		LogWarning "failed"
			;	endif
			;else
			;	set $TestResult$ = "not o.k."
			;	LogWarning "failed"
			;endif
			
			Files_profile_del /AllNTUserProfiles
			
		endif ; 4.11.3.4
	endif ; not macos
	
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.3.6") >= "0"
		;Files_copy_patchtextfile_system /sysnative
		; Patchtextfile is not sysnative enabled yet
		Files_copy_patchtextfile_system
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "DeleteTheLine / AdvanceLine"
		PatchTextFile_AdvanceLine_DeleteTheLine "%system%\opsi-script-test" + "\dummy.txt"
		set $ConstTest$ = "Line containing dummy1."
		set $list1$ = loadTextFile("%system%\opsi-script-test"+"\dummy.txt")
		Set $CompValue$ = takeString(0, $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		Files_empty_folder_system
	endif ; 4.11.3.6
	
	
	
	sub_compareResult
	set $winst_patch_text_file$ = $SubResult$
endif

;if ($Flag_winst_idapiconfig$ = "on") or ($MasterFlag$ = "on")
;	Message "testing idapiconfig functions"
;	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
;	comment ""
;	comment "idapiconfig functions are not supported anymore"
;	comment ""
;	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
;	Set $ExpectedResult$ = "o.k."
;	set $TestResult$ = "o.k."
;
;	;set $ConstTest$ = "no error"
;	;markErrorNumber
;	;IdapiConfig_winsttest "%ScriptPath%\test-files\idapi-dummy.cfg"
;	;if errorsOccuredSinceMark > 0
;	;	set $CompValue$ = "error"
;	;else
;	;	set $CompValue$ = "no error"
;	;endif
;	;if ($ConstTest$ = $CompValue$)
;	;	comment "passed"
;	;else
;	;	LogWarning "failed"
;	;	set $TestResult$ = "not o.k."
;	;endif
;	;
;	;set $ConstTest$ = "no error"
;	;markErrorNumber
;	;IdapiConfig_winsttest
;	;if errorsOccuredSinceMark > 0
;	;	set $CompValue$ = "error"
;	;else
;	;	set $CompValue$ = "no error"
;	;endif
;	;if ($ConstTest$ = $CompValue$)
;	;	comment "passed"
;	;else
;	;	LogWarning "failed"
;	;	set $TestResult$ = "not o.k."
;	;endif
;
;
;	sub_compareResult
;	set $winst_idapiconfig$ = $SubResult$
;endif


if ($Flag_winst_link_folder$ = "on") or ($MasterFlag$ = "on")
	if $OS$ = 'macos'
		comment "linkFolder not tested on macos"
		set $TestResult$ = "not implemented"
	else
		Message "testing linkFolder functions"
		comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
		comment ""
		comment "testing linkFolder functions"
		comment ""
		comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
		Set $ExpectedResult$ = "o.k."
		
		; start testing
		;Set $HomeTestFiles$ = "C:\tmp\testFiles"
		set $TestResult$ = "o.k."
		
		if $OS$ = "windows_NT"
			set $link_extension$ = ".LNK"
			set $target$ = "C:\Programme\PuTTY\1234567890.exe"
			set $workdir$ ="C:\Programme\PuTTY"
		endif
		if $OS$ = "Linux"
			set $link_extension$ = ".desktop"
			set $target$ = "/usr/bin/exeutablebinary"
			set $workdir$ = "/var/run"
		endif
		
		comment "check if we running in opsi mode"
		if not ("%installingProdName%" = "opsi-script-test")
			comment "we not running in opsi mode - user specific link folder will be tested"
			
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			comment "linkFolder @ desktop, sendto, startmenu, startup, programs, desktopdirectory"
			
			if $OS$ = "windows_NT"
				set $list1$ = createStringList ('desktop', 'sendto', 'startmenu', 'programs', 'startup', 'desktopdirectory')
				set $link_subfolder$ = "Dummy"
			endif
			if $OS$ = "Linux"
				set $list1$ = createStringList ('desktop', 'startup', 'desktopdirectory')
				set $link_subfolder$ = ""
			endif
			
			message "startup"
			for $var$ in $list1$ do LinkFolder_Dummy
			
			if $OS$ = "windows_NT"
				message "sendto"
				if (FileExists("%CurrentSendToDir%\Dummy\Dummy"+$link_extension$))
					comment "sendto passed"
					set $tmp$ = "%SendToDir%\Dummy"
					Files_delete_linkFolder
				else
					set $TestResult$ = "not o.k."
					LogWarning "sendto failed"
				endif
				
				
				message "startmenu"
				if (FileExists("%CurrentStartmenuDir%\Dummy\Dummy"+$link_extension$))
					comment "startmenu passed"
					set $tmp$ = "%StartmenuDir%\Dummy"
					Files_delete_linkFolder
				else
					set $TestResult$ = "not o.k."
					LogWarning "startmenu failed"
				endif
				
				message "programs"
				if (FileExists("%CurrentProgramsDir%\Dummy\Dummy"+$link_extension$))
					comment "programs passed"
					set $tmp$ = "%ProgramsDir%\Dummy"
					Files_delete_linkFolder
				else
					set $TestResult$ = "not o.k."
					LogWarning "programs failed"
				endif
			endif ; windows
			
			
			message "desktop"
			if (FileExists("%CurrentDesktopDir%\"+$link_subfolder$+"\dummy"+$link_extension$))
				comment "desktop passed"
				set $tmp$ = "%DesktopDir%\"+$link_subfolder$
				Files_delete_linkFolder
			else
				set $TestResult$ = "not o.k."
				LogWarning "desktop failed"
			endif
			
			
			message "startup"
			if (FileExists("%CurrentStartupDir%\"+$link_subfolder$+"\dummy"+$link_extension$))
				comment "startup passed"
				set $tmp$ = "%StartupDir%\"+$link_subfolder$
				Files_delete_linkFolder
			else
				set $TestResult$ = "not o.k."
				LogWarning "startup failed"
			endif
			
		endif ; opsi service mode
		
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		comment "linkFolder @ common_startmenu, common_programs, common_startup, common_desktopdirectory"
		
		if $OS$ = "windows_NT"
			set $list2$ = createStringList ('common_startmenu', 'common_programs', 'common_startup', 'common_desktopdirectory')
			set $link_subfolder$ = "Dummy\"
		endif
		if $OS$ = "Linux"
			;set $list2$ = createStringList ('common_programs', 'common_startup')
			set $list2$ = emptylist($list2$)
			set $link_subfolder$ = ""
		endif
		
		for $var$ in $list2$ do LinkFolder_Dummy
		
		if $OS$ = "windows_NT"
			message "common_desktopdirectory"
			if (FileExists("%CommonDesktopDir%\"+$link_subfolder$+"Dummy"+$link_extension$))
				comment "common_desktopdirectory passed"
				set $tmp$ = "%CommonDesktopDir%\"+$link_subfolder$
				Files_delete_linkFolder
			else
				set $TestResult$ = "not o.k."
				LogWarning "common_desktopdirectory failed"
			endif
			
			message "common_startmenu"
			if (FileExists("%CommonStartMenuPath%\"+$link_subfolder$+"Dummy"+$link_extension$))
				comment "common_startmenu passed"
				set $tmp$ = "%CommonStartMenuPath%\"+$link_subfolder$
				Files_delete_linkFolder
			else
				set $TestResult$ = "not o.k."
				LogWarning "common_startmenu failed"
			endif
			
			message "common_startup"
			if (FileExists("%CommonStartupDir%\"+$link_subfolder$+"Dummy"+$link_extension$))
				comment "common_startup passed"
				set $tmp$ = "%CommonStartupDir%\"+$link_subfolder$
				Files_delete_linkFolder
			else
				set $TestResult$ = "not o.k."
				LogWarning "common_startup failed"
			endif
			
			message "common_programs"
			if (FileExists("%CommonProgramsDir%\"+$link_subfolder$+"Dummy"+$link_extension$))
				comment "common_programs passed"
				set $tmp$ = "%CommonProgramsDir%\"+$link_subfolder$
				Files_delete_linkFolder
			else
				set $TestResult$ = "not o.k."
				LogWarning "common_programs failed"
			endif
		endif ; windows
		
		
		if $OS$ = "windows_NT"
			set $list2$ = createStringList ('common_startmenu', 'common_programs', 'common_startup', 'common_desktopdirectory')
		endif
		if $OS$ = "Linux"
			set $list2$ = createStringList ('common_programs', 'common_startup')
		endif
		
		for $var$ in $list2$ do LinkFolder_Dummy2
		
		if $OS$ = "windows_NT"
			message "common_desktopdirectory"
			if (FileExists("%CommonDesktopDir%\Dummy"+$link_extension$))
				comment "common_desktopdirectory passed"
				set $tmp$ = "%CommonDesktopDir%\Dummy"+$link_extension$
				Files_delete_linkFolder2
			else
				set $TestResult$ = "not o.k."
				LogWarning "common_desktopdirectory failed"
			endif
			
			message "common_startmenu"
			if (FileExists("%CommonStartMenuPath%\Dummy"+$link_extension$))
				comment "common_startmenu passed"
				set $tmp$ = "%CommonStartMenuPath%\Dummy"+$link_extension$
				Files_delete_linkFolder2
			else
				set $TestResult$ = "not o.k."
				LogWarning "common_startmenu failed"
			endif
		endif ; windows
		
		message "common_startup"
		if (FileExists("%CommonStartupDir%\dummy"+$link_extension$))
			comment "common_startup passed"
			set $tmp$ = "%CommonStartupDir%\dummy"+$link_extension$
			Files_delete_linkFolder2
		else
			set $TestResult$ = "not o.k."
			LogWarning "common_startup failed"
		endif
		
		message "common_programs"
		if (FileExists("%CommonProgramsDir%\dummy"+$link_extension$))
			comment "common_programs passed"
			set $tmp$ = "%CommonProgramsDir%\dummy"+$link_extension$
			Files_delete_linkFolder2
		else
			set $TestResult$ = "not o.k."
			LogWarning "common_programs failed"
		endif
		
		if $OS$ = "windows_NT"
			set $list2$ = createStringList ('common_startmenu', 'common_programs', 'common_startup', 'common_desktopdirectory')
		endif
		if $OS$ = "Linux"
			set $list2$ = createStringList ('common_programs', 'common_startup')
		endif
		
		for $var$ in $list2$ do LinkFolder_Dummy2
		set $string1$ = "dummy"
		for $var$ in $list2$ do LinkFolder_del_Dummy
		
		if $OS$ = "windows_NT"
			message "common_desktopdirectory"
			if not (FileExists("%CommonDesktopDir%\Dummy"+$link_extension$))
				comment "common_desktopdirectory passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "common_desktopdirectory failed"
				set $tmp$ = "%CommonDesktopDir%\Dummy"+$link_extension$
				Files_delete_linkFolder
			endif
			
			message "common_startmenu"
			if not(FileExists("%CommonStartMenuPath%\Dummy"+$link_extension$))
				comment "common_startmenu passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "common_startmenu failed"
				set $tmp$ = "%CommonStartMenuPath%\Dummy"+$link_extension$
				Files_delete_linkFolder
			endif
			
			message "common_startup"
			if not(FileExists("%CommonStartupDir%\Dummy"+$link_extension$))
				comment "common_startup passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "common_startup failed"
				set $tmp$ = "%CommonStartupDir%\Dummy"+$link_extension$
				Files_delete_linkFolder
			endif
			
			message "common_programs"
			if not(FileExists("%CommonProgramsDir%\Dummy"+$link_extension$))
				comment "common_programs passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "common_programs failed"
				set $tmp$ = "%CommonProgramsDir%\Dummy"+$link_extension$
				Files_delete_linkFolder
			endif
		endif ;windows
	endif ; macos
	
	
	sub_compareResult
	set $winst_link_folder$ = $SubResult$
	;else  ; windows
	;	set $TestResult$ = "not implemented"
	;endif  ; windows
endif


if ($Flag_winst_xml$ = "on") or ($MasterFlag$ = "on")
	Message "testing XMLPatch functions"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing XMLPatch functions"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	Set $ExpectedResult$ = "o.k."
	
	; start testing
	set $TestResult$ = "o.k."
	if $OS$ = "windows_NT"
		Files_copy_xml
		
		;return
		
		; 6.7.3 Boolean Expressions
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "XMLAddNamespace"
		if not(XMLAddNamespace($HomeTestFiles$+"\dummy.xml", 'rootnode', 'xmlns:xml="http://www.w3.org/XML/1998/namespace"'))
			comment "XMLAddNamespace returned false"
		endif
		set $ConstTest$ = '<rootnode xmlns:xml="http://www.w3.org/XML/1998/namespace">'
		set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.xml")
		set $CompValue$ = takeString(1, $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "XMLRemoveNamespace"
		if not(XMLRemoveNamespace($HomeTestFiles$+"\dummy.xml", 'rootnode', 'xmlns:xml="http://www.w3.org/XML/1998/namespace"'))
			comment "XMLRemoveNamespace returned false"
		endif
		set $ConstTest$ = '<rootnode>'
		set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.xml")
		set $CompValue$ = takeString(1, $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		; 6.4.5 Producing String Lists from wInst Sections
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "return"
		set $list1$ = getReturnListFromSection ('XMLPatch_return_elements "'+$HomeTestFiles$+'\dummy.xml"')
		set $ConstTest$ = 'node_level-2_A color="blue"'
		set $tmp$ = takeString(0, $list1$)
		set $CompValue$ = Trim($tmp$)
		if ($ConstTest$ = $CompValue$)
			comment "XMLPatch_return_elements passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "XMLPatch_return_elements failed"
		endif
		
		set $list1$ = getReturnListFromSection ('XMLPatch_return_attributes "'+$HomeTestFiles$+'\dummy.xml"')
		set $ConstTest$ = 'color="green"'
		set $ConstTest2$ = 'count="65"'
		set $tmp$ = takeString(0, $list1$)
		set $CompValue$ = Trim($tmp$)
		set $tmp$ = takeString(1, $list1$)
		set $CompValue2$ = Trim($tmp$)
		if (($ConstTest$ = $CompValue$) AND ($ConstTest2$ = $CompValue2$))
			comment "XMLPatch_return_attributes passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "XMLPatch_return_attributes failed"
		endif
		
		set $list1$ = getReturnListFromSection ('XMLPatch_return_elementnames "'+$HomeTestFiles$+'\dummy.xml"')
		set $ConstTest$ = "node_level-2_A"
		set $tmp$ = takeString(0, $list1$)
		set $CompValue$ = Trim($tmp$)
		if ($ConstTest$ = $CompValue$)
			comment "XMLPatch_return_elementnames passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "XMLPatch_return_elementnames failed"
		endif
		
		set $list1$ = getReturnListFromSection ('XMLPatch_return_attributenames "'+$HomeTestFiles$+'\dummy.xml"')
		set $ConstTest$ = "color"
		set $ConstTest2$ = "count"
		set $tmp$ = takeString(0, $list1$)
		set $CompValue$ = Trim($tmp$)
		set $tmp$ = takeString(1, $list1$)
		set $CompValue2$ = Trim($tmp$)
		if (($ConstTest$ = $CompValue$) AND ($ConstTest2$ = $CompValue2$))
			comment "XMLPatch_return_attributenames passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "XMLPatch_return_attributenames failed"
		endif
		
		set $list1$ = getReturnListFromSection ('XMLPatch_return_text "'+$HomeTestFiles$+'\dummy.xml"')
		set $ConstTest$ = "Hello World"
		set $tmp$ = takeString(0, $list1$)
		set $CompValue$ = Trim($tmp$)
		if ($ConstTest$ = $CompValue$)
			comment "XMLPatch_return_text passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "XMLPatch_return_text failed"
		endif
		
		set $list1$ = getReturnListFromSection ('XMLPatch_return_counting "'+$HomeTestFiles$+'\dummy.xml"')
		set $ConstTest$ = "1"
		set $ConstTest2$ = "2"
		set $tmp$ = takeString(0, $list1$)
		set $CompValue$ = Trim($tmp$)
		set $tmp$ = takeString(1, $list1$)
		set $CompValue2$ = Trim($tmp$)
		if (($ConstTest$ = $CompValue$) AND ($ConstTest2$ = $CompValue2$))
			comment "XMLPatch_return_counting passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "XMLPatch_return_counting failed"
		endif
		
		; 7.7 XMLPatch Sections
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "SetAttribute"
		XMLPatch_SetAttribute $HomeTestFiles$+"\dummy.xml"
		set $ConstTest$ = "yellow"
		set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.xml")
		set $tmp$ = takeString(4, $list1$)
		set $CompValue$ = takeString(1, splitString ($tmp$, '"'))
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "AddAttribute"
		XMLPatch_AddAttribute $HomeTestFiles$+"\dummy.xml"
		set $ConstTest$ = "OpenOfficeWriter"
		set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.xml")
		set $tmp$ = takeString(3, $list1$)
		set $CompValue$ = takeString(3, splitString ($tmp$, '"'))
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "DeleteAttribute"
		XMLPatch_DeleteAttribute $HomeTestFiles$+"\dummy.xml"
		set $ConstTest$ = '<node_level-2_B count="65">'
		set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.xml")
		set $tmp$ = takeString(4, $list1$)
		set $CompValue$ = Trim($tmp$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "DeleteElement"
		XMLPatch_DeleteElement $HomeTestFiles$+"\dummy.xml"
		set $ConstTest$ = '<node_level-2_C>'
		set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.xml")
		set $tmp$ = takeString(4, $list1$)
		set $CompValue$ = Trim($tmp$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "SetText / AddText"
		XMLPatch_SetText $HomeTestFiles$+"\dummy.xml"
		set $ConstTest$ = '<node_level-2_A color="blue" name="OpenOfficeWriter">node_level-2_A</node_level-2_A>'
		set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.xml")
		set $tmp$ = takeString(3, $list1$)
		set $CompValue$ = Trim($tmp$)
		if ($ConstTest$ = $CompValue$)
			comment "SetText passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "SetText failed"
		endif
		XMLPatch_AddText $HomeTestFiles$+"\dummy.xml"
		set $ConstTest$ = '<node_level-2_C>node_level-2_C</node_level-2_C>'
		set $list1$ = loadTextFile($HomeTestFiles$+"\dummy.xml")
		set $tmp$ = takeString(4, $list1$)
		set $CompValue$ = Trim($tmp$)
		if ($ConstTest$ = $CompValue$)
			comment "AddText passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "AddText failed"
		endif
		
		XMLPatch_SetText_dummy2 $HomeTestFiles$+"\dummy2.xml"
		set $ConstTest$ = '<VALUE>K1S120</VALUE>'
		set $list1$ = loadTextFile($HomeTestFiles$+"\dummy2.xml")
		set $tmp$ = takeFirstStringContaining($list1$,"<VALUE>K1S120</VALUE>")
		set $CompValue$ = Trim($tmp$)
		if ($ConstTest$ = $CompValue$)
			comment "SetText passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "SetText failed"
		endif
		
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "OpenNodeSet"
		if ($TestResult$ = "o.k.")
			comment "not explicit tested | assumed passed"
		else
			comment "status is unknown"
		endif
	else ; windows
		set $TestResult$ = "not implemented"
	endif ; windows
	
	sub_compareResult
	
	set $winst_xml$ = $SubResult$
endif




if ($Flag_execwith_test$ = "on") or ($MasterFlag$ = "on")
	Message "testing execWith "
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing execWith "
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	Set $ExpectedResult$ = "o.k."
	set $TestResult$ = "o.k."
	
	if $OS$ = "Windows_NT"
		;stop all running instances beforehand
		killtask "autoit3.exe"
		
		;if $MsVersion$ <= "5.0"
		if CompareDotSeparatedNumbers(GetMsVersionInfo,"5.0") <= "0"
			comment "not tested at win2k  because tasklist is needed"
		else
			comment "start an autoit3 instance which will wait for a notepad to come"
			ExecWith_close_helper_window "%SCRIPTPATH%\autoit3.exe" WINST /letThemGo /EscapeStrings
			winbatch_helper_showwindow_50
			sleepseconds 1
			set $list1$ = getOutStreamFromSection ('DosInAnIcon_getTask_helper')
			set $tmp$ = takeFirstStringContaining($list1$,"opsiscripttesthelper.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			set $ConstTest$ = ""
			if ($ConstTest$ = $CompValue$)
				comment "Execwith assumed passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "Execwith assumed failed"
			endif
			killtask "helperchild.exe"
			killtask "opsiscripttesthelper.exe"
			killtask "autoit3.exe"
		endif
		
		set $list1$ = getOutStreamFromSection ('ExecWith_parameters cmd.exe /c pass p1 p2 p3 p4 p5')
		set $CompValue$ = takeFirstStringContaining($list1$,"p5")
		set $ConstTest$ = "param5= p5"
		if ($ConstTest$ = $CompValue$)
			comment "Execwith assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "Execwith assumed failed"
		endif
		
		set $list1$ = getOutStreamFromSection ('ExecWith_parameters cmd.exe /c echo hello! hello pass')
		set $CompValue$ = takeFirstStringContaining($list1$,"hello")
		if not ("" = $CompValue$)
			comment "Execwith assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "Execwith assumed failed"
		endif
		
		DefVar $UserName$
		Set $UserName$ = "secours"
		DefVar $UserPassWord$
		Set $UserPassWord$ = "help!"
		DefVar $UserGroup$
		Set $UserGroup$ = "Utilisateurs"
		set $list1$ = getOutStreamFromSection ('Execwith_Autoit_param2 "%ScriptPath%\autoit3.exe" PASS $UserPassWord$ $UserName$ $UserGroup$')
		killtask "autoit3.exe"
		
		
		
		if CompareDotSeparatedNumbers("%WinstVersion%","4.11.5.1") >= "0"
			comment "Testing parameters for ExecWith"
			set $tmp$ = "p5"
			set $list1$ = getOutStreamFromSection ('ExecWith_parameters cmd.exe /c pass p1 p2 p3 p4 $tmp$')
			set $CompValue$ = takeFirstStringContaining($list1$,"p5")
			set $ConstTest$ = "param5= p5"
			if ($ConstTest$ = $CompValue$)
				comment "Execwith assumed passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "Execwith assumed failed"
			endif
		endif ; 4.11.5
		
	endif ; windows
	
	if $OS$ = "Linux"
		set $list1$ = getOutStreamFromSection ('ExecWith_parameters_bash /bin/bash pass p1 p2 p3 p4 p5')
		set $CompValue$ = takeFirstStringContaining($list1$,"p5")
		set $ConstTest$ = "param5= p5"
		if ($ConstTest$ = $CompValue$)
			comment "Execwith assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "Execwith assumed failed"
		endif
	endif ; Linux
	
	sub_compareResult
	set $execwith_test$ = $SubResult$
endif

;if ($Flag_compare_to_python$ = "on") or ($MasterFlag$ = "on")
if ($Flag_compare_to_python$ = "on")
	Message "testing execPython"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing execWith (/ execPython)"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	
	Set $ExpectedResult$ = "o.k."
	set $TestResult$ = "o.k."
	
	message "comparing an execWith call to a should be identical execPython call"
	
	set $list1$ = getOutStreamFromSection('ExecWith_hello "python" PASS -a "option a" -b "option b" "there we are" WINST /EscapeStrings')
	set $list2$ = getOutStreamFromSection('execpython_hello -a "option a" -b "option b" "there we are"')
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.4.1") >= "0"
		set $list$ = getListContainingList($list1$,$list2$)
		if count($list1$) = count($list$)
			comment "passed"
		else
			comment "failed"
			set $TestResult$ = "not o.k."
		endif
	endif
	
	sub_compareResult
	set $compare_to_python$ = $SubResult$
endif

;if ($Flag_winst_ldap_search$ = "on") or ($MasterFlag$ = "on")
if ($Flag_winst_ldap_search$ = "on")
	; at linux we get an:  Error in LDAP login:
	if $OS$ = "Windows_NT"
		if ("%opsiserver%" = "192.168.1.14") or ("%opsiserver%" = "bonifax.uib.local")
			comment "yes - we running in opsi mode at uib"
			
			Message "testing LDAP Search"
			comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
			comment ""
			comment "testing LDAP Search"
			comment ""
			comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
			Set $ExpectedResult$ = "o.k."
			
			; start testing
			set $TestResult$ = "o.k."
			
			set $LdapSearchDn$ = "ou=Groups,dc=uib,dc=local"
			set $LdapSearchAttributes$ = ""
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			comment "/objects"
			ldapsearch_groups /cache
			set $ConstTest$ = "cn=opsiadmin,ou=Groups,dc=uib,dc=local"
			set $list1$ = getReturnlistFromSection("ldapsearch_groups /cached /objects")
			set $CompValue$ = takeFirstStringContaining($list1$,"cn=opsiadmin,ou=Groups,dc=uib,dc=local")
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				comment "failed"
				set $TestResult$ = "not o.k."
			endif
			
			
			set $LdapSearchDn$ = "cn=opsiadmin,ou=Groups,dc=uib,dc=local"
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			comment "/objects"
			set $ConstTest$ = "1"
			ldapsearch_groups /cache
			set $list1$ = getReturnlistFromSection("ldapsearch_groups /cached /objects")
			set $CompValue$ = count ($list1$)
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				comment "failed"
				set $TestResult$ = "not o.k."
			endif
			
			set $LdapSearchAttributes$ = "memberUid"
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			comment "/values"
			ldapsearch_groups /cache
			set $ConstTest$ = "adminuser"
			set $list1$ = getReturnlistFromSection("ldapsearch_groups /cached /values")
			set $CompValue$ = takeFirstStringContaining($list1$,$ConstTest$)
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				comment "failed"
				set $TestResult$ = "not o.k."
			endif
			
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			comment "/attributes"
			set $ConstTest$ = "memberUid"
			set $list1$ = getReturnlistFromSection("ldapsearch_groups /attributes")
			set $CompValue$ = takeFirstStringContaining($list1$,$ConstTest$)
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				comment "failed"
				set $TestResult$ = "not o.k."
			endif
			
			if CompareDotSeparatedNumbers("%WinstVersion%","4.12.3.4") >= "0"
				comment ""
				comment "-------------------------------------"
				comment "Testing: "
				comment "user / password"
				Set $LdapHost$ = "vmix7.uib.local"
				if isPingReachable($LdapHost$)
					Set $LdapPort$ = "389"
					Set $LdapUser$ = "cn=Administrator,cn=Users,dc=uib,dc=local"
					Set $LdapPassword$ = "Linux123"
					Set $LdapResultType$ = "objects"
					Set $LdapSearchDn$ = "cn=Users,dc=uib,dc=local"
					Set $LdapSearchAttributes$ = "name,objectClass"
					Set $LdapFilter$ = "(&(objectclass=*))"
					
					markErrorNumber
					set $list1$ = getReturnListFromSection("ldapsearch_users /" + $LdapResultType$)
					if errorsOccuredSinceMark > 0
						comment "failed while ldapsearch"
						set $TestResult$ = "not o.k."
					else
						comment "passed"
					endif
				endif
			endif ; 4.12.3.4
			
			sub_compareResult
			set $winst_ldap_search$ = $SubResult$
		else
			comment "not running in opsi mode at uib: ldapsearch not tested"
		endif
	else ; windows
		set $TestResult$ = "not implemented"
	endif ; windows
endif

if ($Flag_winst_opsiServiceCall$ = "on") or ($MasterFlag$ = "on")
	if ("%opsiserver%" = "192.168.1.14") or ("%opsiserver%" = "bonifax.uib.local") or ("%opsiserver%" = "172.16.166.1")
		comment "yes - we running in opsi mode at uib"
		
		Message "testing opsi service call"
		comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
		comment ""
		comment "testing opsi service call"
		comment ""
		comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
		Set $ExpectedResult$ = "o.k."
		set $TestResult$ = "o.k."
		set $adminuser_password$   = GetProductProperty ("adminuser_password", "linux123")
		
		;set $depotid$ = "bonifax.uib.local"
		;set $captureproduct$ = "win10-x64-1607-captured"
		;set $imagename$ = "imagename"
		;set $valuesListStr$ = '["Windows 10 Pro N","Windows 10 Home N","capture","capture1703"]'
		;
		;opsiServiceCall_set_imagelist
		
		
		markErrorNumber
		opsiservicecall_authenticated
		if errorsOccuredSinceMark > 0
			set $INST_error$ = "true"
			comment "was not authenticated "
		else
			Set $INST_ResultList$ = getReturnListFromSection('opsiservicecall_UserIsAdmin')
			if errorsOccuredSinceMark > 0
				set $INST_error$ = "true"
				comment "was not admin - normal if running as product (maschine account)"
			endif
		endif
		if $OS$ = "Windows_NT"
			if ("%opsiserver%" = "192.168.1.14") or ("%opsiserver%" = "bonifax.uib.local")
				if (takeString(0,$INST_ResultList$) = "false") or ($INST_error$ = "true")
					comment "was not authenticated as admin-> retry scripted login by default user/password"
					markErrorNumber
					set $INST_error$ = "false"
					opsiservicecall_authenticated  /serviceurl "https://bonifax:4447" /username "adminuser" /password $adminuser_password$
					if errorsOccuredSinceMark > 0
						set $INST_error$ = "true"
						comment "scripted login by default user/password failed -> retry interactive"
						opsiservicecall_authenticated /interactive /serviceurl "https://bonifax:4447"
					else
						markErrorNumber
						Set $INST_ResultList$ = getReturnListFromSection('opsiservicecall_UserIsAdmin')
						if errorsOccuredSinceMark > 0
							set $INST_error$ = "true"
							comment "check for user is admin failed failed -> retry interactive"
						endif
					endif
				endif
				comment "logged in as admin"
			endif ; uib office
		endif ; windows
		
		;opsiservicecall_authenticated /interactive /serviceurl "https://bonifax:4447"
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "opsiservicecall"
		if CompareDotSeparatedNumbers("%WinstVersion%","4.11.4") >= "0"
			set $ConstTest$ = "%opsiDepotId%"
			set $INST_ResultList$ = getReturnListFromSection('opsiservicecall_getDepotId')
			;set $list1$ = getReturnListFromSection('opsiservicecall_ServerIdsList /serviceurl "%opsiserviceURL%" /username "%hostId%" /password "%opsiservicePassword%"')
			set $CompValue$ = takeString(0, $INST_ResultList$)
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				LogWarning "failed"
				set $TestResult$ = "not o.k."
			endif
		endif
		
		if CompareDotSeparatedNumbers("%WinstVersion%","4.11.1.1") >= "0"
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "opsi-servicalls with wrong parameters - should not crash opsi-winst"
			set $INST_ResultList$ = getReturnListFromSection('opsiservicecall_getClientIds_list')
			set $CompValue$ = takeString(0, $INST_ResultList$)
			set $INST_ResultList$ = getReturnListFromSection('opsiservicecall_getSoftwareInformation_hash')
			set $CompValue$ = takeString(0, $INST_ResultList$)
			set $INST_ResultList$ = getReturnListFromSection('opsiservicecall_getProductInstallationStatus_listOfHashes')
			set $CompValue$ = takeString(0, $INST_ResultList$)
			comment "Testing setting installation state for not existing product"
			markErrorNumber
			set $INST_ResultList$ = getReturnListFromSection('opsiservicecall_setProductInstallationStatus')
			set $CompValue$ = takeString(0, $INST_ResultList$)
			if errorsOccuredSinceMark > 0
				comment $CompValue$
				comment "passed (expected Backend missing data error)"
			else
				LogWarning "unexpected behavior"
				LogWarning "failed"
				set $TestResult$ = "not o.k."
			endif
			
			
			comment "Testing service errors"
			markErrorNumber
			set $list1$ = getReturnListFromSection("opsiservicecall_getHostId")
			set $ErrorClientId$ = takestring(0, $list1$)
			if errorsOccuredSinceMark > 0
				comment $ErrorClientId$
				comment "passed (expected Hostname not given)"
			else
				LogWarning "unexpected behavior"
				LogWarning "failed"
				set $TestResult$ = "not o.k."
			endif
			markErrorNumber
			set $list1$ = getReturnListFromSection('opsiservicecall_getNetworkConfig_hash')
			set $ErrorClientId$ = takestring(0, $list1$)
			if errorsOccuredSinceMark > 0
				comment $ErrorClientId$
				comment "passed (expected Bad object id)"
			else
				LogWarning "unexpected behavior"
				LogWarning "failed"
				set $TestResult$ = "not o.k."
			endif
			
		else
			comment "opsi-servicalls with wrong parameters not tested, minimum winst needed: 4.11.1.1"
		endif
		
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "opsiservicecall with opsi 4 method"
		set $ConstTest$ = "bonifax.uib.local"
		if CompareDotSeparatedNumbers("%WinstVersion%","4.11.4") >= "0"
			set $ConstTest$ = "%opsiDepotId%"
		endif
		set $INST_ResultList$ = getReturnListFromSection('opsiservicecall_getDepotshares')
		comment " take the string :"
		set $CompValue$ = takeString(0, $INST_ResultList$)
		comment " remove trailing brackets and quote :"
		set $CompValue$ = takeString(0, splitstring($CompValue$,'"]'))
		comment " remove heading brackets and quote :"
		set $CompValue$ = takeString(1, splitstring($CompValue$,'["'))
		comment " split servers in to list :"
		set $INST_ResultList$ = splitstring($CompValue$,'","')
		set $CompValue$ = takefirststringcontaining($INST_ResultList$,$ConstTest$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			LogWarning "failed"
			set $TestResult$ = "not o.k."
		endif
		
		set $INST_ResultList$ = getReturnListFromSection('opsiservicecall_productOnClient_getObjects')
		
		if CompareDotSeparatedNumbers("%WinstVersion%","4.11.4.4") >= "0"
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "opsiservicecall with output and without getReturnListFromSection"
			opsiservicecall_getClientIds_list
			comment if not crashed - ok
			comment "passed"
		endif ; 4.11.4.4
		
		;comment ""
		;comment "-------------------------------------"
		;comment "Testing: "
		;message "opsiservicecall with opsi 4 method"
		;set $ConstTest$ = "bonifax"
		;set $INST_ResultList$ = getReturnListFromSection('opsiservicecall_getDepot_properties')
		;comment " take the string :"
		;set $CompValue$ = takeString(0, $INST_ResultList$)
		;comment " remove trailing brackets and quote :"
		;set $CompValue$ = takeString(0, splitstring($CompValue$,'"]'))
		;comment " remove heading brackets and quote :"
		;set $CompValue$ = takeString(1, splitstring($CompValue$,'["'))
		;comment " split servers in to list :"
		;set $INST_ResultList$ = splitstring($CompValue$,'","')
		;set $CompValue$ = takefirststringcontaining($INST_ResultList$,"bonifax")
		;if ($ConstTest$ = $CompValue$)
		;	comment "passed"
		;else
		;	LogWarning "failed"
		;	set $TestResult$ = "not o.k."
		;endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "opsiservicecall"
		set $list1$ = getOutStreamFromSection('DosInAnIcon_nslookup')
		set $ConstTest$ = takeFirstStringContaining($list1$,"Name:")
		set $ConstTest$ = takeString(1,splitstringOnWhitespace($ConstTest$))
		set $list1$ = getReturnListFromSection("opsiservicecall_ServerIdsList")
		set $CompValue$ = takeFirstStringContaining($list1$,$ConstTest$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			LogWarning "failed"
			set $TestResult$ = "not o.k."
		endif
		
		if ("%opsiserver%" = "192.168.1.14") or ("%opsiserver%" = "bonifax.uib.local")
			comment "We will get the property value from product: opsi-winst-test-followup and property: do_not_change"
			set $ConstTest$ = "expected value"
			Set $list$ = getReturnListFromSection('opsiservicecall_getProductProperties_hash')
			set $CompValue$ = takeFirstStringContaining($list$,"do_not_change")
			set $CompValue$ = takeString(1,splitString($CompValue$,'='))
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif ; uib offixe
		
		
		if $OS$ = "Windows_NT"
			if CompareDotSeparatedNumbers("%WinstVersion%","4.11.2.1") >= "0"
				comment ""
				comment "-------------------------------------"
				comment "Testing: "
				message "opsiservicecall /opsiclientd"
				; that does not work: The file will not be found
				;set $testfilepath$ = "%scriptpath%\'+$opsi_script_test_helper_bin$+'"
				;set $tmp$ = Convert2JsonStr($testfilepath$)
				;set $testfilepath$ = regstring($testfilepath$)
				;set $ConstTest$ = "opsiscripttesthelper.exe"
				;
				set $ConstTest$ = "notepad.exe"
				set $testfilepath$ = $ConstTest$
				killtask $ConstTest$
				opsiservicecall_opsiclientd_start_helper /opsiclientd
				set $list1$ = getProcessList
				set $CompValue$ = takeFirstStringContaining($list1$,$ConstTest$)
				set $CompValue$ = takeString(0,splitString($CompValue$,";"))
				killtask $ConstTest$
				if ($ConstTest$ = $CompValue$)
					comment "passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "failed"
				endif
				DosInAnIcon_kill_notepad
				opsiservicecall_authenticated /preloginservice
				opsiservicecall_authenticated
				
				if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.11.6.11")
					set $ConstTest$ = "notepad.exe"
					set $testfilepath$ = $ConstTest$
					killtask $ConstTest$
					opsiservicecall_opsiclientd_start_helper /opsiclientd-once
					set $list1$ = getProcessList
					set $CompValue$ = takeFirstStringContaining($list1$,$ConstTest$)
					set $CompValue$ = takeString(0,splitString($CompValue$,";"))
					killtask $ConstTest$
					if ($ConstTest$ = $CompValue$)
						comment "passed"
					else
						set $TestResult$ = "not o.k."
						LogWarning "failed"
					endif
					DosInAnIcon_kill_notepad
					opsiservicecall_authenticated
					
					set $ConstTest$ = "notepad.exe"
					set $testfilepath$ = $ConstTest$
					killtask $ConstTest$
					opsiservicecall_opsiclientd_start_helper /opsiclientd
					set $list1$ = getProcessList
					set $CompValue$ = takeFirstStringContaining($list1$,$ConstTest$)
					set $CompValue$ = takeString(0,splitString($CompValue$,";"))
					killtask $ConstTest$
					if ($ConstTest$ = $CompValue$)
						comment "passed"
					else
						set $TestResult$ = "not o.k."
						LogWarning "failed"
					endif
					DosInAnIcon_kill_notepad
					opsiservicecall /preloginservice
					opsiservicecall_authenticated
				endif
			endif
		endif ; windows
		
;opsiservicecall_authenticated /preloginservice
		
		
		sub_compareResult
		set $winst_opsiServiceCall$ = $SubResult$
	else
		comment "not running in opsi mode: opsi-servicecall not tested"
	endif
endif

if ($Flag_licensemanagement$ = "on") or ($MasterFlag$ = "on")
	Message "testing licensemanagement functions"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing licensemanagement functions"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	
	if ("%opsiserver%" = "192.168.1.14") or ("%opsiserver%" = "bonifax.uib.local") or ("%opsiserver%" = "172.16.166.1")
		;if "%opsiserver%" = "bonifax.uib.local"
		;if "true"="true"
		Set $ExpectedResult$ = "o.k."
		; start testing
		set $TestResult$ = "o.k."
		;opsiservicecall_authenticated  /serviceurl "https://bonifax:4447" /username "adminuser" /password $adminuser_password$
		; Chapter 6.3.12 (String- ) Functions for Licence Management
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		comment "opsiLicenseManagementEnabled"
		if opsiLicenseManagementEnabled
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		comment "DemandLicenseKey"
		Set $ConstTest$ = demandLicenseKey ($licensepool$)
		set $CompValue$ = "opsiscripttest-test-license-key"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $list1$ = getReturnListFromSection('opsiservicecall_licenseOnClient')
		comment " take the string :"
		set $tmp$ = takeString(0, $list1$)
		comment " remove trailing brackets and quote :"
		set $tmp$ = takeString(0, splitstring($tmp$,'"]'))
		comment " remove heading brackets and quote :"
		set $tmp$ = takeString(1, splitstring($tmp$,'["'))
		set $list1$ = splitstring($tmp$,";")
		comment "this should be the id of the license entry "
		set $ConstTest$ = takeString(0, $list1$)
		set $CompValue$ = "l_opsi-script-test-license"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		Set $ConstTest$ = demandLicenseKey ($licensepool$)
		set $list1$ = getReturnListFromSection('opsiservicecall_get_licensekey')
		set $CompValue$ = takeString(0, $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		comment "DemandLicenseKey"
		Set $ConstTest$ = demandLicenseKey ("",$Lic_ProductId$)
		set $CompValue$ = "opsiscripttest-test-license-key"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $list1$ = getReturnListFromSection('opsiservicecall_get_licensekey')
		set $CompValue$ = takeString(0, $list1$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		comment "FreeLicense"
		Set $ConstTest$ = FreeLicense($licensepool$)
		set $CompValue$ = ""
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $list1$ = getReturnListFromSection('opsiservicecall_licenseOnClient')
		comment " take the string :"
		set $tmp$ = takeString(0, $list1$)
		comment " remove trailing brackets and quote :"
		set $tmp$ = takeString(0, splitstring($tmp$,'"]'))
		comment " remove heading brackets and quote :"
		set $tmp$ = takeString(1, splitstring($tmp$,'["'))
		set $list1$ = splitstring($tmp$,";")
		comment "this should be the id of the license entry ans empty in this case"
		set $ConstTest$ = takeString(0, $list1$)
		set $CompValue$ = ""
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		comment "FreeLicense"
		Set $ConstTest$ = FreeLicense("",$Lic_ProductId$)
		set $CompValue$ = ""
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
; Chapter 6.3.13 Retrieving Error Infos from Service Calls
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		comment "getLastServiceErrorClass"
		Set $ConstTest$ = demandLicenseKey ("not-existing-license-pool")
		if getLastServiceErrorClass = "LicenseConfigurationError"
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		comment "getLastServiceErrorClass"
		Set $ConstTest$ = demandLicenseKey ("opsi-script-test-empty-pool")
		if getLastServiceErrorClass = "LicenseMissingError"
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
	endif
	
	; Chapter 6.3.13 Retrieving Error Infos from Service Calls
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	comment "getLastServiceErrorClass"
	if getLastServiceErrorClass = "None"
		comment "no error"
	else
		set $tmp$ = getLastServiceErrorClass
		comment "$tmp$"
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	comment "getLastServiceErrorMessage"
	if getLastServiceErrorMessage = "None"
		comment "no error"
	else
		set $tmp$ = getLastServiceErrorMessage
		comment "$tmp$"
	endif
	
	
	sub_compareResult
	set $winst_licensemanagement$ = $SubResult$
endif

if ($Flag_ProfileActions$ = "on") or ($MasterFlag$ = "on")
	Message "testing call of ProfleActions section"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing ProfleActions section"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	Set $ExpectedResult$ = "o.k."
	set $TestResult$ = "o.k."
	
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.2.1") >= "0"
		switch $OS$
			case "Windows_nt"
				ProfileActions
			endcase
			case "Linux"
				set $TestResult$ = "not implemented"
			endcase
			case "macos"
				set $TestResult$ = "not implemented"
			endcase
		endswitch
	endif
	
	sub_compareResult
	set $winst_ProfileActions$ = $SubResult$
endif


;$Flag_winst_dos$ = "on")
sub "%scriptpath%\sub-scripts\shellcall.opsiscript"

sub "%scriptpath%\sub-scripts\winbatch.opsiscript"

sub "%scriptpath%\sub-scripts\RunAsLoggedOnAdmin.opsiscript"

sub "%scriptpath%\sub-scripts\internalundocumented.opsiscript"

sub "%scriptpath%\sub-scripts\encodingtest.opsiscript"

sub "%scriptpath%\sub-scripts\jsontest.opsiscript"

sub "%scriptpath%\sub-scripts\crypttest.opsiscript"

sub "%scriptpath%\sub-scripts\xml2test.opsiscript"

sub "%scriptpath%\sub-scripts\registry.opsiscript"

if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.0.0")
	sub "%scriptpath%\sub-scripts\localfunctions.opsiscript"
endif

if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.0.16")
	sub "%scriptpath%\sub-scripts\powershelltest.opsiscript"
endif

if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.0.16")
	sub "%scriptpath%\sub-scripts\regex.opsiscript"
endif

if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.0.16")
	sub "%scriptpath%\sub-scripts\networkcalc.opsiscript"
endif

if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.0.16")
	sub "%scriptpath%\sub-scripts\urlparser.opsiscript"
endif


if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.1.0")
	sub "%scriptpath%\sub-scripts\macos.opsiscript"
endif


if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.1.0")
	sub "%scriptpath%\sub-scripts\wmitest.opsiscript"
endif

if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.3.9")
	sub "%scriptpath%\sub-scripts\var_as_param.opsiscript"
endif

DefFunc resultoutput( $name$ : string, $value$ : string) : void
	DefVar $space$
	DefVar $spacelength$
	
	set $spacelength$ = "35"
	set $spacelength$ = calculate($spacelength$+" - "+strLength($name$))
	for %runvar% = "1" to $spacelength$ do set $space$ = $space$ +" "
	if $value$ = "failed"
		;comment $name$ + $space$+"--> " + $value$
		LogError "  "+$name$ + $space$+"--> " + $value$
	else
		comment $name$ + $space$+"--> " + $value$
	endif
endfunc

comment ""
comment ""
comment ""
comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
comment "All sub results:"
comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
resultoutput("winst_calculate",$winst_calculate$)
resultoutput("winst_constants",$winst_constants$)
resultoutput("winst_controls",$winst_controls$)
resultoutput("winst_crypt",$winst_crypt$)
resultoutput("winst_encoding",$winst_encoding$)
resultoutput("execwith_test",$execwith_test$)
resultoutput("winst_file",$winst_file$)
resultoutput("infostest",$infostest$)
resultoutput("winst_jsonfunctions",$winst_jsonfunctions$)
resultoutput("winst_ldap_search",$winst_ldap_search$)
resultoutput("winst_licensemanagement",$winst_licensemanagement$)
resultoutput("winst_link_folder",$winst_link_folder$)
resultoutput("winst_local_functions",$winst_local_functions$)
resultoutput("winst_macos",$winst_macos$)
resultoutput("winst_opsiServiceCall",$winst_opsiServiceCall$)
resultoutput("winst_parametrizing",$winst_parametrizing$)
resultoutput("winst_patches",$winst_patches$)
resultoutput("winst_patch_hosts",$winst_patch_hosts$)
resultoutput("winst_patch_text_file",$winst_patch_text_file$)
resultoutput("winst_powershell",$winst_powershell$)
resultoutput("winst_ProfileActions",$winst_ProfileActions$)
resultoutput("winst_regex",$winst_regex$)
resultoutput("winst_networkcalc",$winst_networkcalc$)
resultoutput("winst_urlparser",$winst_urlparser$)
resultoutput("subregistry",$subregistry$)
resultoutput("winst_dos",$winst_dos$)
resultoutput("winst_string",$winst_string$)
resultoutput("winst_string_list",$winst_string_list$)
resultoutput("subtestsub",$subtestsub$)
resultoutput("winst_var_as_param",$winst_var_as_param$)
resultoutput("winst_winbatch",$winst_winbatch$)
resultoutput("winst_wmi",$winst_wmi$)
resultoutput("winst_xml",$winst_xml$)
resultoutput("winst_xml2",$winst_xml2$)
comment "--------------------------------"
resultoutput("compare_to_python",$compare_to_python$)
resultoutput("winst_internalundocumented",$winst_internalundocumented$)
resultoutput("winst_RunAsLoggedOnAdmin",$winst_RunAsLoggedOnAdmin$)
comment "--------------------------------"
;comment "$winst_calculate$            --> " + $winst_calculate$
;comment "$winst_constants$            --> " + $winst_constants$
;comment "$winst_controls$             --> " + $winst_controls$
;comment "$winst_crypt$                --> " + $winst_crypt$
;comment "$winst_encoding$             --> " + $winst_encoding$
;comment "$execwith_test$              --> " + $execwith_test$
;comment "$winst_file$                 --> " + $winst_file$
;comment "$infostest$                  --> " + $infostest$
;comment "$winst_jsonfunctions$        --> " + $winst_jsonfunctions$
;comment "$winst_ldap_search$          --> " + $winst_ldap_search$
;comment "$winst_licensemanagement$    --> " + $winst_licensemanagement$
;comment "$winst_link_folder$          --> " + $winst_link_folder$
;comment "$winst_local_functions$      --> " + $winst_local_functions$
;comment "$winst_macos$                --> " + $winst_macos$
;comment "$winst_opsiServiceCall$      --> " + $winst_opsiServiceCall$
;comment "$winst_parametrizing$        --> " + $winst_parametrizing$
;comment "$winst_patches$              --> " + $winst_patches$
;comment "$winst_patch_hosts$          --> " + $winst_patch_hosts$
;comment "$winst_patch_text_file$      --> " + $winst_patch_text_file$
;comment "$winst_powershell$           --> " + $winst_powershell$
;comment "$winst_ProfileActions$       --> " + $winst_ProfileActions$
;comment "$winst_regex$                --> " + $winst_regex$
;comment "$winst_networkcalc$          --> " + $winst_networkcalc$
;comment "$winst_urlparser$            --> " + $winst_urlparser$
;comment "$subregistry$                --> " + $subregistry$
;comment "$winst_dos$                  --> " + $winst_dos$
;comment "$winst_string$               --> " + $winst_string$
;comment "$winst_string_list$          --> " + $winst_string_list$
;comment "$subtestsub$                 --> " + $subtestsub$
;comment "$winst_var_as_param$         --> " + $winst_var_as_param$
;comment "$winst_winbatch$             --> " + $winst_winbatch$
;comment "$winst_wmi$                  --> " + $winst_wmi$
;comment "$winst_xml$                  --> " + $winst_xml$
;comment "$winst_xml2$                 --> " + $winst_xml2$
;comment "--------------------------------"
;comment "$compare_to_python$          --> " + $compare_to_python$
;comment "$winst_internalundocumented$ --> " + $winst_internalundocumented$
;comment "$winst_RunAsLoggedOnAdmin$   --> " + $winst_RunAsLoggedOnAdmin$
;comment "--------------------------------"
;comment "$winst_idapiconfig$          --> " + $winst_idapiconfig$

; at the end set the return value
comment ""
comment "======================================"
if $FinalResult$="failed"
	comment "Fatal: one ore more tests failed"
	Message "Fatal: one ore more tests failed"
	logError "Fatal: one ore more tests failed"
	isFatalError
else
	Message "All tests are passsed"
	comment "All tests are passsed"
endif
comment "======================================"
comment ""

[sub_executeTest]
if FileExists($AktTestSubScript$)
	Set $ExpectedResult$ = "o.k."
	sub $AktTestSubScript$
	sub_compareResult
else
	logError "Fatal: "+$AktTestSubScript$+" not found"
	isFatalError
endif

[sub_compareResult]
comment ""
comment "-------------------------------------"
comment "expectedResult is >" +  $ExpectedResult$ + "<"
comment "TestResult is >" +  $TestResult$ + "<"
if $ExpectedResult$ = $TestResult$
	set $SubResult$ ="passed"
	comment "OK: Subtest passed"
else
	if $TestResult$ = "not implemented"
		set $SubResult$ = $TestResult$
	else
		set $SubResult$ ="failed"
		logError "Fatal: Subtest failed"
		set $FinalResult$="failed"
	endif
endif
comment ""
comment ""


; getOutStreamFromSection aufrufe
[opsiservicecall_ServerIdsList]
"method":"getServerIds_list"
"params":[]

[opsiservicecall_get_licensekey]
"method":"getLicenseKey"
"params":[
	"$Lic_ProductId$",
	"%opsiServiceUser%"
	]

[opsiservicecall_licenseOnClient]
"method": "licenseOnClient_getIdents"
"params": [
					'[]',
					'{"clientId":"%opsiServiceUser%","licensePoolId": "$licensepool$"}',
		]

[opsiservicecall_getHostId]
"method": "getHostId"
"params": [ ]

[opsiservicecall_getNetworkConfig_hash]
"method": "getNetworkConfig_hash"
"params": [
	"$ErrorClientId$"
	]

[DosInAnIcon_read_cfg]
$HomeTestFiles$\testfiles\read_alias.exe dummyalias

[ldapsearch_groups]
targethost: bonifax
dn: $LdapSearchDn$
;dn: cn=opsiadmin,ou=Groups,dc=uib,dc=local
attributes: $LdapSearchAttributes$

[ldapsearch_users]
targethost: $LdapHost$
targetport: $LdapPort$
user: $LdapUser$
password: $LdapPassword$
dn: $LdapSearchDn$
attributes: $LdapSearchAttributes$
filter: $LdapFilter$


[XMLPatch_return_elements]
openNodeSet 'node_level-1_number-1 / node_level-2_A'
return elements

[XMLPatch_return_attributes]
openNodeSet 'node_level-1_number-1 / node_level-2_B'
return attributes

[XMLPatch_return_elementnames]
openNodeSet 'node_level-1_number-1 / node_level-2_A'
return elementnames

[XMLPatch_return_attributenames]
openNodeSet 'node_level-1_number-1 / node_level-2_B'
return attributenames

[XMLPatch_return_text]
openNodeSet 'node_level-1_number-1 / node_level-2_A /'
return text

[XMLPatch_return_counting]
openNodeSet 'node_level-1_number-1 / node_level-2_B'
return counting

[DosInAnIcon_GetOS]
@echo off
rem diese Batch prueft das OS
VER |find /i "Windows 95" >NUL
IF NOT ERRORLEVEL 1 GOTO 9598ME
VER |find /i "Windows 98" >NUL
IF NOT ERRORLEVEL 1 GOTO 9598ME
VER |find /i "Windows Millennium" >NUL
IF NOT ERRORLEVEL 1 GOTO 9598ME
VER | find "XP" > nul
IF %errorlevel% EQU 0 GOTO XP
VER | find "2000" > nul
IF %errorlevel% EQU 0 GOTO 2000
VER | find "NT" > nul
IF %errorlevel% EQU 0 GOTO NT
VER | find "Microsoft Windows [Version 6" > nul
IF %errorlevel% EQU 0 GOTO Vista
VER | find "Microsoft Windows [Version 5" > nul
IF %errorlevel% EQU 0 GOTO 2003
goto unknown
goto end
:unknown
echo unknown
goto end
:9598ME
echo 9598ME
goto end
:NT
echo NT
goto end
:2003
echo 2003
goto end
:2000
echo 2000
goto end
:XP
echo XP
goto end
:Vista
echo Vista
goto end
:end

[DosInAnIcon_time]
@echo off
"%ScriptPath%\$opsi_script_test_helper_bin$" --time-output
rem time /t

[ShellInAnIcon_time]
date "+%s"

[DosInAnIcon_retrieve_systemtype]
@echo off
wmic computersystem get systemtype

[DosInAnIcon_ipconfig_all]
@echo off
ipconfig /all

[ShellInAnIcon_ifconfig_all]
ifconfig -a

[DosInAnIcon_getFreeSpace]
@echo off
wmic LogicalDisk "%Systemdrive%" get freespace

[DosInAnIcon_getTask]
@echo off
tasklist /FI "IMAGENAME eq notepad.exe"

[DosInAnIcon_dummy_receivesection]
@echo off
c:

[DosInAnIcon_dummy_getOutStreamFromSection]
@echo off
wmic os get manufacturer

[DosInAnIcon_LastWriteTime]
@echo off
c:
cd $HomeTestFiles$\testFiles
dir

[execwith_hello]
import sys
a = "%scriptpath%"
print "we are working in path: ", a
print "host ID is", "%hostID%"
if len(sys.argv) > 1 :
	for arg in sys.argv[1:] :
		print arg
else:
	print "no arguments"

print "the current loglevel is ", "$loglevel$"

print "hello"

[execpython_hello]
import sys
a = "%scriptpath%"
print "we are working in path: ", a
print "host ID is", "%hostID%"
if len(sys.argv) > 1 :
	for arg in sys.argv[1:] :
		print arg
else:
	print "no arguments"

print "the current loglevel is ", "$loglevel$"
print "hello"

;----------------   start   general helpers ---------------------------------

[Files_testFiles]
checkTargetPath = "$HomeTestFiles$"

;----------------   end   general helpers ---------------------------------
;----------------   start   sections for constant test ---------------------------------
[DosInAnIcon_set]
set

[sub_current_path]
set $tmp$ = "%CurrentAppdataDir%"
set $tmp$ = "%CurrentStartmenuDir%"
set $tmp$ = "%CurrentDesktopDir%"
set $tmp$ = "%CurrentStartupDir%"
set $tmp$ = "%CurrentProgramsDir%"
set $tmp$ = "%CurrentSendToDir%"

[sub_check_key_value_constants]
set $ConstTest$ = "%key%"
set $CompValue$ = getValue("%key%",$list$)
if ($ConstTest$ = $CompValue$)
	comment "passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "failed"
endif

;----------------   end   sections for constant test ---------------------------------
;----------------   start   sections for parametrizing test ---------------------------------

[DosInAnIcon_echo]
echo "original section"

;----------------   end   sections for parametrizing test ---------------------------------
;----------------   start   sections for string test ---------------------------------

[sub_random_pass_test]
set $tmp$ = randomstr
if $OS$ = "Windows_NT"
	dosInAnIcon_setpass
endif

[dosInAnIcon_setpass]
net user opsitest $tmp$ /add
net user opsitest /delete

[Winbatch_exitcode_43_noquote_with_param]
%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$ --exit-code=43


;----------------   end   sections for string test ---------------------------------
;----------------   start   sections for info map test ---------------------------------
[sub_showEntry]
set $key$ = TakeString(0, splitstring("%line%", "="))
set $value$ = getValue($key$, $INST_Resultlist$)
comment "value for key '" +$key$ + "' : '" + $value$ + "'"

[DosInAnIcon_helper_version]
@echo off
"%ScriptPath%\$opsi_script_test_helper_bin$" --version

;----------------   end   sections for info map test ---------------------------------
;----------------   start   sections for string list test ---------------------------------
[Files_copy_dummy]
copy "%ScriptPath%\test-files\string\dummy.txt" $HomeTestFiles$
copy "%ScriptPath%\test-files\string\dummyUTF-8y.txt" $HomeTestFiles$
copy "%ScriptPath%\test-files\string\dummyUTF-16.txt" $HomeTestFiles$

[Files_copy_for_filelist]
copy -s "%ScriptPath%\test-files\string\*.*" $HomeTestFiles$
copy -s "%ScriptPath%\test-files\encoding\*.*" $HomeTestFiles$
copy -s "%ScriptPath%\test-files\testfiles\*.*" $HomeTestFiles$

[DosInAnIcon_netstat]
@echo off
netstat -n

[sub_iteration_test]
set $CompValue$ = $CompValue$ + '%s%'

[sub_subsubiteration_test1]
sub_subsubiteration_test2

[sub_subsubiteration_test2]
set $CompValue$ = $CompValue$ + '%s%'

[Files_del_iteration_txt]
delete "$HomeTestFiles$\iteration.txt"

[DosInAnIcon_iteration_test]
echo %s%>> "$HomeTestFiles$\iteration.txt"

[ShellInAnIcon_Linux_iteration_test]
set -x
echo %s%>> "$HomeTestFiles$/iteration.txt"

[sub_getprocess_by_shortcommand]
;comment " shortcommand gives only the first 15 chars)"
if strPart($ConstTest$,"1","15") = takeString(0,splitString("%aktprocess%",";"))
	;comment "process found"
	if "0" = strPos(takeString(3,splitString("%aktprocess%",";")),"<defunct>")
		comment "process found that is not killed or defunct"
		set $CompValue$ = takeString(0,splitString("%aktprocess%",";"))
	else
		comment "process is killed or defunct"
		;set $CompValue$ = ""
	endif
endif

[sub_getprocess_by_command]
;comment " shortcommand gives only the first 15 chars)"
if $ConstTest$ = takeString(0,splitString("%aktprocess%",";"))
	;comment "process found"
	if "0" = strPos(takeString(3,splitString("%aktprocess%",";")),"<defunct>")
		comment "process found that is not killed or defunct"
		set $CompValue$ = takeString(0,splitString("%aktprocess%",";"))
	else
		comment "process is killed or defunct"
		;set $CompValue$ = ""
	endif
endif

[DosInAnIcon_ListFiles_Test1]
@echo off
cd $HomeTestFiles$
dir /a-d /b *.*

[ShellInAnIcon_ListFiles_Test1]
cd $HomeTestFiles$
ls -p | grep -v /

;[DosInAnIcon_ListFiles_Test2]
;@echo off
;cd $HomeTestFiles$
;dir *.* /A-D /B                                              

[DosInAnIcon_ListFiles_Test3]
@echo off
cd $HomeTestFiles$
dir /s /b *.exe

[ShellInAnIcon_ListFiles_Test3]
cd $HomeTestFiles$
find . -name "*.exe"

;[DosInAnIcon_ListFiles_Test4]
;@echo off
;cd $HomeTestFiles$
;dir *.txt /A-D /B

[DosInAnIcon_ListFiles_Test5]
@echo off
cd $HomeTestFiles$
dir /b encode-cp866.opsiscript

[ShellInAnIcon_ListFiles_Test5]
cd $HomeTestFiles$
find . -name "encode-cp866.opsiscript"

[DosInAnIcon_ListFiles_Test6]
@echo off
cd %System%
dir *.* /A-D /B

;----------------   end   sections for string list test ---------------------------------
;----------------   start   sections for controls test ---------------------------------
;[Files_empty_folder]
;del -f "$HomeTestFiles$\files\symlink.txt"
;Del -s -f $HomeTestFiles$

;[Files_empty_folder2]
;del -f "$HomeTestFiles$\files\symlink.txt"

[WinBatch_prepare_killtask]
notepad.exe

[WinBatch_prepare_killtask_lin]
ping localhost

[DosInAnIcon_prepare_fileExists]
c:
mkdir $HomeTestFiles$
cd $HomeTestFiles$
echo dummy> dummy.txt

[ShellInAnIcon_prepare_fileExists]
mkdir -p $HomeTestFiles$
cd $HomeTestFiles$
echo dummy> dummy.txt

[ExecWith_autoit_opsiservicecall_interactive]
; waiting for the window
WinWait("DialogServicePassword")
; activating
WinActivate("DialogServicePassword")
;send ("{TAB}")
;send ("{TAB}")
; enter serviceurl
;send ("https://bonifax:4447")
;send ("%opsiserviceURL%")
;send ("{TAB}")
; enter username
send ("praktikant1.uib.local")
;send ("%hostId%")
send ("{TAB}")
; enter password
send ("51a7d4c24ae7586cac97d68f84cd2fdf")
;send ("%opsiservicePassword%")
;send ("{TAB}")
send ("{ENTER}")

[DosInAnIcon_nslookup]
@echo off
nslookup %opsiserver%

[execwith_autoit_close_trace_window]
; waiting for the window
WinWait("$opsi_message_title$","comment: in trace window")
Sleep(500)
; activating
WinActivate("$opsi_message_title$","comment: in trace window")
send ("!o")
WinWait("$opsi_message_title$","comment: in trace window")
Sleep(500)
; activating
WinActivate("$opsi_message_title$","comment: in trace window")
send ("!o}")
WinWait("$opsi_message_title$","comment: should be turned off by autoit")
Sleep(500)
; activating
WinActivate("$opsi_message_title$","comment: should be turned off by autoit")
Sleep(500)
send ("!e")
exit

;[Execwith_autoit_close_showmessage]
;Func opsiwinwait($title, $text, $maxseconds, $logname)
;	Local $exists = 0
;	Local $seconds = 0
;	Local $mylog
;	$mylog = FileOpen($logname, 1)
;	While ($seconds <= $maxseconds) and ($exists = 0)
;		$exists = WinExists($title , $text)
;		FileWriteLine($mylog,"win: " & $title & " ; " & $text & " exists result (1=exists): " & $exists )
;		$seconds = $seconds + 1
;		sleep(1000)
;	WEnd
;	FileClose($mylog)
;EndFunc
;
;
;Func opsiControlClick($title, $text, $id, $maxseconds, $logname)
;	Local $result = 0
;	Local $seconds = 0
;	Local $mylog
;	$mylog = FileOpen($logname, 1)
;	While ($seconds <= $maxseconds) and ($result = 0)
;		$result = ControlClick($title , $text,$id)
;		FileWriteLine($mylog,"answer for " & $title & " ; " & $text & " id: " & $id & " sended: result (1=success) : " & $result)
;		$seconds = $seconds + 1
;		sleep(500)
;	WEnd
;	FileClose($mylog)
;EndFunc
;
;; exact title match
;Opt("WinTitleMatchMode", 3)
;$mylog = FileOpen("%opsiLogDir%\au3.log", 2)
;FileWriteLine($mylog,"auto-it started - waiting for the window")
;FileClose($mylog)
;opsiwinwait("Systeminfo" , "", 200, "%opsiLogDir%\au3.log")
;opsiControlClick("Systeminfo" , "", "[CLASS:Button; INSTANCE:1]", 10, "%opsiLogDir%\au3.log")
;Sleep(500)
;;and good bye
;Exit

[Execwith_autoit_close_showmessage]
#include "%scriptpath%\autoitlib\opsi-autoit-lib.au3"
; exact title match
Opt("WinTitleMatchMode", 3)
$winhandle = 0
$hTimer = TimerInit()
$mylog = FileOpen("%opsiLogDir%\au3.log", 2)
FileWriteLine($mylog,"auto-it started - waiting for the window")
FileClose($mylog)
opsiLogWinList("%opsiLogDir%\au3.log")
opsiwinwait("Systeminfo" , "", 30, "%opsiLogDir%\au3.log")
$winhandle = opsiwinactivate("Systeminfo" , "", 20, "%opsiLogDir%\au3.log")
WinSetState($winhandle, "",@SW_MAXIMIZE)
opsiControlClick("Systeminfo" , "", "[CLASS:Button; INSTANCE:1]", 10, "%opsiLogDir%\au3.log")
opsiLogWinList("%opsiLogDir%\au3.log")
Sleep(500)
;and good bye
Exit


[DosInAnIcon_getTask_autoit3]
@echo off
tasklist /FI "IMAGENAME eq autoit3.exe"

[DosInAnIcon_dir]
@echo off
rem this should print the working directory:
echo %cd%

[ShellInAnIcon_dir]
# this should print the working directory:
pwd

[execwith_autoit_close_helper]
WinWait("opsi-helper-child","")
; activating
WinActivate("opsi-helper-child","")
send ("{TAB}")
send ("{ENTER}")
exit

[dosbatch_profiledir]
@echo off
dir "%systemroot%" /b

[sub_file_exists]
Set $tmp$ = "%systemroot%\"+"$x$"+"\Mozilla\Firefox\profiles.ini"
if FileExists($tmp$)
	comment "found"
else
	comment "not found"
endif

[opsiServiceCall_setFollowUp]
"method": "setProductActionRequest"
"params": [
					 "opsi-winst-test-followup",
					 "%HostID%",
					 "setup"
					]


;----------------   end   sections for controls test ---------------------------------
;----------------   start   sections for sub test ---------------------------------
[sub_testsub1]
comment "testsub1 running"
set $TestResult$=$TestResult$+"1"
sub_testsub2

[sub_testsub2]
comment "testsub2 running"
set $TestResult$=$TestResult$+"2"

[sub_giveString]
comment "test sub_giveString " + "%letter%"
set $TestResult$=$TestResult$+"5"
;----------------   end   sections for sub test ---------------------------------
;----------------   start   sections for patches test ---------------------------------
[DosInAnIcon_create_ini]
c:
mkdir $HomeTestFiles$
cd $HomeTestFiles$
del dummy.ini

[ShellInAnIcon_create_ini]
set -x
mkdir -p "$HomeTestFiles$"
cd "$HomeTestFiles$"
rm dummy.ini

[Patches_dummy_ini]
add [secdummy] dummy1=add1
; will be overwritten by other functions
add [secdummy] dummy2=add2
add [secdummy] dummy3=add3
add [secdummy] dummy4=add4
add [secdummy] dummy5=add5
add [secdummy] dummy6=add6
add [secdüöä] dümmy7=üöäßÜÖÄ

set [secdummy] dummy2=set1
addnew [secdummy] dummy1=addnew1
change [secdummy] dummy3=change1
del [secdummy] dummy4
Replace dummy6=add6 replace1=replace1

[Patches_dummy_ini_delsec]
delsec $SectionName$

[Files_remove_folder]
Delete -s -f $HomeTestFiles$

[Files_remove_profile_ini]
del "%userprofiledir%\opsi-winst-test.ini"

[sub_check_profile_ini]
set $ConstTest$ = "add1"
Set $CompValue$ = GetValueFromInifile("%s%\opsi-winst-test.ini", "secdummy", "dummy1", "failed")
if ($ConstTest$ = $CompValue$)
	comment "GetValueFromInifile passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "Patches /AllNTUserProfiles"
endif

;----------------   end   sections for patches test ---------------------------------
;---------------- start sections for patch hosts test ---------------------------

[DosInAnIcon_create_hosts]
c:
mkdir $HomeTestFiles$
cd $HomeTestFiles$
;true 2 > hosts
echo :ipAdresse      Hostname       Aliasname(n)       # Kommentar > hosts

[ShellInAnIcon_create_hosts]
set -x
mkdir -p "$HomeTestFiles$"
cd "$HomeTestFiles$"
echo "ipAdresse      Hostname       Aliasname(n)       # Kommentar" > hosts


[PatchHosts_add]
setAddr ServerNo1.mydom.org 111.111.111.111
setName 111.111.111.111 ServerNo1.mydom.org
setName 222.222.222.222 ServerNo2.mydom.org
setAddr ServerNo2.mydom.org 222.222.222.222
setAlias ServerNo1.mydom.org myServerNo1
setAlias 222.222.222.222 myServerNo2
setComment myServerNo2 Hello World

[PatchHosts_delete]
delalias ServerNo1.mydom.org myServerNo1
delalias 222.222.222.222 myServerNo2
delhost ServerNo2.mydom.org
delhost 111.111.111.111

[Files_copy_vmnat_hosts]
copy "%ScriptPath%\test-files\hosts\*.*" $HomeTestFiles$

[PatchHosts_vmnat]
delhost 172.16.166.1
delhost %opsiServiceUser%
setname 172.16.166.1 %PCName%.vmnat.local
setalias 172.16.166.1 %PCName%
setName 172.16.166.101 sles.vmnat.local
setName 172.16.166.102 win7.vmnat.local
setName 172.16.166.103 win7x64.vmnat.local
setName 172.16.166.104 wanclient.vmnat.local
setName 172.16.166.105 depotclient.vmnat.local
setName 172.16.166.106 local-image.vmnat.local
setName 172.16.166.107 win10x32.vmnat.local
setName 172.16.166.108 win10x64.vmnat.local
setName 172.16.166.109 ubuntu.vmnat.local
setName 172.16.166.110 debian.vmnat.local
setName 172.16.166.111 ucs-master.vmnat.local
setName 172.16.166.112 opensuse.vmnat.local
setName 172.16.166.114 centos.vmnat.local
setName 172.16.166.115 fedora.vmnat.local
setName 172.16.166.116 redhat.vmnat.local
setName 172.16.166.117 ucs-slave.vmnat.local
setName 172.16.166.118 ucs-member.vmnat.local
setName 172.16.166.119 win7x64cap.vmnat.local
setName 172.16.166.121 win10x64cap.vmnat.local
setName 172.16.166.150 depotserver.vmnat.local
setAlias 172.16.166.101 sles
setAlias 172.16.166.102 win7
setAlias 172.16.166.103 win7x64
setAlias 172.16.166.104 wanclient
setAlias 172.16.166.105 depotclient
setAlias 172.16.166.106 local-image
setAlias 172.16.166.107 win10x32
setAlias 172.16.166.108 win10x64
setAlias 172.16.166.109 ubuntu
setAlias 172.16.166.110 debian
setAlias 172.16.166.111 ucs-master
setAlias 172.16.166.112 opensuse
setAlias 172.16.166.114 centos
setAlias 172.16.166.115 fedora
setAlias 172.16.166.116 redhat
setAlias 172.16.166.117 ucs-slave
setAlias 172.16.166.118 ucs-member
setAlias 172.16.166.119 win7x64cap
setAlias 172.16.166.121 win10x64cap
setAlias 172.16.166.150 depotserver



[PatchHosts_system_add]
setAddr opsi-script-test 1.2.3.4

[PatchHosts_system_delete]
delhost opsi-script-test

[DosInAnIcon_hosts_ping]
ping opsi-script-test -n 1

[ShellInAnIcon_hosts_ping]
ping -c 1 opsi-script-test

;---------------- end sections for patch hosts test ---------------------------
;;---------------- start sections for idapiconfig test ---------------------------
;[IdapiConfig_winsttest]
;alias:opsiwinst
;driver:dbase
;;parametername=parameterwert
;TYPE=Standard
;PATH=C:\opsi.org\Daten
;DEFAULT DRIVER=dbase
;setalias
;;---------------- end sections for idapiconfig test ---------------------------
;---------------- start sections for patch textfile test ---------------------------

[sub_check_profile_txt]
set $list2$ = loadTextFile("%s%\opsi-winst-test\dummy.txt")
Set $CompValue$ = takeFirstStringContaining($list2$, $ConstTest$)
;if $tmp$ = "0"
;	Set $CompValue$ = takeString(0, $list2$)
;endif
;if $tmp$ = "1"
;	Set $CompValue$ = takeString(1, $list2$)
;endif
;if $tmp$ = "3"
;	Set $CompValue$ = takeString(3, $list2$)
;endif
;if $tmp$ = "6"
;	Set $CompValue$ = takeString(6, $list2$)
;endif
if ($ConstTest$ = $CompValue$)
	comment "passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "failed: PatchText /AllNTUserProfiles"
endif

[Files_profile_copy]
;copy "%Scriptpath%\profiles\*.*" "%CurrentAppdataDir%\ACME"
copy "%ScriptPath%\test-files\PatchTextFile\*.*" "%userprofiledir%\opsi-winst-test"

[Files_profile_del]
;del -s -f "%CurrentAppdataDir%\ACME"
del "%userprofiledir%\opsi-winst-test.ini"
del -s -f -c "%userprofiledir%\opsi-winst-test"

[Files_copy_patchtextfile]
copy "%ScriptPath%\test-files\PatchTextFile\*.*" $HomeTestFiles$

[Files_empty_folder]
Delete -s -f -c $HomeTestFiles$

[Files_copy_patchtextfile_system]
copy "%ScriptPath%\test-files\PatchTextFile\*.*" "%system%\opsi-script-test"

[Files_empty_folder_system]
Delete -s -f -c "%system%\opsi-script-test"


[PatchTextFile_Set_Netscape_User_Pref]
Set_Netscape_User_Pref ("browser.startup.homepage", "http://uib.de")

[PatchTextFile_AddStringListElement_To_Netscape_User_Pref]
AddStringListElement_To_Netscape_User_Pref ("intl.charsetmenu.browser.cache", "UTF-16, UTF-32")

[PatchTextFile_Set_Mozilla_pref_Pref]
Set_Mozilla_Pref ("user_pref","key.1", "http://opsi.org")
Set_Mozilla_Pref ("pref","key.2", "http://opsi.org")
Set_Mozilla_Pref ("lock_pref","key.3", "http://opsi.org")
Set_Mozilla_Pref ("foobar","key.4", "http://opsi.org")

[PatchTextFile_AddStringListElement_To_Mozilla_Pref]
AddStringListElement_To_Mozilla_Pref("user_pref","network.proxy.no_proxies_on", "opsi.org")

[PatchTextFile_AdvanceLine_DeleteTheLine]
AdvanceLine 1
DeleteTheLine

[PatchTextFile_findLine]
FindLine "Line containing dummy1."
DeleteTheLine

[PatchTextFile_FindLine_StartingWith]
FindLine_StartingWith "Additional"
DeleteTheLine

[PatchTextFile_FindLine_Containing]
FindLine_Containing "dummy2"
DeleteTheLine

[PatchTextFile_GoToTop]
GoToTop
AdvanceLine 1
DeleteTheLine

[PatchTextFile_GoToBottom]
GoToBottom
DeleteTheLine

[PatchTextFile_AddLine]
GoToBottom
AddLine "Line added by winst"

[PatchTextFile_InsertLine]
GoToBottom
InsertLine "Line inserted by winst"

[PatchTextFile_AppendLine]
GoToBottom
AppendLine "Line appended by winst"

[PatchTextFile_Append_File]
Append_File "$HomeTestFiles$\fileappend.txt"

[PatchTextFile_Subtract_File]
Subtract_File "$HomeTestFiles$\filesubstract.txt"

[PatchTextFile_SaveToFile]
SaveToFile "$HomeTestFiles$\savetofile.txt"

[PatchTextFile_Sorted]
AddLine "Line0appendbyFile"
AddLine "Line4appendbyFile"
sorted

[PatchTextFile_setvalues]
setValueByKey "newkey" "onTop"
setValueByKey "set me to no" "no"
setKeyValueSeparator ":"
setValueByKey "divided by a colon" "java!"
setKeyValueSeparator ">"
setValueByKey "divided by a greater-than sign" "great"
setKeyValueSeparator "="
setValueByKey  "tight" "so_tight"
setValueByKey  "comment" "no"
GoToBottom
setValueByKey "newkey2" "atBottom"

[PatchTextFile_searchAndReplace]
searchAndReplace "java" "lazarus"

[PatchTextFile_vmnet8_config]
GoToTop
FindLine_StartingWith "# Virtual ethernet segment 8"
FindLine_StartingWith "subnet"
DeleteTheLine
InsertLine "subnet 172.16.116.0 netmask 255.255.255.0 {"

FindLine_Containing "range"
DeleteTheLine
InsertLine "#range 172.16.116.128 172.16.116.254;            # default allows up to 125 VM's"

FindLine_StartingWith "option broadcast-address"
DeleteTheLine
InsertLine "option broadcast-address 172.16.116.255;"

FindLine_StartingWith "option domain-name-servers"
DeleteTheLine
InsertLine "option domain-name-servers 172.16.116.2;"

FindLine_StartingWith "option netbios-name-servers"
DeleteTheLine
InsertLine "option netbios-name-servers 172.16.116.2;"

FindLine_StartingWith "option routers"
DeleteTheLine
InsertLine "option routers 172.16.116.2;"

FindLine_Containing "fixed-address"
DeleteTheLine
InsertLine "    fixed-address 172.16.116.1;"

Subtract_File "$HomeTestFiles$\vmnet8-target.txt"

[PatchTextFile_Append_File_prof]
Append_File "%userprofiledir%\opsi-winst-test\fileappend.txt"

[PatchTextFile_Subtract_File_prof]
Subtract_File "%userprofiledir%\opsi-winst-test\filesubstract.txt"

[PatchTextFile_SaveToFile_prof]
SaveToFile "%userprofiledir%\opsi-winst-test\savetofile.txt"



;----------------  end  sections for patch textfile test ---------------------------------
;----------------  start  sections for linkfolder test ---------------------------------
[Files_delete_linkFolder]
Delete -s -f $tmp$

[Files_delete_linkFolder2]
Del $tmp$

[LinkFolder_del_Dummy]
set_basefolder $var$
set_subfolder ""
delete_element $string1$

[LinkFolder_Dummy2]
set_basefolder $var$
set_subfolder ""
set_link
	name: Dummy
	target: $target$
	;parameters:
	working_dir: $workdir$
	;icon_file:
	;icon_index:
end_link


[LinkFolder_Dummy]
set_basefolder $var$
set_subfolder "Dummy"
set_link
	name: Dummy
	target: $target$
	parameters:
	working_dir: $workdir$
	icon_file:
	icon_index:
end_link


;----------------  end  sections for linkfolder test ---------------------------------
;----------------   start   sections for registry test ---------------------------------
;
;[sub_retrieve_registry_data]
;if $INST_SystemType$ = "64 Bit System"
;	set $INST_ResultList$ = getOutStreamFromSection("execWith_reg_query '%SystemRoot%\cmd64.exe' /C")
;	for $s$ in $INST_ResultList$ do sub_fetch_SearchResult
;else
;	set $INST_SearchResult$ = GetRegistryStringValue("["+$INST_SearchKey$+"] "+$INST_SearchValue$)
;endif
;
[execWith_reg_query]
@echo off
reg query "$INST_SearchKey$" /v "$INST_SearchValue$"

;[sub_fetch_SearchResult]
;set $INST_ResultList2$ = splitStringOnWhiteSpace("$s$")
;if $INST_SearchValue$ = takeString(1,$INST_ResultList2$)
;	if not (takeString(3,$INST_ResultList2$) = "")
;		set $INST_ResultList3$ = getSublist(3:, $INST_ResultList2$)
;		set $INST_SearchResult$ = composeString($INST_ResultList3$," ")
;	else
;		set $INST_SearchResult$ = ""
;	endif
;endif
;
;[Registry_createkeys]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test]
;set "var1" = "value1"
;set "var2" = "value2"
;set "var3" = "value3"
;set "var4" = "value4"
;set "var5" = REG_SZ:"value5"
;set "var6" = REG_EXPAND_SZ:"value6"
;set "var7" = REG_DWORD:777
;set "var8" = REG_BINARY:08 08 08 0F 10
;set "var9" = REG_MULTI_SZ:"value9|value10|de"
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test\.a\b]
;set ""="C:\Program files\test\test.exe -a"
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test\key1]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test\key2]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test\key3]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test\key4]
;
;[Registry_deleteKey]
;deletekey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test\.a]
;
;[Registry_deleteKey_winst_test]
;deletekey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\winst-test]
;
;[Registry_Add]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test]
;Add "test"=REG_EXPAND_SZ:"value"
;
;[Registry_Supp]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test]
;supp "test" ; "value1;value2;value3;"
;
;[Registry_Supp1]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test]
;supp "test" ; "value2"
;
;[Registry_set4supp]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test]
;set "test"=REG_EXPAND_SZ:"C:\Program Files\CyberSafe\bin;C:\Program Files (x86)\CyberSafe\bin;C:\Oracle\product\11.2.0\client_1\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Gupta Framework;C:\PGIM\PlantConnect.BIN\System;C:\PGIM\PlantConnect.BIN\Signalexplorer;C:\PGIM\PlantConnect.BIN\Events\Client;C:\Program Files (x86)\Enterprise Vault\EVClient"
;
;[Registry_Supp2]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test]
;supp "test" ; "C:\Program Files (x86)\Java\jre8\bin"
;
;[Registry_set4supp3]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test]
;set "test"=REG_EXPAND_SZ:"$systemroot$;$systemroot$\system32"
;
;
;[Registry_Supp3]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test]
;supp "test" ; "$systemroot$\System32\Wbem"
;
;
;[Registry_GetMultiSZFromFile]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test]
;GetMultiSZFromFile "test2" "%ScriptPath%\test-files\reg_multisz_text.txt"
;
;[Registry_SaveValueToFile]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test]
;SaveValueToFile "test" "$HomeTestFiles$\SaveValueToFile.txt"
;
;[Registry_DeleteVar]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test]
;DeleteVar "test"
;DeleteVar "test2"
;
;[Files_delete_SaveValueToFile_txt]
;Delete -f "$HomeTestFiles$\SaveValueToFile.txt"
;
;[Registry_opsi_org_test]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test\test-4.0]
;set ""="standard entry"
;set "bitByWinst"="$regWriteValue$"
;set "str_bywinst"=REG_SZ:"my string"
;set "str_bywinst_with_%"="string with no percent char set without explicit data type will be written as string"
;set "str_bywinst_with_%"="string with % set without explicit data type and will so be changed to expand_string"
;set "str_bywinst_with_%"=REG_SZ:"string with % set with explicit data type string "
;set "strexpand_bywinst"=REG_EXPAND_SZ:"%programfiles%"
;set "dword_test1"= REG_DWORD:10
;set "dword_test2"= REG_DWORD:0xA
;set "dword_test3"= REG_DWORD:0x0A
;set "dword_test4"= REG_DWORD:$0A
;set "binary_bywinst"=REG_BINARY:00 FF
;set "binary_empty_bywinst"=REG_BINARY:
;set "multi_sz_bywinst" = REG_MULTI_SZ:"A|BC|de"
;
;[Registry_set_quoted_string]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test\quoted]
;set "quoted"="$tmp$"
;
;[Registry_createkeys_with_brackets]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test\[brackets]]
;set "entry1"="myentry1"
;
;[Registry_deletekeys_with_brackets]
;deletekey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test\[brackets]]
;
;[Registry_opsi_org_delete_test]
;deletekey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test]
;
;
;[ExecWith_opsi_org_test]
;reg add "HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test\test-4.0" /v "bitByReg" /t REG_SZ /d "$regWriteValue$" /f
;
;[Registry_hkcu_opsi_org_test]
;openkey [SOFTWARE\opsi.org\opsi-winst-test]
;set "bitByWinst"="$regWriteValue$"
;
;[Registry_hkcu_opsi_org_deletekey]
;openkey [SOFTWARE\opsi.org\opsi-winst-test\deleteme]
;deletekey [SOFTWARE\opsi.org\opsi-winst-test\deleteme]
;
[Registry_hkcu_complete_opsi_org_test]
openkey [HKEY_CURRENT_USER\SOFTWARE\opsi.org\opsi-winst-test]
set "bitByWinst"="$regWriteValue$"
openkey [HKEY_CURRENT_USER\SOFTWARE\opsi.org\opsi-winst-test\.a\b]
set "bitByWinst"="$regWriteValue$"
openkey [HKEY_CURRENT_USER\SOFTWARE\opsi.org\opsi-winst-test\.a\b\c]
set "bitByWinst"="$regWriteValue$"


[Registry_hkcu_complete_opsi_org_deletekey]
openkey [HKEY_CURRENT_USER\SOFTWARE\opsi.org\opsi-winst-test\deleteme]
deletekey [HKEY_CURRENT_USER\SOFTWARE\opsi.org\opsi-winst-test\deleteme]
;
;[DosInAnIcon_export_hkcu_complete_opsi_org_test]
;@echo off
;regedit /e "$HomeTestFiles$\hkcu_complete_opsi_org_test.reg" HKEY_CURRENT_USER\SOFTWARE\opsi.org\opsi-winst-test
;
;[Registry_hkcu_userclasses_create_test]
;openkey [HKEY_CURRENT_USER\Software\Classes\opsi-winst-test\.a\b]
;set "bitByWinst"="$regWriteValue$"
;
;[Registry_hkcu_userclasses_delete_test]
;deletekey [HKEY_CURRENT_USER\Software\Classes\opsi-winst-test]
;
;[Registry_hkcu_userclasses_createkey]
;openkey [HKEY_CURRENT_USER\Software\Classes\opsi-winst-test]
;set "bitByWinst"="$regWriteValue$"
;
;[Registry_hkcu_userclasses_deletekey]
;deletekey [HKEY_CURRENT_USER\Software\Classes\opsi-winst-test\.a]
;
;
;[Registry_hack_forbidden_key]
;openkey [HKLM\SYSTEM\ControlSet001\Control\Network\NetworkLocationWizard]
;set "HideWizard" = REG_DWORD:0x1
;DeleteVar "HideWizard"
;
;[winbatch_hack_forbidden_key1]
;reg add "HKLM\SYSTEM\ControlSet001\Control\Network\NetworkLocationWizard" /v "HideWizard" /t REG_DWORD /d "1" /f
;
;[winbatch_hack_forbidden_key2]
;reg delete "HKLM\SYSTEM\ControlSet001\Control\Network\NetworkLocationWizard" /v "HideWizard" /f
;
;[Registry_multiline]
;openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test\.a\b]
;set ""="part1\npart2\npart3"
;;set "test" = "$string1$"
;
;[Registry_add_environment]
;openkey [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Environment]
;set "opsi-script-test"="deleteme"
;
;[Registry_del_environment]
;openkey [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Environment]
;DeleteVar "opsi-script-test"
;
;[sub_check_environment]
;comment "This will not work because the environment is inherited from the running process"
;set $list$ = shellCall('set opsi-script-test')
;set $CompValue$ = takeFirstStringContaining($list$, "deleteme")
;if "" = $CompValue$
;	comment "This will work because this new started process will get a new environment"
;	winbatch_check_environment /RunElevated
;	if ("42" = getlastExitCode)
;		set $CompValue$ = "opsi-script-test=deleteme"
;	else
;		message "Set Environment Variables and wait for update "+calculate("%index% * 10")+" seconds ..."
;		sleepseconds 10
;	endif
;endif
;
;[winbatch_check_environment]
;"%system%\cmd.exe" /c "if %opsi-script-test%==deleteme exit 42"
;
;
;;----------------   end   sections for registry test ---------------------------------

;----------------   start   sections for xml test ---------------------------------
[Files_copy_xml]
copy "%ScriptPath%\test-files\xmlpatch2\*.xml" $HomeTestFiles$

;[XMLPatch_XMLAddNamespace]


[XMLPatch_SetAttribute]
openNodeSet 'node_level-1_number-1 /node_level-2_B /'
SetAttribute "color" value="yellow"

[XMLPatch_AddAttribute]
openNodeSet
	documentroot
	all_childelements_with:
	elementname:"node_level-1_number-1"
		all_childelements_with:
		elementname:"node_level-2_A"
		attribute: "color" value="blue"
end
AddAttribute "name" value="OpenOfficeWriter"

[XMLPatch_DeleteAttribute]
openNodeSet 'node_level-1_number-1 /node_level-2_B /'
DeleteAttribute "color"

[XMLPatch_DeleteElement]
openNodeSet 'node_level-1_number-1 /node_level-2_B / '
DeleteElement "node_level-2_B"

[XMLPatch_SetText]
openNodeSet 'node_level-1_number-1 /node_level-2_A / '
SetText "node_level-2_A"

[XMLPatch_AddText]
openNodeSet 'node_level-1_number-1 /node_level-2_C / '
AddText "node_level-2_C"

[XMLPatch_SetText_dummy2]
OpenNodeSet
- error_when_no_node_existing false
- warning_when_no_node_existing true
- error_when_nodecount_greater_1 false
- warning_when_nodecount_greater_1 true
- create_when_node_not_existing false
- attributes_strict false
documentroot
all_childelements_with:
elementname: "PROFIL"
all_childelements_with:
elementname: "VALUE"
text:"K1S114"
end
SetText "K1S120"

;----------------   end   sections for xml test ---------------------------------
;----------------   start   sections for info map tests ---------------------------------
[DosInAnIcon_wmi_get_locale]
@echo off
wmic os get locale

[DosInAnIcon_get_wmi_producttype]
@echo off
wmic os get producttype

[ShellInAnIcon_get_distribution]
set -x
cat /etc/os-release | grep NAME=\"Ubuntu\"
exit $?

;----------------   stop   sections for info map tests ---------------------------------

;----------------   start   sections for execwith tests ---------------------------------
[dosbatch_create_testfile]
makedirectory "$testfilepath$"
echo def > "$testfilepath$$testfile$"

[winbatch_notepad]
notepad "$testfilepath$$testfile$"

[ExecWith_close_helper_window]
; wait for helper window and write something
WinWaitActive("opsi-helper-child")
WinActivate("opsi-helper-child")
Sleep(50)
Send("abc")
Sleep(50)
Send("{TAB}")
Send("{ENTER}")
Exit

[winbatch_helper_showwindow_50]
"%ScriptPath%\$opsi_script_test_helper_bin$" --wait=2 --showwindow=50


[ExecWith_save_notepad]
WinWait("Editor", "")
;send j for ja
Send("j")
;send y for yes
Send("y")
;send s for save
Send("s")
;and good bye
Exit

[ExecWith_parameters]
@echo off
echo param1= %1%
echo param2= %2%
echo param3= %3%
echo param4= %4%
echo param5= %5%

[ExecWith_parameters_bash]
echo param1= $1
echo param2= $2
echo param3= $3
echo param4= $4
echo param5= $5

[Execwith_Autoit_param2]
Const $ADS_UF_DONT_EXPIRE_PASSWD = 0X10000
Const $ADS_UF_PASSWD_CANT_CHANGE = 0X40
$UserName = "$UserPassWord$"
$Password = "$UserName$"
$UserGroup = "$UserGroup$"


;----------------   stop   sections for execwith tests ---------------------------------
;----------------   start   sections for dosbatch/winbatch tests ---------------------------------
;[Files_empty_folder]
;Delete -s -f $HomeTestFiles$
;
;[WinBatch_testing]
;$ping5command$
;
;[Winbatch_top]
;/bin/bash -c "ping 127.0.0.1 &"
;
[DosInAnIcon_getTask_ping]
@echo off
tasklist /FI "IMAGENAME eq ping.exe"

[DosInAnIcon_getTask_helper]
@echo off
tasklist /FI "IMAGENAME eq opsiscripttesthelper.exe"

[DosInAnIcon_getTask_helperchild]
@echo off
tasklist /FI "IMAGENAME eq helperchild.exe"
;
[Winbatch_startprocess_with_child_nowait]
"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$" --fork-and-stop=2
;
;[Winbatch_startprocess_with_child_nowait_from_c]
;"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$" --fork-and-stop=2
;
;
;[WinBatch_testing2]
;%ScriptPath%\dos\dummy2.bat
;
;[Winbatch_exitcode_42_noquote]
;"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$"
;
;[Winbatch_exitcode_42_singlequote]
;'%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$'
;
;[Winbatch_exitcode_42_doublequote]
;"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$"
;
;
;
;[Winbatch_exitcode_43_singlequote_with_param]
;'%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$' --exit-code=43
;
;[Winbatch_exitcode_43_doublequote_with_param]
;"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$" --exit-code=43
;
;[Winbatch_helper_wait2_showwindow1]
;"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$" --wait=2 --showwindow=1
;
;[Winbatch_helper_wait2_showwindow5]
;"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$" --wait=2 --showwindow=5
;
;[Winbatch_helper_showwindow1]
;"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$" --fork-and-stop=3
;
;[Winbatch_msi_shellexecute]
;"%ScriptPath%\test-files\testFiles\dummy.msi" /l* "$HomeTestFiles$\dummy.install_log.txt" /qb! ALLUSERS=2 REBOOT=ReallySuppress
;
;[Winbatch_msi_standard]
;msiexec /i "%ScriptPath%\test-files\testFiles\dummy.msi" /l* "$HomeTestFiles$\dummy.install_log.txt" /qb! ALLUSERS=2 REBOOT=ReallySuppress
;
;[Winbatch_msi_standard_from_c]
;msiexec /i "$HomeTestFiles$\testFiles\dummy.msi" /l* "$HomeTestFiles$\dummy.install_log.txt" /qb! ALLUSERS=2 REBOOT=ReallySuppress
;
;[winbatch_myinno]
;"%ScriptPath%\test-files\testFiles\myinnosetup.exe" /silent
;
[winbatch_myinno_from_c]
"$HomeTestFiles$\testFiles\myinnosetup.exe" /silent
;
;[winbatch_myinno_uninstall]
;"%ProgramFiles32Dir%\myinnosetup\unins000.exe" /silent
;
;[winbatch_wow_myinno]
;"%winstdir%\winst32.exe" "%scriptpath%\standalone-tests\myinno_winbatch.ins" /logfile "c:\opsi.org\log\winbatch_wow_myinno.log" /batch
;
;[Winbatch_regedit_s_64]
;"%systemroot%\regedit.exe" /s "%scriptpath%\test-files\64bit.reg"
;
;[Winbatch_regedit_s_32]
;"%system%\regedit.exe" /s "%scriptpath%\test-files\64bit.reg"
;
[winbatch_wow_myinno_from_c]
"%winstdir%\winst32.exe" "%scriptpath%\myinno_from_c_winbatch.ins" /logfile "c:\opsi.org\log\winbatch_wow_myinno.log" /batch
;
;[Winbatch_msi_standard_from_c_indirect]
;;"%WinstDir%\..\action_processor_starter.exe" <hostId> <hostKey> <controlServerPort> <logFile> <logLevel> <depotRemoteUrl> <depotDrive> <depotServerUsername> <depotServerPassword> <sessionId> <actionProcessorDesktop> <actionProcessorCommand> <actionProcessorTimeout> <runAsUser> <runAsPassword> <createEnvironment>
;;"%WinstDir%\..\action_processor_starter.exe" "%HostID%" <hostKey> "4441"  "8" <depotRemoteUrl> "%ScriptDrive%" <depotServerUsername> <depotServerPassword> 0 "defaukt" "msiexec /i c:\tmp\testFiles\dummy.msi /l* c:\tmp\dummy.install_log.txt /qb! ALLUSERS=2 REBOOT=ReallySuppress" 30 "" "" false
;
;[winbatch_start_helper_asadmin_c]
;"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$" --log="$HomeTestFiles$\testFiles\opsi-script-test-helper-win\admin.log"
;
;[winbatch_start_helper_asinvoker_c]
;"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$" --log="$HomeTestFiles$\testFiles\opsi-script-test-helper-win\admin.log"
;
;[winbatch_start_helper_c]
;"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$" --log="$HomeTestFiles$\testFiles\opsi-script-test-helper-win\admin.log"
;
;[DosInAnIcon_start_helper_c]
;"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$" --log="$HomeTestFiles$\testFiles\opsi-script-test-helper-win\admin.log"
;
;[DosInAnIcon_start_helper_asadmin_c]
;"$HomeTestFiles$\testFiles\opsi-script-test-helper-win\opsiwinsttesthelperasadmin.exe" --log="$HomeTestFiles$\testFiles\opsi-script-test-helper-win\admin.log"
;
;[DosInAnIcon_start_helper_asinvoker_c]
;"$HomeTestFiles$\testFiles\opsi-script-test-helper-win\opsiwinsttesthelperasinvoker.exe" --log="$HomeTestFiles$\testFiles\opsi-script-test-helper-win\admin.log"
;
[Files_copy_msi_exe_2_c]
copy "%ScriptPath%\test-files\testFiles\*.msi" "$HomeTestFiles$\testFiles"
copy "%ScriptPath%\test-files\testFiles\*.exe" "$HomeTestFiles$\testFiles"

;[Files_copy_helper_2_c]
;copy "%ScriptPath%\opsi-script-test-helper-win\*.exe" "$HomeTestFiles$\testFiles\opsi-script-test-helper-win"
;
;[Files_clean_from_c]
;del -s -f "$HomeTestFiles$\testFiles"
;
;
;[Winbatch_msi_uninstall]
;msiexec /x {E19B367E-992C-4BD5-86D1-804C10184D71} /qb! REBOOT=ReallySuppress
;
;[Winbatch_powercfg_hibernate_off]
;powercfg /hibernate off
;
;[DosInAnIcon_powercfg_hibernate_off]
;powercfg /hibernate off
;echo %ERRORLEVEL%
;exit %ERRORLEVEL%
;
;[DosBatch_1]
;c:
;mkdir $HomeTestFiles$
;cd $HomeTestFiles$
;echo dummy > dosbatch_1.txt
;
;[DosInAnIcon_1]
;c:
;mkdir $HomeTestFiles$
;cd $HomeTestFiles$
;echo dummy > dosinanicon_1.txt
;
;[DosBatch_1b]
;c:
;mkdir $HomeTestFiles$
;cd $HomeTestFiles$
;echo dummy > dosinanicon_1.txt
;
;[Execwith_1b]
;c:
;mkdir $HomeTestFiles$
;cd $HomeTestFiles$
;echo dummy > dosinanicon_1.txt
;
;[DosInAnIcon_remove_test_from_system32]
;%SystemDrive%
;cd "%System%"
;del "dummy.txt"
;
[DosInAnIcon_kill_notepad]
taskkill /F /IM notepad.exe
;
;[DosInAnIcon_exit42]
;set exitcode=42
;exit %exitcode%
;
;[DosInAnIcon_exit1]
;rem create an errolevel= 1
;VERIFY OTHER 2> NUL
;echo %ERRORLEVEL%
;exit %ERRORLEVEL%
;
;[ShellInAnIcon_exitcode42]
;set exitcode=0
;VERIFY OTHER 2> NUL
;if %ERRORLEVEL% NEQ 0 set exitcode=%ERRORLEVEL%
;echo %exitcode%
;"%ScriptPath%\$opsi_script_test_helper_bin$"
;if %ERRORLEVEL% NEQ 0 set exitcode=%ERRORLEVEL%
;exit %exitcode%
;
;
;[DosBatchUseradd]
;net user "$opsiadminuser$" "$opsiadminpwd$" /add
;net localgroup Administratoren /add "$opsiadminuser$"
;
;[DosBatchUserdel]
;net user "$opsiadminuser$" /delete
;rmdir /s /q "%ProfileDir%\$opsiadminuser$"
;
;[ExecWithSetup]
;; http://msdn.microsoft.com/library/ee942965%28v=VS.100%29.aspx
;; return exit code via stdout as winst cannot read exit codes from ExecWith
;$ExitCode = RunAsWait("$opsiadminuser$", @ComputerName, "$opsiadminpwd$", 1,  '"$HomeTestFiles$\testFiles\myinnosetup.exe" /silent')
;if not @error then
;	ConsoleWrite($exitcode)
;endif
;
;;;;;;;;;;;;;;;;;;;;;;
;
[ShellInAnIcon_exit43]
set -x
exit 43

;
;[ShellBatch_ping]
;set -x
;ping -c 4 localhost
;
;[ShellBatch_1]
;set -x
;mkdir -p $HomeTestFiles$
;cd $HomeTestFiles$
;echo dummy > shellbatch_1.txt
;
;[ShellInAnIcon_1]
;set -x
;mkdir -p $HomeTestFiles$
;cd $HomeTestFiles$
;echo dummy > shellinanicon_1.txt
;
;[DosInAnIcon_with_parameter]
;echo Hello %1%
;
;[ShellInAnIcon_with_parameter]
;echo Hello $1
;
;----------------   stop   sections for dosbatch/winbatch tests ---------------------------------

;----------------   start   sections for opsiservicecall tests ---------------------------------
[opsiservicecall_authenticated]
"method": "authenticated"
"params": [
					]

[opsiservicecall_userIsAdmin]
"method": "userIsAdmin"
"params": [
					]


[opsiservicecall_ServerIdsList]
"method":"getServerIds_list"
"params":[]

[opsiservicecall_getDepotId]
"method":"getDepotId"
"params":[
					"%opsiserviceuser%",
					]


[opsiservicecall_getClientIds_list]
"method":"getClientIds_list"
"params":[]


[opsiservicecall_getSoftwareInformation_hash]
"method":"getSoftwareInformation_hash"
"params":[
					"pcbon4.uib.local",
					]

[opsiservicecall_getProductInstallationStatus_listOfHashes]
"method":"getProductInstallationStatus_listOfHashes"
"params":[
					"pcbon4.uib.local",
					]

[opsiservicecall_getDepotshares]
"method": "host_getIdents"
"params": [
					'[]',
					'{"type":"OpsiDepotserver"}',
		]

[opsiservicecall_getDepot_properties]
"method": "host_getObjects"
"params": [
					'filter:{type:OpsiDepotserver,id:bonifax.uib.local}',
		]

[opsiservicecall_opsiclientd_start_helper]
"method": "runCommand"
"params": [
					"$testfilepath$",
					]


[opsiServiceCall_setProductInstallationStatus]
"method": "setProductInstallationStatus"
"params": [
					 "not-existing-product",
					 "%HostID%",
					 "not_installed"
					]

[opsiservicecall_productOnClient_getObjects]
"method": "productOnClient_getObjects"
"params": [
					'[]',
					'{"clientId":"%HostID%"}',
		]

[opsiservicecall_getProductProperties_hash]
"method": "getProductProperties_hash"
"params": [
					"opsi-winst-test-followup",
					"%opsiserviceUser%"
					]

[opsiServiceCall_set_imagelist]
"method": "productPropertyState_create"
"params": [
					"$captureproduct$",
					"imagename",
					"$depotid$",
					'$valuesListStr$'
					]


;----------------   stop   sections for opsiservicecall tests ---------------------------------

;----------------   start  ProfileActions tests ---------------------------------
[ProfileActions]
comment "we are in profile actions"
markErrorNumber
set $regWriteValue$ = "32"
Registry_hkcu_complete_opsi_org_test
Registry_hkcu_complete_opsi_org_deletekey
Files_work_on_profiles
if $INST_SystemType$ = "64 Bit System"
	set $regWriteValue$ = "64"
	Registry_hkcu_complete_opsi_org_test /64bit
	Registry_hkcu_complete_opsi_org_deletekey /64bit
endif
if errorsOccuredSinceMark > 14
	LogWarning "failed"
	set $TestResult$ = "not o.k."
endif

[Files_work_on_profiles]
copy "%ScriptPath%\test-files\testFiles\*.*" "%UserProfileDir%\opsi-script-test"
del -sfc "%UserProfileDir%\opsi-script-test"
copy "%ScriptPath%\test-files\testFiles\*.*" "%CurrentProfileDir%\opsi-script-test"
del -sfc "%CurrentProfileDir%\opsi-script-test"

;----------------   stop   ProfileActions tests ---------------------------------

;----------------   start  internal undocumented functions tests ---------------------------------
[winbatch_create_file]
"%ScriptPath%\$opsi_script_test_helper_bin$" --createfile="$testfilepath$" --filesize=$testfilesize$

[DosInAnIcon_dir]
@echo off
dir $testfilepath$

[files_remove_file]
del -f "$testfilepath$"
;----------------   stop   internal undocumented functions tests ---------------------------------

[Files_copy_test_to_system32]
copy "%ScriptPath%\test-files\testFiles\dummy.txt" "%System%"

[ExecWith_Powershell_HelloWorld]
	$strString = "Hello World"
	write-host $strString
	
[ExecWith_Powershell_SearchUninstallInfos]
	$RegKey = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"
	#Search $RegKey for the given DisplayName and return DisplayName, QuietUninstallString (if present) and UninstallString from the found subentries
		Get-ChildItem -Path $RegKey| Where-Object -FilterScript { $_.GetValue("DisplayName", "not found") -like "$DisplayName$"} | ForEach-Object -Process {
		if (-Not($_.GetValue("DisplayName", "not found") -eq "not found") -or ($_.GetValue("DisplayName", "not found") -eq "") -or ($_.GetValue("DisplayName", "not found") -eq $null))
			{
			Write-Output (-join ("InstalledVersion=" + $_.GetValue("DisplayName")))
			if (-Not($_.GetValue("QuietUninstallString", "not found") -eq "not found") -or ($_.GetValue("QuietUninstallString", "not found") -eq "") -or ($_.GetValue("QuietUninstallString", "not found") -eq $null))
				{
				Write-Output (-join ("QuietUninstallString=" + $_.GetValue("QuietUninstallString")))
				}
			if (-Not($_.GetValue("UninstallString", "not found") -eq "not found") -or ($_.GetValue("UninstallString", "not found") -eq "") -or ($_.GetValue("UninstallString", "not found") -eq $null))
				{
				Write-Output (-join ("UninstallString=" + $_.GetValue("UninstallString")))
				}
			}
		}
