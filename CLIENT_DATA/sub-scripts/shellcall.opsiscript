encoding=utf8

if ($Flag_winst_dos$ = "on") or ($MasterFlag$ = "on")
	Message "testing Dos / DosInAnIcon functions"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing  Dos / DosInAnIcon functions"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	Set $ExpectedResult$ = "o.k."
	
	; start testing
	set $TestResult$ = "o.k."
	
	if $OS$ = "Windows_NT"
		
		;Chapter  7.10 DOSBatch/ShellBatch Sections
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		comment "DosBatch"
		message "DosBatch"
		DosBatch_1
		if (fileExists($HomeTestFiles$+"\dosbatch_1.txt"))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		Files_empty_folder
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "DosInAnIcon"
		DosInAnIcon_1
		;DosBatch_1b
		;Execwith_1b cmd.exe /C
		if (fileExists($HomeTestFiles$+"\dosinanicon_1.txt"))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		
		if CompareDotSeparatedNumbers("%WinstVersion%","4.11.1.1") >= "0"
			if $INST_SystemType$ = "64 Bit System"
				comment ""
				comment "-------------------------------------"
				comment "Testing: "
				message "DosBatch / DosInAnIcon  winst /64bit"
				Files_copy_test_to_system32 /64Bit
				DosInAnIcon_remove_test_from_system32 winst /64Bit
				if not(FileExists64("%System%\dummy.txt"))
					comment "passed"
				else
					LogWarning "failed"
					set $TestResult$ = "not o.k."
				endif
			endif
			
			Files_copy_test_to_system32 /sysnative
			DosInAnIcon_remove_test_from_system32 winst /sysnative
			if not(FileExistssysnative("%System%\dummy.txt"))
				comment "passed"
			else
				LogWarning "failed"
				set $TestResult$ = "not o.k."
			endif
		else
			comment "Dosbatch winst /64bit not tested, minimum winst needed: 4.11.1.1"
		endif
		
		if CompareDotSeparatedNumbers("%WinstVersion%","4.11.3.1") >= "0"
			message "DosBatch / DosInAnIcon  exitcode"
			DosInAnIcon_exit42
			set $ConstTest$ = "42"
			set $CompValue$ = getLastExitCode
			if ($ConstTest$ = $CompValue$)
				comment "DosBatch / DosInAnIcon  exitcode passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "DosBatch / DosInAnIcon  exitcode failed"
			endif
			DosInAnIcon_exit1
			set $ConstTest$ = "1"
			set $CompValue$ = getLastExitCode
			if ($ConstTest$ = $CompValue$)
				comment "DosBatch / DosInAnIcon  exitcode passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "DosBatch / DosInAnIcon  exitcode failed"
			endif
			
			ShellInAnIcon_exitcode42
			set $ConstTest$ = "42"
			set $CompValue$ = getLastExitCode
			if ($ConstTest$ = $CompValue$)
				comment "DosBatch / DosInAnIcon  exitcode passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "DosBatch / DosInAnIcon  exitcode failed"
			endif
		endif
		
		comment "Testing parameters for ShellBatch"
		set $ConstTest$ = "Hello world"
		set $list$ = getOutStreamFromSection('DosInAnIcon_with_parameter world')
		set $CompValue$ = takeString(2,$list$)
		if ($ConstTest$ = $CompValue$)
			comment "ShellBatch parameter passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "ShellBatch parameter failed"
		endif
		
		if CompareDotSeparatedNumbers("%WinstVersion%","4.11.5.1") >= "0"
			comment "Testing parameters for ShellBatch"
			set $ConstTest$ = "Hello world"
			set $tmp$ = "world"
			set $list$ = getOutStreamFromSection('DosInAnIcon_with_parameter $tmp$')
			set $CompValue$ = takeString(2,$list$)
			if ($ConstTest$ = $CompValue$)
				comment "ShellBatch parameter passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "ShellBatch parameter failed"
			endif
		endif ; 4.11.5
		
		if CompareDotSeparatedNumbers("%WinstVersion%","4.11.6.1") >= "0"
			message "shellCall  exitcode"
			set $list$ = shellCall("exit 43")
			set $ConstTest$ = "43"
			set $CompValue$ = getLastExitCode
			if ($ConstTest$ = $CompValue$)
				comment "ShellCall  exitcode passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "ShellCall  exitcode failed"
			endif
			shellCall("exit 43")
			set $ConstTest$ = "43"
			set $CompValue$ = getLastExitCode
			if ($ConstTest$ = $CompValue$)
				comment "ShellCall  exitcode passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "ShellCall  exitcode failed"
			endif
			set $ConstTest$ = "43"
			set $CompValue$ = shellCall("exit 43")
			if ($ConstTest$ = $CompValue$)
				comment "ShellCall  exitcode passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "ShellCall  exitcode failed"
			endif
			shellCall("net start")
			set $ConstTest$ = "0"
			set $CompValue$ = getLastExitCode
			if ($ConstTest$ = $CompValue$)
				comment "ShellCall exitcode passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "ShellCall exitcode failed"
			endif
			
			set $ConstTest$ = "0"
			set $CompValue$ = shellCall("net start")
			if ($ConstTest$ = $CompValue$)
				comment "ShellCall exitcode passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "ShellCall exitcode failed"
			endif
			
			message "shellCall  resultlist"
			set $list$ = shellCall("tasklist")
			if not( "" = takeFirstStringContaining($list$, "opsi"))
				comment "ShellCall  resultlist passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "ShellCall  resultlist failed"
			endif
			
		endif ; 4.11.6
		
		Files_empty_folder
	else ; windows / linux
		message "DosBatch / DosInAnIcon  exitcode"
		ShellInAnIcon_exit43
		set $ConstTest$ = "43"
		set $CompValue$ = getLastExitCode
		if ($ConstTest$ = $CompValue$)
			comment "ShellInAnIcon  exitcode passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "ShellInAnIcon  exitcode failed"
		endif
		ShellBatch_ping
		set $ConstTest$ = "0"
		set $CompValue$ = getLastExitCode
		if ($ConstTest$ = $CompValue$)
			comment "ShellBatch exitcode passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "ShellBatch exitcode failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "ShellInAnIcon"
		ShellBatch_1
		if (fileExists($HomeTestFiles$+"\shellbatch_1.txt"))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		Files_empty_folder
		
		ShellInAnIcon_1
		if (fileExists($HomeTestFiles$+"\shellinanicon_1.txt"))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment "Testing parameters for ShellBatch"
		set $ConstTest$ = "Hello world"
		set $list$ = getOutStreamFromSection('ShellInAnIcon_with_parameter world')
		set $CompValue$ = takeFirstStringContaining($list$,"Hello world")
		if ($ConstTest$ = $CompValue$)
			comment "ShellBatch parameter passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "ShellBatch parameter failed"
		endif
		
		if CompareDotSeparatedNumbers("%WinstVersion%","4.11.5.1") >= "0"
			comment "Testing parameters for ShellBatch"
			set $ConstTest$ = "Hello world"
			set $tmp$ = "world"
			set $list$ = getOutStreamFromSection('ShellInAnIcon_with_parameter '+$tmp$)
			set $CompValue$ = takeFirstStringContaining($list$,"Hello world")
			if ($ConstTest$ = $CompValue$)
				comment "ShellBatch parameter passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "ShellBatch parameter failed"
			endif
		endif ; 4.11.5
		if CompareDotSeparatedNumbers("%WinstVersion%","4.11.6.1") >= "0"
			message "shellCall  exitcode"
			set $list$ = shellCall("exit 43")
			set $ConstTest$ = "43"
			set $CompValue$ = getLastExitCode
			if ($ConstTest$ = $CompValue$)
				comment "ShellCall  exitcode passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "ShellCall  exitcode failed"
			endif
			shellCall("exit 43")
			set $ConstTest$ = "43"
			set $CompValue$ = getLastExitCode
			if ($ConstTest$ = $CompValue$)
				comment "ShellCall  exitcode passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "ShellCall  exitcode failed"
			endif
			set $ConstTest$ = "43"
			set $CompValue$ = shellCall("exit 43")
			if ($ConstTest$ = $CompValue$)
				comment "ShellCall  exitcode passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "ShellCall  exitcode failed"
			endif
			shellCall("ping -c 4 localhost")
			set $ConstTest$ = "0"
			set $CompValue$ = getLastExitCode
			if ($ConstTest$ = $CompValue$)
				comment "ShellCall exitcode passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "ShellCall exitcode failed"
			endif
			
			set $ConstTest$ = "0"
			set $CompValue$ = shellCall("ping -c 4 localhost")
			if ($ConstTest$ = $CompValue$)
				comment "ShellCall exitcode passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "ShellCall exitcode failed"
			endif
			
			message "shellCall  resultlist"
			set $list$ = shellCall("ps -ef")
			if not( "" = takeFirstStringContaining($list$, "opsi"))
				comment "ShellCall  resultlist passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "ShellCall  resultlist failed"
			endif
			set $list$ = shellCall("ps -ef | grep opsi")
			if not( "" = takeFirstStringContaining($list$, "opsi"))
				comment "ShellCall  resultlist passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "ShellCall  resultlist failed"
			endif
			
			
		endif ; 4.11.6
		Files_empty_folder
	endif ; windows / linux
	
	if $OS$ = "Windows_NT"
		if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.4")
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "/runelevated"
			Files_copy_msi_exe_2_c
			
			message "ShellInAnIcon testing local msiexec call /RunElevated /TimeoutSeconds 30"
			ShellInAnIcon_msi_standard_from_c winst /RunElevated /TimeoutSeconds 30
			set $ConstTest$ = "0"
			set $CompValue$ = getLastExitCode
			if CompareDotSeparatedNumbers(GetMsVersionInfo,">=","6.0")
				set $ConstTest$ = "0"
			else
				set $ConstTest$ = "0"
			endif
			if ($ConstTest$ = $CompValue$)
				comment "ShellInAnIcon testing msiexec call /RunElevated passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "ShellInAnIcon testing msiexec call /RunElevated failed"
			endif
			
			comment "cleanup ..."
			sleepseconds 5
			if not (GetRegistryStringValue32("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{E19B367E-992C-4BD5-86D1-804C10184D71}] DisplayName") = "")
				comment "MSI id {E19B367E-992C-4BD5-86D1-804C10184D71} (dummy.msi) found in registry, starting msiexec to uninstall"
				ShellInAnIcon_msi_uninstall winst /RunElevated
			endif
			
			Files_copy_helper_2_c
			
			message "testing ShellInAnIcon_start_helper_c /RunElevated"
			ShellInAnIcon_start_helper_c winst /RunElevated
			set $list1$ = loadTextFile ($HomeTestFiles$+"\testFiles\opsi-script-test-helper-win\admin.log")
			;message "testing winbatch_start_helper_asadmin_c /RunElevated"
			;ShellInAnIcon_start_helper_asadmin_c winst /RunElevated
			;set $list1$ = loadTextFile ($HomeTestFiles$+"\testFiles\opsi-script-test-helper-win\admin.log")
			;message "testing winbatch_start_helper_asinvoker_c /RunElevated"
			;ShellInAnIcon_start_helper_asinvoker_c winst /RunElevated
			;set $list1$ = loadTextFile ($HomeTestFiles$+"\testFiles\opsi-script-test-helper-win\admin.log")
			
			marktime
			message "testing ShellInAnIcon_startprocess_with_child_nowait_from_c /RunElevated /WaitForProcessEnding "helperchild.exe" /TimeoutSeconds 10"
			ShellInAnIcon_startprocess_with_child_nowait_from_c winst /RunElevated /WaitForProcessEnding "helperchild.exe" /TimeoutSeconds 10
			difftime
			comment "difftime should be 5 seconds"
			set $tmp$ = getDiffTimeSec
			if $tmp$ INT>= "10"
				set $TestResult$ = "not o.k."
				LogWarning "/WaitForProcessEnding /RunElevated assumed failed"
			else
				sleepseconds 1
				;set $list1$ = getOutStreamFromSection ('DosInAnIcon_getTask_helperchild')
				set $list1$ = getprocesslist
				set $ConstTest$ = ""
				set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
				set $CompValue$ = takeString(0, splitString($tmp$,";"))
				if ($ConstTest$ = $CompValue$)
					comment "/WaitForProcessEnding /RunElevated assumed passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "/WaitForProcessEnding /RunElevated assumed failed"
				endif
			endif
			killtask "helperchild.exe"
			killtask "opsiscripttesthelper.exe"
			
			if CompareDotSeparatedNumbers(GetMsVersionInfo,">=","6.0")
				message "testing ShellInAnIcon_powercfg_hibernate_off "
				ShellInAnIcon_powercfg_hibernate_off
				set $ConstTest$ = "1"
				set $CompValue$ = getLastExitCode
				if ($ConstTest$ = $CompValue$)
					comment "Is expected to fail without /runelevated"
				else
					set $TestResult$ = "not o.k."
					LogWarning "ShellInAnIcon_powercfg_hibernate_off worked unexpected correct "
				endif
				
				message "testing ShellInAnIcon_powercfg_hibernate_off /RunElevated"
				ShellInAnIcon_powercfg_hibernate_off winst /RunElevated
				set $ConstTest$ = "0"
				set $CompValue$ = getLastExitCode
				if ($ConstTest$ = $CompValue$)
					comment "ShellInAnIcon_powercfg_hibernate_off /RunElevated passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "testing /RunElevated failed"
				endif
			endif ; nt6
			Files_clean_from_c
		endif ; 4.12.4
	endif ; windows
	
	message "Testing DosInAnIcon /showoutput speed ; log 7"
	marktime
	if $OS$ = "Windows_NT"
		DosInanIcon_type_a_lot winst /showoutput
	else
		ShellInanIcon_cat_a_lot winst /showoutput
	endif
	difftime
	switch $OS$
		case "Windows_nt"
			comment "difftime should be about 60 seconds"
			set $ConstTest$ = "80"
		endcase
		case "Linux"
			comment "difftime should be about 60 seconds"
			set $ConstTest$ = "60"
		endcase
		case "macos"
			comment "difftime should be about 100 seconds"
			set $ConstTest$ = "100"
		endcase
	endswitch
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if $test_speed$ = "true"
		if $ConstTest$ int>= $CompValue$
			comment "/showoutput  passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/showoutput failed"
		endif
	endif
	
	
	message "Testing DosInAnIcon /noshowoutput speed ; log 7"
	marktime
	if $OS$ = "Windows_NT"
		DosInanIcon_type_a_lot
	else
		ShellInanIcon_cat_a_lot
	endif
	difftime
	comment "difftime should be about 1 seconds"
	set $ConstTest$ = "1"
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if $test_speed$ = "true"
		if $ConstTest$ int>= $CompValue$
			comment "/noshowoutput  passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/noshowoutput failed"
		endif
	endif
	
	message "Testing shellcall /noshowoutput speed ; log 7"
	marktime
	if $OS$ = "Windows_NT"
		shellCall('type "%scriptpath%\opsi-script-test.opsiscript"')
	else
		shellCall('cat "%scriptpath%/opsi-script-test.opsiscript"')
	endif
	difftime
	comment "difftime should be about 1 seconds"
	set $ConstTest$ = "1"
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if $test_speed$ = "true"
		if $ConstTest$ int>= $CompValue$
			comment "/noshowoutput  passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/noshowoutput failed"
		endif
	endif
	
	set $tmp$ = getloglevel
	setloglevel = 6
	
	message "Testing DosInAnIcon /showoutput speed ; log 5"
	marktime
	if $OS$ = "Windows_NT"
		DosInanIcon_type_a_lot winst /showoutput
	else
		ShellInanIcon_cat_a_lot winst /showoutput
	endif
	difftime
	switch $OS$
		case "Windows_nt"
			comment "difftime should be about 60 seconds"
			set $ConstTest$ = "75"
		endcase
		case "Linux"
			comment "difftime should be about 60 seconds"
			set $ConstTest$ = "60"
		endcase
		case "macos"
			comment "difftime should be about 90 seconds"
			set $ConstTest$ = "90"
		endcase
	endswitch
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if $test_speed$ = "true"
		if $ConstTest$ int>= $CompValue$
			comment "/showoutput  passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/showoutput failed"
		endif
	endif
	
	message "Testing DosInAnIcon /noshowoutput speed ; log 5"
	marktime
	if $OS$ = "Windows_NT"
		DosInanIcon_type_a_lot
	else
		ShellInanIcon_cat_a_lot
	endif
	difftime
	comment "difftime should be about 1 seconds"
	set $ConstTest$ = "1"
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if $test_speed$ = "true"
		if $ConstTest$ int>= $CompValue$
			comment "/noshowoutput  passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/noshowoutput failed"
		endif
	endif
	
	message "Testing shellcall /noshowoutput speed ; log 5"
	marktime
	if $OS$ = "Windows_NT"
		shellCall('type "%scriptpath%\opsi-script-test.opsiscript"')
	else
		shellCall('cat "%scriptpath%/opsi-script-test.opsiscript"')
	endif
	difftime
	comment "difftime should be about 1 seconds"
	set $ConstTest$ = "1"
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if $test_speed$ = "true"
		if $ConstTest$ int>= $CompValue$
			comment "/noshowoutput  passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/noshowoutput failed"
		endif
	endif
	
	setloglevel = $tmp$
	
	message "Testing processCall speed"
	marktime
	if $OS$ = "Windows_NT"
		set $exitcode$ = processCall('cmd.exe /C type "%scriptpath%\opsi-script-test.opsiscript"')
	else
		set $exitcode$ = processCall('bash -c "cat %scriptpath%/opsi-script-test.opsiscript"')
	endif
	difftime
	comment "difftime should be about 1 seconds"
	set $ConstTest$ = "1"
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if $test_speed$ = "true"
		if $ConstTest$ int>= $CompValue$
			comment "/noshowoutput  passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/noshowoutput failed"
		endif
	endif
	
	Files_empty_folder
	
	sub_compareResult
	
	set $winst_dos$ = $SubResult$
endif

;----------------   start   sections for dosbatch/winbatch tests ---------------------------------
[Files_empty_folder]
Delete -s -f $HomeTestFiles$

[DosBatch_1]
c:
mkdir $HomeTestFiles$
cd $HomeTestFiles$
echo dummy > dosbatch_1.txt

[DosInAnIcon_1]
c:
mkdir $HomeTestFiles$
cd $HomeTestFiles$
echo dummy > dosinanicon_1.txt

[DosBatch_1b]
c:
mkdir $HomeTestFiles$
cd $HomeTestFiles$
echo dummy > dosinanicon_1.txt

[Execwith_1b]
c:
mkdir $HomeTestFiles$
cd $HomeTestFiles$
echo dummy > dosinanicon_1.txt

[DosInAnIcon_remove_test_from_system32]
%SystemDrive%
cd "%System%"
del "dummy.txt"

[DosInAnIcon_kill_notepad]
taskkill /F /IM notepad.exe

[DosInAnIcon_exit42]
set exitcode=42
exit %exitcode%

[DosInAnIcon_exit1]
rem create an errolevel= 1
VERIFY OTHER 2> NUL
echo %ERRORLEVEL%
exit %ERRORLEVEL%

[ShellInAnIcon_exitcode42]
set exitcode=0
VERIFY OTHER 2> NUL
if %ERRORLEVEL% NEQ 0 set exitcode=%ERRORLEVEL%
echo %exitcode%
"%ScriptPath%\$opsi_script_test_helper_bin$"
if %ERRORLEVEL% NEQ 0 set exitcode=%ERRORLEVEL%
exit %exitcode%


[DosBatchUseradd]
net user "$opsiadminuser$" "$opsiadminpwd$" /add
net localgroup Administratoren /add "$opsiadminuser$"

[DosBatchUserdel]
net user "$opsiadminuser$" /delete
rmdir /s /q "%ProfileDir%\$opsiadminuser$"

[ExecWithSetup]
; http://msdn.microsoft.com/library/ee942965%28v=VS.100%29.aspx
; return exit code via stdout as winst cannot read exit codes from ExecWith
$ExitCode = RunAsWait("$opsiadminuser$", @ComputerName, "$opsiadminpwd$", 1,  '"$HomeTestFiles$\testFiles\myinnosetup.exe" /silent')
if not @error then
	ConsoleWrite($exitcode)
endif

;;;;;;;;;;;;;;;;;;;;;

[ShellInAnIcon_exit43]
set -x
exit 43


[ShellBatch_ping]
set -x
ping -c 4 localhost

[ShellBatch_1]
set -x
mkdir -p $HomeTestFiles$
cd $HomeTestFiles$
echo dummy > shellbatch_1.txt

[ShellInAnIcon_1]
set -x
mkdir -p $HomeTestFiles$
cd $HomeTestFiles$
echo dummy > shellinanicon_1.txt

[DosInAnIcon_with_parameter]
echo Hello %1%

[ShellInAnIcon_with_parameter]
echo Hello $1

[Files_copy_msi_exe_2_c]
copy "%ScriptPath%\test-files\testFiles\*.msi" "$HomeTestFiles$\testFiles"
copy "%ScriptPath%\test-files\testFiles\*.exe" "$HomeTestFiles$\testFiles"

[Files_copy_helper_2_c]
copy "%ScriptPath%\opsi-script-test-helper-win\*.exe" "$HomeTestFiles$\testFiles\opsi-script-test-helper-win"

[Files_clean_from_c]
del -s -f "$HomeTestFiles$\testFiles"

[ShellInAnIcon_msi_standard_from_c]
msiexec /i "$HomeTestFiles$\testFiles\dummy.msi" /l* "$HomeTestFiles$\dummy.install_log.txt" /qb! ALLUSERS=2 REBOOT=ReallySuppress

[ShellInAnIcon_msi_uninstall]
msiexec /x {E19B367E-992C-4BD5-86D1-804C10184D71} /qb! REBOOT=ReallySuppress

[ShellInAnIcon_start_helper_c]
"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$" --log="$HomeTestFiles$\testFiles\opsi-script-test-helper-win\admin.log"

[ShellInAnIcon_startprocess_with_child_nowait_from_c]
"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$" --fork-and-stop=2

[ShellInAnIcon_powercfg_hibernate_off]
powercfg /hibernate off

[DosInanIcon_type_a_lot]
type "%scriptpath%\opsi-script-test.opsiscript"

[ShellInanIcon_cat_a_lot]
cat "%scriptpath%/opsi-script-test.opsiscript"

;----------------   stop   sections for dosbatch/winbatch tests ---------------------------------
