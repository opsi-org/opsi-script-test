encoding=utf8

if ($Flag_powershell$ = "on") or ($MasterFlag$ = "on")
	if not($OS$ = "Windows_NT")
		comment "powershelltest only implemented for Windows NT6"
		set $winst_powershell$ = "not implemented"
	else
		Message "testing powershell functions"
		comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
		comment ""
		comment "testing powershell functions"
		comment ""
		comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
		Set $ExpectedResult$ = "o.k."
		; start testing
		set $TestResult$ = "o.k."
    	
		if CompareDotSeparatedNumbers(GetMsVersionInfo,">=","6.1")
			comment "backup old powershell executionpolicy (sysnative)"
			set $list$ = shellCall('powershell.exe get-executionpolicy')
			if not (getlastexitcode = "0")
				set $TestResult$ = "not o.k."
				LogWarning "Execwith assumed failed"
			endif
			set $pspolicy$ = takestring(0,$list$)
			comment "set new powershell executionpolicy (sysnative)"
			set $exitcode$ = shellCall('powershell.exe set-executionpolicy RemoteSigned')
			if not ($exitcode$ = "0")
				set $TestResult$ = "not o.k."
				LogWarning "Execwith assumed failed"
			endif
			
			set $list1$ = getOutStreamFromSection ('ExecWith_powershell "powershell.exe" winst /sysnative')
			if not (getlastexitcode = "0")
				set $TestResult$ = "not o.k."
				LogWarning "Execwith assumed failed"
			endif
			comment "check if the script was executed..."
			set $CompValue$ = takeFirstStringContaining($list1$,"powershell opsi-winst-test")
			if ("" = $CompValue$)
				comment "check if the script was not executed because powershell is not activated..."
				set $CompValue$ = takeFirstStringContaining($list1$,"PSSecurityException")
				set $TestResult$ = "not o.k."
				LogWarning "Execwith assumed failed"
			else
				comment "Execwith assumed passed"
			endif
			
			if $architecture$ = "32"
				set $list1$ = getOutStreamFromSection ('execwith_powershell_architecture "powershell.exe" winst /32bit')
				comment "check if the script was executed..."
				set $CompValue$ = takeFirstStringContaining($list1$,"powershell opsi-winst-test")
				if ("" = $CompValue$)
					comment "check if the script was not executed because powershell is not activated..."
					set $CompValue$ = takeFirstStringContaining($list1$,"PSSecurityException")
				endif
				if not ("" = $CompValue$)
					comment "Execwith assumed passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "Execwith assumed failed"
				endif
			endif
			
			set $list1$ = getOutStreamFromSection ('execwith_powershell_architecture "powershell.exe" winst /sysnative')
			comment "check if the script was executed..."
			set $CompValue$ = takeFirstStringContaining($list1$,"powershell opsi-winst-test")
			if ("" = $CompValue$)
				comment "check if the script was not executed because powershell is not activated..."
				set $CompValue$ = takeFirstStringContaining($list1$,"PSSecurityException")
			endif
			if not ("" = $CompValue$)
				comment "Execwith assumed passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "Execwith assumed failed"
			endif
			
			comment "restore old powershell executionpolicy"
			set $exitcode$ = shellCall('powershell.exe set-executionpolicy '+$pspolicy$)
			if not ($exitcode$ = "0")
				set $TestResult$ = "not o.k."
				LogWarning "Execwith assumed failed"
			endif
    	
    	
    	
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "powershellcall (default)"
			set $list1$ = powershellCall('echo "powershell opsi-winst-test"')
			if not (getlastexitcode = "0")
				set $TestResult$ = "not o.k."
				LogWarning "Execwith assumed failed"
			endif
			comment "check if the script was executed..."
			set $ConstTest$ = "powershell opsi-winst-test"
			set $CompValue$ = takeFirstStringContaining($list1$,$ConstTest$)
			if ($ConstTest$ = $CompValue$)
				comment "powershellCall passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "testing powershellCall failed"
			endif
    	
			message "powershellcall (32bit)"
			set $list1$ = powershellCall('echo "powershell opsi-winst-test"',"32bit")
			if not (getlastexitcode = "0")
				set $TestResult$ = "not o.k."
				LogWarning "Execwith assumed failed"
			endif
			comment "check if the script was executed..."
			set $ConstTest$ = "powershell opsi-winst-test"
			set $CompValue$ = takeFirstStringContaining($list1$,$ConstTest$)
			if ($ConstTest$ = $CompValue$)
				comment "powershellCall passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "testing powershellCall failed"
			endif
			
			message "powershellcall (sysnative)"
			set $list1$ = powershellCall('echo "powershell opsi-winst-test"',"sysnative")
			if not (getlastexitcode = "0")
				set $TestResult$ = "not o.k."
				LogWarning "Execwith assumed failed"
			endif
			comment "check if the script was executed..."
			set $ConstTest$ = "powershell opsi-winst-test"
			set $CompValue$ = takeFirstStringContaining($list1$,$ConstTest$)
			if ($ConstTest$ = $CompValue$)
				comment "powershellCall passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "testing powershellCall failed"
			endif
			
			message "powershellcall (64bit)"
			set $list1$ = powershellCall('echo "powershell opsi-winst-test"',"64bit")
			if not (getlastexitcode = "0")
				set $TestResult$ = "not o.k."
				LogWarning "Execwith assumed failed"
			endif
			comment "check if the script was executed..."
			set $ConstTest$ = "powershell opsi-winst-test"
			set $CompValue$ = takeFirstStringContaining($list1$,$ConstTest$)
			if ($ConstTest$ = $CompValue$)
				comment "powershellCall passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "testing powershellCall failed"
			endif
			
			message "powershellcall (sysnative) (true)"
			set $list1$ = powershellCall('echo "powershell opsi-winst-test"',"sysnative","true")
			if not (getlastexitcode = "0")
				set $TestResult$ = "not o.k."
				LogWarning "Execwith assumed failed"
			endif
			comment "check if the script was executed..."
			set $ConstTest$ = "powershell opsi-winst-test"
			set $CompValue$ = takeFirstStringContaining($list1$,$ConstTest$)
			if ($ConstTest$ = $CompValue$)
				comment "powershellCall passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "testing powershellCall failed"
			endif
			
			
			comment "backup old powershell executionpolicy (sysnative)"
			set $list$ = shellCall('powershell.exe get-executionpolicy')
			if not (getlastexitcode = "0")
				set $TestResult$ = "not o.k."
				LogWarning "Execwith assumed failed"
			endif
			set $pspolicy$ = takestring(0,$list$)
			comment "set new powershell executionpolicy (sysnative)"
			set $exitcode$ = shellCall('powershell.exe set-executionpolicy Restricted')
			if not ($exitcode$ = "0")
				set $TestResult$ = "not o.k."
				LogWarning "set-executionpolicy assumed failed"
			endif
			message "powershellcall (sysnative) (false)"
			comment "this should fail because executionpolicy Resticted and policy handling set to false"
			set $list1$ = powershellCall('echo "powershell opsi-winst-test"',"sysnative","false")
			if getlastexitcode = "0"
				set $TestResult$ = "not o.k."
				LogWarning "Execwith assumed failed"
			endif
			comment "restore old powershell executionpolicy"
			set $exitcode$ = shellCall('powershell.exe set-executionpolicy '+$pspolicy$)
			if not ($exitcode$ = "0")
				set $TestResult$ = "not o.k."
				LogWarning "Execwith assumed failed"
			endif
			
			if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.4.28")
				comment "testing exitcode"
				ExecWith_powershell_exit42 "powershell.exe" -ExecutionPolicy Bypass
				if not (getlastexitcode = "42")
				set $TestResult$ = "not o.k."
					LogWarning "Execwith assumed failed"
				endif
				
				set $exitcode$ = powershellCall('exit 42')
				if not ($exitcode$ = "42")
				set $TestResult$ = "not o.k."
					LogWarning "Execwith assumed failed"
				endif
				
				comment "testing hookscript"
				set $tmp$ = "%SCRIPTPATH%\test-files\certificates\PowershellSignatureOntheFly.cmd"
				ChangeDirectory "%SCRIPTPATH%\test-files\certificates"
				ExecWith_powershell_exit42 "powershell.exe" -Executionpolicy Bypass winst /hookscript "$tmp$"
				if not (getlastexitcode = "42")
					set $TestResult$ = "not o.k."
					LogWarning "Execwith assumed failed"
				endif
				
				comment "testing powershellCall with optionstr"
				set $tmp$ = "%SCRIPTPATH%\test-files\certificates\PowershellSignatureOntheFly.cmd"
				ChangeDirectory "%SCRIPTPATH%\test-files\certificates"
				set $list1$ = powershellCall('exit 42',"sysnative","true","/hookscript "+$tmp$)
				if not (getlastexitcode = "42")
					set $TestResult$ = "not o.k."
					LogWarning "Execwith assumed failed"
				endif
			endif ; 4.12.4.28
		endif ; NT6
		sub_compareResult
		set $winst_powershell$ = $SubResult$
	endif ; windows

endif


[ExecWith_powershell]
trap { write-output $_ ; exit 1 }
set-executionpolicy RemoteSigned
echo "powershell opsi-winst-test"
exit $LASTEXITCODE

[execwith_powershell_architecture]
trap { write-output $_ ; exit 1 }
set-executionpolicy RemoteSigned
echo "powershell opsi-winst-test"
$psversion
$psversiontable
#start-process -wait cmd.exe
$is64BitSystem = ($env:Processor_Architecture -ne "x86")
$is64BitPowerShell = [IntPtr]::Size -eq 8
$env:Processor_Architecture
[IntPtr]::Size
$is64BitSystem
$is64BitPowerShell
exit $LASTEXITCODE

[ExecWith_powershell_exit42]
trap { write-output $_ ; exit 1 }
$myexitcode = 42
echo $myexitcode
exit $myexitcode
