;[Files_empty_folder]
;del -f "$HomeTestFiles$\files\symlink.txt"
;Del -s -f $HomeTestFiles$

;[Files_empty_folder2]
;del -f "$HomeTestFiles$\files\symlink.txt"

[WinBatch_prepare_killtask]
notepad.exe

[WinBatch_prepare_killtask_lin]
ping localhost

[DosInAnIcon_prepare_fileExists]
c:
mkdir $HomeTestFiles$
cd $HomeTestFiles$
echo dummy> dummy.txt

[ShellInAnIcon_prepare_fileExists]
mkdir -p $HomeTestFiles$
cd $HomeTestFiles$
echo dummy> dummy.txt

[ExecWith_autoit_opsiservicecall_interactive]
; waiting for the window
WinWait("DialogServicePassword")
; activating
WinActivate("DialogServicePassword")
;send ("{TAB}")
;send ("{TAB}")
; enter serviceurl
;send ("https://bonifax:4447")
;send ("%opsiserviceURL%")
;send ("{TAB}")
; enter username
send ("praktikant1.uib.local")
;send ("%hostId%")
send ("{TAB}")
; enter password
send ("51a7d4c24ae7586cac97d68f84cd2fdf")
;send ("%opsiservicePassword%")
;send ("{TAB}")
send ("{ENTER}")

[DosInAnIcon_nslookup]
@echo off
nslookup %opsiserver%

[execwith_autoit_close_trace_window]
; waiting for the window
WinWait("$opsi_message_title$","comment: in trace window")
Sleep(500)
; activating
WinActivate("$opsi_message_title$","comment: in trace window")
send ("!o")
WinWait("$opsi_message_title$","comment: in trace window")
Sleep(500)
; activating
WinActivate("$opsi_message_title$","comment: in trace window")
send ("!o}")
WinWait("$opsi_message_title$","comment: should be turned off by autoit")
Sleep(500)
; activating
WinActivate("$opsi_message_title$","comment: should be turned off by autoit")
Sleep(500)
send ("!e")
exit

;[Execwith_autoit_close_showmessage]
;Func opsiwinwait($title, $text, $maxseconds, $logname)
;	Local $exists = 0
;	Local $seconds = 0
;	Local $mylog
;	$mylog = FileOpen($logname, 1)
;	While ($seconds <= $maxseconds) and ($exists = 0)
;		$exists = WinExists($title , $text)
;		FileWriteLine($mylog,"win: " & $title & " ; " & $text & " exists result (1=exists): " & $exists )
;		$seconds = $seconds + 1
;		sleep(1000)
;	WEnd
;	FileClose($mylog)
;EndFunc
;
;
;Func opsiControlClick($title, $text, $id, $maxseconds, $logname)
;	Local $result = 0
;	Local $seconds = 0
;	Local $mylog
;	$mylog = FileOpen($logname, 1)
;	While ($seconds <= $maxseconds) and ($result = 0)
;		$result = ControlClick($title , $text,$id)
;		FileWriteLine($mylog,"answer for " & $title & " ; " & $text & " id: " & $id & " sended: result (1=success) : " & $result)
;		$seconds = $seconds + 1
;		sleep(500)
;	WEnd
;	FileClose($mylog)
;EndFunc
;
;; exact title match
;Opt("WinTitleMatchMode", 3)
;$mylog = FileOpen("%opsiLogDir%\au3.log", 2)
;FileWriteLine($mylog,"auto-it started - waiting for the window")
;FileClose($mylog)
;opsiwinwait("Systeminfo" , "", 200, "%opsiLogDir%\au3.log")
;opsiControlClick("Systeminfo" , "", "[CLASS:Button; INSTANCE:1]", 10, "%opsiLogDir%\au3.log")
;Sleep(500)
;;and good bye
;Exit

[Execwith_autoit_close_showmessage]
#include "%scriptpath%\autoitlib\opsi-autoit-lib.au3"
; exact title match
Opt("WinTitleMatchMode", 3)
$winhandle = 0
$hTimer = TimerInit()
$mylog = FileOpen("%opsiLogDir%\au3.log", 2)
FileWriteLine($mylog,"auto-it started - waiting for the window")
FileClose($mylog)
opsiLogWinList("%opsiLogDir%\au3.log")
opsiwinwait("Systeminfo" , "", 60, "%opsiLogDir%\au3.log")
$winhandle = opsiwinactivate("Systeminfo" , "", 20, "%opsiLogDir%\au3.log")
WinSetState($winhandle, "",@SW_MAXIMIZE)
opsiControlClick("Systeminfo" , "", "[CLASS:Button; INSTANCE:1]", 10, "%opsiLogDir%\au3.log")
Sleep(500)
;and good bye
Exit


[DosInAnIcon_getTask_autoit3]
@echo off
tasklist /FI "IMAGENAME eq autoit3.exe"

[DosInAnIcon_controls_getWorkingDirectory]
@echo off
rem this should print the working directory:
echo %cd%

[ShellInAnIcon_controls_getWorkingDirectory]
# this should print the working directory:
pwd

[execwith_autoit_close_helper]
WinWait("opsi-helper-child","")
; activating
WinActivate("opsi-helper-child","")
send ("{TAB}")
send ("{ENTER}")
exit

[dosbatch_profiledir]
@echo off
dir "%systemroot%" /b

[sub_file_exists]
Set $tmp$ = "%systemroot%\"+"$x$"+"\Mozilla\Firefox\profiles.ini"
if FileExists($tmp$)
	comment "found"
else
	comment "not found"
endif

[opsiServiceCall_setFollowUp]
"method": "setProductActionRequest"
"params": [
			"opsi-winst-test-followup",
			"%HostID%",
			"setup"
			]