encoding=utf8

if ($Flag_winst_local_functions$ = "on") or ($MasterFlag$ = "on")

	Message "testing local functions"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing local functions"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	Set $ExpectedResult$ = "o.k."
	; start testing
	set $TestResult$ = "o.k."
	
	if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12")
	
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "Local Functions"
		
		DefFunc myFunc(val $str1$ : string, $str2$ : string) : string
			set $result$ = $str1$ + $str2$
		endfunc
		
		set $ConstTest$ = "heho"
		set $CompValue$ = myFunc("he","ho")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "he" +  timeStampAsFloatStr
		set $CompValue$ = myFunc("he",timeStampAsFloatStr)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $tmp$ = 'ha'
		set $ConstTest$ = "heha"
		set $CompValue$ = myFunc("he",$tmp$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $str1$ = 'ha'
		set $ConstTest$ = "heha"
		set $CompValue$ = myFunc("he",$str1$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif

				
		DefFunc myFunc1(val $str1$ : string, $list1$ : stringlist) : stringlist
			set $result$ = createStringlist($str1$ , takeString(2,$list1$))
		endfunc
		
		set $list2$ = splitstring("/etc/opsi/huhu","/")
		set $list1$ = myFunc1("hi",$list2$)
		set $ConstTest$ = "hi+opsi"
		set $CompValue$ = composestring($list1$,'+')
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		DefFunc myFunc2($str1$ : string) : string
			set $result$ = booltostring($str1$)
		endfunc
		
		set $ConstTest$ = "true"
		set $CompValue$ = myFunc2("true")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		DefFunc myFunc3($str1$ : string) : string
			DefVar $locstr1$
			set $locstr1$ = '123'
			set $result$ = $locstr1$ + $str1$
		endfunc
		
		set $ConstTest$ = "123he"
		set $CompValue$ = myFunc3("he")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif


		DefFunc myFunc4($str1$ : string) : string
			DefVar $locstr1$
			
			DefFunc myFunc5($str1$ : string) : string
				set $result$ = 'inner' + $str1$
			endfunc
		
			set $locstr1$ = '123'
			set $result$ = $str1$ + myFunc5($locstr1$)
		endfunc
		
		set $ConstTest$ = "outerinner123"
		set $CompValue$ = myFunc4("outer")
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif


		DefFunc myFunc6(ref $str1$ : string) : string
			DefVar $locstr1$
			set $locstr1$ = '123'
			set $str1$ = 'setinlocal'
			set $result$ = $locstr1$ + $str1$
		endfunc
		
		set $tmp$ = 'hi'
		set $ConstTest$ = "123setinlocal"
		set $CompValue$ = myFunc6($tmp$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		set $ConstTest$ = "setinlocal"
		set $CompValue$ = $tmp$
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		
		DefFunc myFunc7(ref $list1$ : stringlist) : stringlist
			DefStringlist $loclist1$
			set $loclist1$ = splitstring("/a/b/c","/")
			set $list1$ = createStringList('setinlocal')
			set $loclist1$ = addListToList($loclist1$,$list1$)
			set $result$ = $loclist1$
		endfunc
		
		set $list2$ = splitstring("/etc/opsi/huhu","/")
		set $list1$ = myFunc7($list2$)
		set $ConstTest$ = "+a+b+c+setinlocal"
		set $CompValue$ = composestring($list1$,'+')
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "setinlocal"
		set $CompValue$ = takestring(0,$list2$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif


		DefFunc myFunc8($str1$ : string) : stringlist
			DefStringlist $loclist1$
			set $loclist1$ = getoutstreamfromsection("shellInAnIcon_test")
			set $result$ = $loclist1$
			
			[shellinanicon_test]
			$str1$
		endfunc
		
		if GetOS = 'Linux'
			set $list1$ = myFunc8('pwd')
		else
			set $list1$ = myFunc8('echo %cd%')
		endif
		
		if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.0.10")
			comment " Testing repeated function call with local variables ..."
			comment "should give no syntax error here"
			if GetOS = 'Linux'
				set $list1$ = myFunc8('pwd')
			else
				set $list1$ = myFunc8('echo %cd%')
			endif
			
			if GetOS = 'Linux'
				set $list1$ = myFunc8('pwd')
			else
				set $list1$ = myFunc8('echo %cd%')
			endif
			
			comment " Testing fuction call while if ..."
			
			DefFunc function-test($VarSub1$ : string) : string
				set $result$ = $VarSub1$
				
				if ($result$ = "1")
				   comment "Result ist okay"
				else
				   comment "Result ist nicht okay"
				endif
			endfunc
			
			set $ConstTest$ = "1"
			if $ConstTest$ = "1"
				set $CompValue$ = function-test($ConstTest$)
				if ($ConstTest$ = $CompValue$)
					comment "passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "failed"
				endif
				set $ConstTest$ = "2"
				if $ConstTest$ = "2"
					comment "passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "failed"
				endif
			endif
		endif ;4.12.10
		
		if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.0.13")
			importLib "%scriptpath%\standalone-tests\functionlib.opsiscript"
			switch $OS$
				case "Windows_nt"
					set $ConstTest$ = "9"
					set $list1$ = myFunc10('echo %cd%')
				endcase
				case "Linux"
					set $ConstTest$ = "9"
					set $list1$ = myFunc10('pwd')
				endcase
				case "macos"
					set $ConstTest$ = "5"
					set $list1$ = myFunc10('pwd')
				endcase
			endswitch
			if count($list1$) int= $ConstTest$
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			
			sub "%scriptpath%\standalone-tests\sub_defined_functions12.opsiscript"
			if count($list1$) int= $ConstTest$
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif

		endif
	else
		set $TestResult$ = "not tested"
	endif ; 4.12
	
	if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.0.16")
	
		comment " Testing fuction with no (void) result ..."
		DefFunc myNoResultFunc(ref $str1$ : string) : void
			set $str1$ = "huhu"
		endfunc
		set $CompValue$ = "haha"
		set $ConstTest$ = "huhu"
		myNoResultFunc($CompValue$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment " Testing fuction with no parameters ..."
		DefFunc myNoParamFunc() : string
			set $result$ = "huhu"
		endfunc
		set $ConstTest$ = "huhu"
		set $CompValue$ = myNoParamFunc()
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
	else
		set $TestResult$ = "not tested"
	endif ; 4.16
	
	if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.0.17")
		comment " Testing function in loop ..."
	
		deffunc copy_str_to_list($srv_str$ : string, val $full_srv_list$ : stringlist, ref $dep_srv_list$ : stringlist) : void
			comment "starting oca_check_services with: "+$srv_str$
			if "" = takeFirstStringContaining($full_srv_list$,$srv_str$)
				logwarning "Requested service:"+$srv_str$+" not found. - will be ignored."
			else
				comment "Requested service: "+$srv_str$+" found. - will be used."
				set $dep_srv_list$ = addtolist($dep_srv_list$, $srv_str$)
			endif
			comment "finished oca_check_services with: "+$srv_str$
		endfunc
		
		set $list1$ = createStringlist("a","b","c","d","e","f","g","h","i","j")
		set $list2$ = createStringlist("a","e")
		set $list3$ = emptyList($list3$)
		
		for %servicestr% in $list2$ do copy_str_to_list("%servicestr%", $list1$, $list3$)
		if count($list3$) INT> "0"
			set $CompValue$ = composeString($list3$,"|")
		endif
		
		set $ConstTest$ = "a|e"
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif ; 4.17

if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.12.0.17")
		comment " Testing function with stringtobool ..."
	
		DefFunc myboolstrFunc1($str1$ : string, ref $str2$ : string, $list$: stringlist) : string
			if $str1$ > "0"
				set $result$ = "true"
			else
				set $result$ = "false"
			endif
		endfunc
		
		if not(stringtobool(myboolstrFunc1("1",$refstr$,$list$)))
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		else
			comment "passed"
		endif
		
		
		comment " Testing repeated call of function with local vars ..."
	
		DefFunc myboolstrFunc2($str1$ : string, ref $str2$ : string, $list$: stringlist) : string
			DefVar $mystr$
			Defstringlist $mylist$
			set $mystr$ = $str2$
			set $mylist$ = $list$
			if $str1$ > "0"
				set $result$ = "true"
			else
				set $result$ = "false"
			endif
		endfunc
		
		if not(stringtobool(myboolstrFunc2("1",$refstr$,$list$)))
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		else
			comment "passed"
		endif
		if not(stringtobool(myboolstrFunc2("1",$refstr$,$list$)))
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		else
			comment "passed"
		endif
		if not(stringtobool(myboolstrFunc2("1",$refstr$,$list$)))
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		else
			comment "passed"
		endif

		DefFunc myboollistFunc2($str1$ : string, ref $str2$ : string, $list$: stringlist) : stringlist
			DefVar $mystr$
			Defstringlist $mylist$
			set $mystr$ = $str2$
			set $mylist$ = $list$
			if $str1$ > "0"
				set $result$ = createstringlist("true")
			else
				set $result$ = createstringlist("false")
			endif
		endfunc
		
		if not(stringtobool(takeString(0,myboollistFunc2("1",$refstr$,$list$))))
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		else
			comment "passed"
		endif
		if not(stringtobool(takeString(0,myboollistFunc2("1",$refstr$,$list$))))
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		else
			comment "passed"
		endif
		if not(stringtobool(takeString(0,myboollistFunc2("1",$refstr$,$list$))))
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		else
			comment "passed"
		endif

		DefFunc myboolvoidFunc2($str1$ : string, ref $str2$ : string, $list$: stringlist) : void
			DefVar $mystr$
			Defstringlist $mylist$
			set $mystr$ = $str2$
			set $mylist$ = $list$
			if $str1$ > "0"
				set $str2$ = "true"
			else
				set $str2$ = "false"
			endif
		endfunc
		
		myboolvoidFunc2("1",$refstr$,$list$)
		if not(stringtobool($refstr$))
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		else
			comment "passed"
		endif
		
		myboolvoidFunc2("1",$refstr$,$list$)
		if not(stringtobool($refstr$))
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		else
			comment "passed"
		endif
		
		myboolvoidFunc2("1",$refstr$,$list$)
		if not(stringtobool($refstr$))
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		else
			comment "passed"
		endif

	endif ; 4.12.0.20

	sub_compareResult
	set $winst_local_functions$ = $SubResult$

endif


