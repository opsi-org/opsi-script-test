encoding=utf8

if ($Flag_winst_file$ = "on") or ($MasterFlag$ = "on")
	Message "testing file functions"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing file functions"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	Set $ExpectedResult$ = "o.k."
	; start testing
	set $TestResult$ = "o.k."
	
	
	Set $DirectorySubDirectory = $HomeTestFiles$+"\subDirectory"
	Set $FileCopyTest$ = $HomeTestFiles$+"\dummy.txt"
	Set $FileCopyTestSubDirectory$ = $HomeTestFiles$+"\subDirectory\CopyTestSubDirectory.txt"
	
	if ($INST_SystemType$ = "64 Bit System") and ($OS$="Windows_NT")
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "64 Bit redirection"
		Files_copy_test_to_system32
		if FileExists("%System%\dummy.txt")
			comment "passed"
		else
			LogWarning "failed"
			set $TestResult$ = "not o.k."
		endif
		if FileExists64("%System%\dummy.txt")
			comment "no redirection for 32 bit"
		else
			comment "redirection for 32 bit"
		endif
		if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.4")
			ExecWith_remove_test_from_system32 '%System%\cmd.exe' /C winst /64bit
		else
			ExecWith_remove_test_from_system32 '%SystemRoot%\cmd64.exe' /C
		endif
		ExecWith_remove_test_from_system32 'cmd.exe' /C
		Files_copy_test_to_system32 /64Bit
		if FileExists64("%System%\dummy.txt")
			comment "passed"
		else
			LogWarning "failed"
			set $TestResult$ = "not o.k."
		endif
		ExecWith_remove_test_from_system32 'cmd.exe' /C
		if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.4")
			ExecWith_remove_test_from_system32 '%System%\cmd.exe' /C winst /64bit
		else
			ExecWith_remove_test_from_system32 '%SystemRoot%\cmd64.exe' /C
		endif
		
		Files_copy_test_to_programfiles
		if FileExists("%ProgramFilesDir%\opsi.org\test\dummy.txt")
			comment "passed"
		else
			LogWarning "failed"
			set $TestResult$ = "not o.k."
		endif
		ExecWith_remove_test_from_programfiles 'cmd.exe' /C
		Files_copy_test_to_programfiles /64Bit
		if FileExists64("%ProgramFilesDir%\opsi.org\test\dummy.txt")
			comment "passed"
		else
			LogWarning "failed"
			set $TestResult$ = "not o.k."
		endif
		if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.4")
			ExecWith_remove_test_from_programfiles '%System%\cmd.exe' /C winst /64bit
		else
			ExecWith_remove_test_from_programfiles '%SystemRoot%\cmd64.exe' /C
		endif
		
		Files_copy_test_to_programfiles2
		if FileExists("c:\program files\opsi.org\test\dummy.txt")
			comment "passed"
		else
			LogWarning "failed"
			set $TestResult$ = "not o.k."
		endif
		if FileExists64("c:\program files\opsi.org\test\dummy.txt")
			comment "no redirection for 32 bit"
		else
			comment "redirection for 32 bit"
		endif
		if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.4")
			ExecWith_remove_test_from_programfiles2 '%System%\cmd.exe' /C winst /64bit
		else
			ExecWith_remove_test_from_programfiles2 '%SystemRoot%\cmd64.exe' /C
		endif
		ExecWith_remove_test_from_programfiles2 'cmd.exe' /C
		Files_copy_test_to_programfiles2 /64Bit
		if FileExists64("c:\program files\opsi.org\test\dummy.txt")
			comment "passed"
		else
			LogWarning "failed"
			set $TestResult$ = "not o.k."
		endif
		if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.4")
			ExecWith_remove_test_from_programfiles2 '%System%\cmd.exe' /C winst /64bit
		else
			ExecWith_remove_test_from_programfiles2 '%SystemRoot%\cmd64.exe' /C
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "SysNative Bit redirection"
		Files_copy_test_to_system32
		if FileExists32("%System%\dummy.txt")
			comment "passed"
		else
			LogWarning "failed"
			set $TestResult$ = "not o.k."
		endif
		if FileExistsSysNative("%System%\dummy.txt")
			comment "no redirection for 32 bit"
		else
			comment "redirection for 32 bit"
		endif
		if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.4")
			ExecWith_remove_test_from_system32 '%System%\cmd.exe' /C winst /64bit
		else
			ExecWith_remove_test_from_system32 '%SystemRoot%\cmd64.exe' /C
		endif
		ExecWith_remove_test_from_system32 'cmd.exe' /C
		Files_copy_test_to_system32 /SysNative
		if FileExistsSysNative("%System%\dummy.txt")
			comment "passed"
		else
			LogWarning "failed"
			set $TestResult$ = "not o.k."
		endif
		ExecWith_remove_test_from_system32 'cmd.exe' /C
		if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.4")
			ExecWith_remove_test_from_system32 '%System%\cmd.exe' /C winst /64bit
		else
			ExecWith_remove_test_from_system32 '%SystemRoot%\cmd64.exe' /C
		endif
		
		Files_copy_test_to_programfiles
		if FileExists32("%ProgramFilesDir%\opsi.org\test\dummy.txt")
			comment "passed"
		else
			LogWarning "failed"
			set $TestResult$ = "not o.k."
		endif
		ExecWith_remove_test_from_programfiles 'cmd.exe' /C
		Files_copy_test_to_programfiles /SysNative
		if FileExistsSysNative("%ProgramFilesDir%\opsi.org\test\dummy.txt")
			comment "passed"
		else
			LogWarning "failed"
			set $TestResult$ = "not o.k."
		endif
		if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.4")
			ExecWith_remove_test_from_programfiles '%System%\cmd.exe' /C winst /64bit
		else
			ExecWith_remove_test_from_programfiles '%SystemRoot%\cmd64.exe' /C
		endif
		
		Files_copy_test_to_programfiles2
		if FileExists32("c:\program files\opsi.org\test\dummy.txt")
			comment "passed"
		else
			LogWarning "failed"
			set $TestResult$ = "not o.k."
		endif
		if FileExistsSysNative("c:\program files\opsi.org\test\dummy.txt")
			comment "no redirection for 32 bit"
		else
			comment "redirection for 32 bit"
		endif
		if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.4")
			ExecWith_remove_test_from_programfiles2 '%System%\cmd.exe' /C winst /64bit
		else
			ExecWith_remove_test_from_programfiles2 '%SystemRoot%\cmd64.exe' /C
		endif
		ExecWith_remove_test_from_programfiles2 'cmd.exe' /C
		Files_copy_test_to_programfiles2 /SysNative
		if FileExists64("c:\program files\opsi.org\test\dummy.txt")
			comment "passed"
		else
			LogWarning "failed"
			set $TestResult$ = "not o.k."
		endif
		if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.4")
			ExecWith_remove_test_from_programfiles2 '%System%\cmd.exe' /C winst /64bit
		else
			ExecWith_remove_test_from_programfiles2 '%SystemRoot%\cmd64.exe' /C
		endif
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "delete -f -d[n] -s"
	message "delete"
	
	if (FileExists($HomeTestFiles$))
		Files_empty_folder_files
	endif
	
	if not(FileExists($HomeTestFiles$))
		if $OS$ = "Windows_NT"
			DosInAnIcon_createDirectory
		else
			ShellInAnIcon_Linux_createDirectory
		endif
		
		; delete
		comment "delete deletes directories and the files in this directory"
		if (FileExists($HomeTestFiles$))
			Files_delete
		endif
		
		if not (FileExists($HomeTestFiles$+"\subDirectory\subsubDirectory"))
			comment "delete passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "delete failed"
		endif
		
		; delete
		comment "delete deletes also hidden files and if the filename starts with a dot"
		if (FileExists($HomeTestFiles$))
			Files_delete_hidden
		endif
		if not (FileExists($HomeTestFiles$+"\.hidden.txt"))
			comment "delete passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "delete failed"
		endif
		
		; -f
		message "delete -f"
		if (FileExists($HomeTestFiles$))
			Files_delete_f
		endif
		
		if not (FileExists($HomeTestFiles$+"\subDirectory\readonly"))
			comment "-f passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "-f failed"
		endif
		
		if $OS$ = "Windows_NT"
			; -d [n] n = 2
			message "delete -d[n]"
			Files_delete_d
			if not (FileExists($HomeTestFiles$+"\dummy.txt"))
				if FileExists($HomeTestFiles$+"\dummyToday.txt")
					comment "-d[n] passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "-d[n] failed"
				endif
			else
				set $TestResult$ = "not o.k."
				LogWarning "-d[n] failed"
			endif
			
			if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.4.3")
				; -c
				message "del -rc"
				Files_copy_del_c
				winbatch_call_del_c /LetThemGo
				comment "This should give an Warning: File in use ...."
				markErrorNumber
				Files_del_c
				if errorsOccuredSinceMark = 0
					comment "passed"
				else
					LogWarning "failed"
					set $TestResult$ = "not o.k."
				endif
				killtask $helper_child_bin_name$
				if FileExists("%opsiTmpDir%\del_c_test\")
					if FileExists("%opsiTmpDir%\del_c_test\helperchild.exe")
						comment "del -c passed"
					else
						set $TestResult$ = "not o.k."
						LogWarning "del -c  failed"
					endif
				else
					set $TestResult$ = "not o.k."
					LogWarning "del -c  failed"
				endif
			endif ; 4.12.4.3
		endif ; windows
		
		; -s
		message "delete -s"
		if (FileExists($HomeTestFiles$))
			Files_delete_s
		endif
		
		if not (FileExists($HomeTestFiles$))
			comment "-s passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "-s failed"
		endif
	else
		set $TestResult$ = "not o.k."
		logError "Fatal: could not delete all files"
		isFatalError
	endif
	
	if CompareDotSeparatedNumbers("%OpsiscriptVersion%","4.11.2.1") >= "0"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "del -f -d[n] -s"
		message "del"
		
		if (FileExists($HomeTestFiles$))
			Files_del_empty_folder
		endif
		
		if not(FileExists($HomeTestFiles$))
			if $OS$ = "Windows_NT"
				DosInAnIcon_createDirectory
			else
				ShellInAnIcon_Linux_createDirectory
			endif
			
			
			; del
			comment "del deletes directories and the files in this directory"
			if (FileExists($HomeTestFiles$))
				Files_del
			endif
			
			if not (FileExists($HomeTestFiles$+"\subDirectory\subsubDirectory"))
				comment "del passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "del failed"
			endif
			
			; del
			comment "del deletes also hidden files and if the filename starts with a dot"
			if (FileExists($HomeTestFiles$))
				Files_del_hidden
			endif
			if not (FileExists($HomeTestFiles$+"\.hidden.txt"))
				comment "del passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "del failed"
			endif
			
			; -f
			message "del -f"
			if (FileExists($HomeTestFiles$))
				Files_del_f
			endif
			
			if not (FileExists($HomeTestFiles$+"\subDirectory\readonly"))
				comment "-f passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "-f failed"
			endif
			
			if $OS$ = "Windows_NT"
				; -d [n] n = 2
				message "del -d[n]"
				Files_del_d
				if not (FileExists($HomeTestFiles$+"\dummy.txt"))
					if FileExists($HomeTestFiles$+"\dummyToday.txt")
						comment "-d[n] passed"
					else
						set $TestResult$ = "not o.k."
						LogWarning "-d[n] failed"
					endif
				else
					set $TestResult$ = "not o.k."
					LogWarning "-d[n] failed"
				endif
			endif ; windows
			
			; -s
			message "del -s"
			if (FileExists($HomeTestFiles$))
				Files_del_s
			endif
			
			if not (FileExists($HomeTestFiles$))
				comment "-s passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "-s failed"
			endif
		else
			set $TestResult$ = "not o.k."
			logError "Fatal: could not delete all files"
			isFatalError
		endif
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	comment "copy -s -v -d -u"
	message "copy "
	
	if (FileExists($HomeTestFiles$))
		Files_empty_folder_files
	endif
	
	if not(FileExists($HomeTestFiles$))
		; copy -s
		; ShellInAnIcon_ls_testfiles
		message "copy -s"
		Files_copy_s
		if (FileExists($FileCopyTest$) AND FileExists($FileCopyTestSubDirectory$))
			comment "-s passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "-s failed"
		endif
		
		
		if $OS$ = "Windows_NT"
			; copy -v
			message "copy -v"
			Files_copy_v_dllnew
			if (FileExists($HomeTestFiles$+"\dummy.dll"))
				Files_copy_v
				DefStringList $FileInfo$
				set $FileInfo$ = getFileInfoMap($HomeTestFiles$+"\dummy.dll")
				set $ConstTest$ = "2.3.4.0"
				set $CompValue$ = getValue("FileVersion", $FileInfo$)
				
				if ($ConstTest$ = $CompValue$)
					comment "-v passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "-v failed"
				endif
			else
				set $TestResult$ = "not o.k."
				isFatalError
				comment "could not copy file"
			endif
			
			message "copy -c "
			Files_empty_folder_files
			Files_copy_c
			winbatch_copy_c /LetThemGo
			comment "This should give an Warning: File in use ...."
			markErrorNumber
			Files_copy_c
			if errorsOccuredSinceMark = 0
				comment "passed"
			else
				LogWarning "failed"
				set $TestResult$ = "not o.k."
			endif
			killtask $helper_child_bin_name$
		endif ; windows
		
		if $OS$ = "Windows_NT"
			; copy -d
			message "copy -d "
			Files_empty_folder_files
			Files_copy_d_exenew
			comment "copy exe on existing exe"
			Files_copy_d_exenew
			if (FileExists($HometestFiles$+"\dummy.exe"))
				Files_copy_d
				set $list1$ = getOutStreamFromSection("DosInAnIcon_LastWriteTime")
				set $tmp$ = takeString(7, $list1$)
				set $CompValue$ = Trim(SubstringBefore($tmp$, "454.656 dummy.exe"))
				set $ConstTest$ = "29.04.2007  12:43"
				comment " >>> Test temporary disabled"
				;if ($ConstTest$ = $CompValue$)
				;	comment "-d passed"
				;else
				;	set $TestResult$ = "not o.k."
				;	LogWarning "-d failed"
				;endif
			else
				set $TestResult$ = "not o.k."
				isFatalError
				comment "could not copy file"
			endif
			; copy -u
			message "copy -u"
			Files_empty_folder_files
			if $OS$ = "Windows_NT"
				DosInAnIcon_prepare_copy_u
			else
				ShellInAnIcon_Linux_prepare_copy_u
			endif
			
			set $list1$ = getOutStreamFromSection("DosInAnIcon_prepare_copy_u_dir_main")
			set $tmp$ = takeString(7, $list1$)
			set $ConstTest$ = Trim(SubstringBefore($tmp$, "13 dummy.txt"))
			set $tmp$ = takeString(8, $list1$)
			set $ConstTest2$ = Trim(SubstringBefore($tmp$, "13 dummy2.txt"))
			Files_copy_u
			set $list1$ = getOutStreamFromSection("DosInAnIcon_prepare_copy_u_dir_main")
			set $tmp$ = takeString(7, $list1$)
			set $CompValue$ = Trim(SubstringBefore($tmp$, "13 dummy.txt"))
			set $tmp$ = takeString(8, $list1$)
			set $CompValue2$ = Trim(SubstringBefore($tmp$, "13 dummy2.txt"))
			if (($ConstTest$ = $CompValue$) AND ($ConstTest2$ = $CompValue2$))
				comment "-u passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "-u failed"
			endif
		endif ; windows
		
		Files_empty_folder_files
	else
		set $TestResult$ = "not o.k."
		logError "Fatal: could not delete all files"
		isFatalError
	endif
	
	;if $OS$ = "Windows_NT"
	if ($OS$ = "Windows_NT") or (not($OS$ = "Windows_NT") and (CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.4.18")))
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "copy -x"
		
		if (FileExists($HomeTestFiles$))
			Files_empty_folder_files
		endif
		
		if not(FileExists($HomeTestFiles$))
			; copy -x
			Files_copy_x
			if (FileExists($HomeTestFiles$+"\dummy\dummyFile.txt") AND FileExists($HomeTestFiles$+"\dummy\dummyFile2.txt"))
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			Files_empty_folder_files
		else
			set $TestResult$ = "not o.k."
			logError "Fatal: could not delete all files"
			isFatalError
		endif
	endif ; windows / 4.12.4.18
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "copy -e"
	
	if (FileExists($HomeTestFiles$))
		Files_empty_folder_files
	endif
	
	if not (FileExists($HomeTestFiles$))
		Files_copy_e
		if (FileExists($DirectorySubDirectory))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		Files_empty_folder_files
	else
		set $TestResult$ = "not o.k."
		logError "Fatal: could not delete all files"
		isFatalError
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "copy -w"
	
	if (FileExists($HomeTestFiles$))
		Files_empty_folder_files
	endif
	
	if not (FileExists($HomeTestFiles$))
		if $OS$ = "Windows_NT"
			DosInAnIcon_prepare_copy_w
		else
			ShellInAnIcon_Linux_prepare_copy_w
		endif
		
		Files_copy_w
		Set $ConstTest$ = "dummy"
		Set $ConstTest2$ = "Hello World"
		Set $list1$ = loadTextFile($HomeTestFiles$ +'\dummy.txt')
		Set $list2$ = loadTextFile($HomeTestFiles$ +"\dummy2.txt")
		Set $CompValue$ = Trim(takeString(0, $list1$))
		Set $CompValue2$ = Trim(takeString(0, $list2$))
		if (($ConstTest$ = $CompValue$) AND ($ConstTest2$ = $CompValue2$))
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		Files_empty_folder_files
	else
		set $TestResult$ = "not o.k."
		logError "Fatal: could not delete all files"
		isFatalError
	endif
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	message "copy -n"
	
	if (FileExists($HomeTestFiles$))
		Files_empty_folder_files
	endif
	
	if not (FileExists($HomeTestFiles$))
		if $OS$ = "Windows_NT"
			DosInAnIcon_prepare_copy_n
		else
			ShellInAnIcon_Linux_prepare_copy_n
		endif
		
		Files_copy_n
		Set $ConstTest$ = "dummy"
		Set $list1$ = loadTextFile($HomeTestFiles$ +'\dummy.txt')
		Set $CompValue$ = Trim(takeString(0, $list1$))
		if ($ConstTest$ = $CompValue$)
			if (FileExists($HomeTestFiles$+"\dummy2.txt"))
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		Files_empty_folder_files
	else
		set $TestResult$ = "not o.k."
		logError "Fatal: could not delete all files"
		isFatalError
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	comment "copy -c"; ???
	comment "not tested"
	
	if $OS$ = "Windows_NT"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "copy -r"
		
		if (FileExists($HomeTestFiles$))
			Files_empty_folder_files
		endif
		
		if not (FileExists($HomeTestFiles$))
			if $OS$ = "Windows_NT"
				DosInAnIcon_prepare_copy_r
			else
				ShellInAnIcon_Linux_prepare_copy_r
			endif
			
			Files_copy_r
			;pause "stop"
			if $OS$ = "Windows_NT"
				set $list1$ = getOutStreamFromSection("DosInAnIcon_copy_r")
				set $tmp$ = takeString(5, $list1$)
				set $CompValue$ = takeFirstStringContaining(splitString ($tmp$, " "),"dummy.txt")
			else
				set $list1$ = getOutStreamFromSection("ShellInAnIcon_Linux_copy_r")
				set $tmp$ = takeString(5, $list1$)
				set $CompValue$ = takeFirstStringContaining(splitString ($tmp$, " "),"dummy.txt")
			endif
			Set $ConstTest$ = "dummy.txt"
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			Files_empty_folder_files
		else
			set $TestResult$ = "not o.k."
			logError "Fatal: could not delete all files"
			isFatalError
		endif
		markErrorNumber
		Files_work_on_profiles /AllNTUserProfiles
		if errorsOccuredSinceMark > 0
			LogWarning "failed"
			set $TestResult$ = "not o.k."
		endif
		Files_work_on_profiles_del_userp /AllNTUserProfiles
		set $list$ = getProfilesDirList
		Files_work_on_profiles_copy_userp /AllNTUserProfiles
		for %prof% in $list$ do sub_check_dir_exist_inprof
		Files_work_on_profiles_del_userp /AllNTUserProfiles
		for %prof% in $list$ do sub_check_dir_not_exist_inprof
		Files_work_on_profiles_copy_currp /AllNTUserProfiles
		for %prof% in $list$ do sub_check_dir_exist_inprof
		Files_work_on_profiles_del_currp /AllNTUserProfiles
		for %prof% in $list$ do sub_check_dir_not_exist_inprof
		
	endif ; windows
	
	if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.11.5.1")
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "hardlink, symlink, move, rename"
		
		if (FileExists($HomeTestFiles$))
			Files_empty_folder_files
		endif
		
		if not (FileExists($HomeTestFiles$))
			if $OS$ = "Windows_NT"
				DosInAnIcon_prepare_copy_r
			else
				ShellInAnIcon_Linux_prepare_copy_r
			endif
			
			Files_hardlink
			if FileExists($HomeTestFiles$+"\files\hardlink.txt")
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			
			Files_hardlink
			
			set $dotest$ = 'false'
			switch $OS$
				case "Windows_nt"
					if CompareDotSeparatedNumbers(GetMsVersionInfo,">=","6.0")
						set $dotest$ = 'true'
					endif
				endcase
				case "Linux"
					set $dotest$ = 'true'
				endcase
				case "macos"
					set $dotest$ = 'true'
				endcase
			endswitch
			if $dotest$ = 'true'
				Files_symlinklink
				if FileExists($HomeTestFiles$+"\files\symlink.txt")
					comment "passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "failed"
				endif
				if FileExists($HomeTestFiles$+"\files\symlink2.txt")
					comment "passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "failed"
				endif
				if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.4.23")
					comment ""
					comment "-------------------------------------"
					comment "Testing: "
					message "forcePathDelims, resolveSymlink, fileIsSymlink"
					set $ConstTest$ = forcePathDelims($HomeTestFiles$+"\files/dummy.txt")
					set $CompValue$ = resolveSymlink($HomeTestFiles$+"\files\symlink.txt")
					if ($ConstTest$ = $CompValue$)
						comment "passed"
					else
						set $TestResult$ = "not o.k."
						LogWarning "failed"
					endif
					set $CompValue$ = resolveSymlink($HomeTestFiles$+"\files\symlink2.txt")
					if ($ConstTest$ = $CompValue$)
						comment "passed"
					else
						set $TestResult$ = "not o.k."
						LogWarning "failed"
					endif
					set $CompValue$ = resolveSymlink($ConstTest$)
					if ($ConstTest$ = $CompValue$)
						comment "passed"
					else
						set $TestResult$ = "not o.k."
						LogWarning "failed"
					endif
					set $ConstTest$ = "nonsense"
					set $CompValue$ = resolveSymlink("nonsense")
					if ($ConstTest$ = $CompValue$)
						comment "passed"
					else
						set $TestResult$ = "not o.k."
						LogWarning "failed"
					endif
					set $ConstTest$ = ""
					set $CompValue$ = resolveSymlink("")
					if ($ConstTest$ = $CompValue$)
						comment "passed"
					else
						set $TestResult$ = "not o.k."
						LogWarning "failed"
					endif
					
					; Testing isSymLink(const filepath : string) : boolean
					if fileIsSymlink($HomeTestFiles$+"\files\symlink.txt")
						comment "passed"
					else
						set $TestResult$ = "not o.k."
						LogWarning "failed"
					endif
					
					if fileIsSymlink($HomeTestFiles$+"\files\symlink2.txt")
						comment "passed"
					else
						set $TestResult$ = "not o.k."
						LogWarning "failed"
					endif
					
					if not (fileIsSymlink(forcePathDelims($HomeTestFiles$+"\files/dummy.txt")))
						comment "passed"
					else
						set $TestResult$ = "not o.k."
						LogWarning "failed"
					endif
					
					if not (fileIsSymlink(""))
						comment "passed"
					else
						set $TestResult$ = "not o.k."
						LogWarning "failed"
					endif
					
					if not (fileIsSymlink("nonsense"))
						comment "passed"
					else
						set $TestResult$ = "not o.k."
						LogWarning "failed"
					endif
				endif ; OpsiscriptVersion 4.12.4.23
				Files_empty_folder2
				Files_symlinklink
			else
				comment "symlink command is not available in win < NT6"
			endif
			
			Files_move
			if FileExists($HomeTestFiles$+"\files\temp\rename.txt")
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			
			if FileExists($HomeTestFiles$+"\files\temp\move.txt")
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			
			if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.4.31")
				Files_prep_move_dir
				if DirectoryExists($HomeTestFiles$+"\files\subDirectory")
					Files_move_dir
				endif
				if DirectoryExists($HomeTestFiles$+"\files\renamedsubDirectory")
					comment "passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "move dir failed"
				endif
			endif
			
			Files_move
			if $dotest$ = 'true'
				;comment "symlink command is only available in NT6 and up"
				if FileExists($HomeTestFiles$+"\files\symlink.txt")
					comment "passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "failed"
				endif
			endif
			Files_empty_folder_files
		else
			set $TestResult$ = "not o.k."
			logError "Fatal: could not delete all files"
			isFatalError
		endif
	endif
	
	comment ""
	comment "-------------------------------------"
	comment "Testing: "
	comment "ExtractFilePath"
	set $ConstTest$ = "C:\program files\test\"
	Set $tmp$ = "C:\program files\test\test.exe"
	set $CompValue$ = ExtractFilePath($tmp$)
	if ($ConstTest$ = $CompValue$)
		comment "passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "failed"
	endif
	
	if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.1.0")
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		comment "ExtractFileExtension"
		set $ConstTest$ = ".exe"
		Set $tmp$ = "C:\program files\test\test.exe"
		set $CompValue$ = ExtractFileExtension($tmp$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = ""
		Set $tmp$ = "C:\program files\test\test"
		set $CompValue$ = ExtractFileExtension($tmp$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = ".huhu_haha"
		Set $tmp$ = "C:\program files\test\test.huhu_haha"
		set $CompValue$ = ExtractFileExtension($tmp$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		comment "ExtractFileName"
		set $ConstTest$ = "test.exe"
		Set $tmp$ = "C:\program files\test\test.exe"
		set $CompValue$ = ExtractFileName($tmp$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "test"
		Set $tmp$ = "C:\program files\test\test"
		set $CompValue$ = ExtractFileName($tmp$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		set $ConstTest$ = "test.huhu_haha"
		Set $tmp$ = "C:\program files\test\test.huhu_haha"
		set $CompValue$ = ExtractFileName($tmp$)
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		comment "DirectoryExists"
		if (FileExists($HomeTestFiles$))
			Files_empty_folder_files
		endif
		
		if not(FileExists($HomeTestFiles$))
			if $OS$ = "Windows_NT"
				DosInAnIcon_createDirectory
				if ($INST_SystemType$ = "64 Bit System")
					set $ConstTest$ = "true"
					Set $tmp$ = "C:\Windows\system32\Boot"
					set $tmp1$ = "64bit"
					set $CompValue$ = boolToString(DirectoryExists($tmp$,$tmp1$))
					if ($ConstTest$ = $CompValue$)
						comment "passed"
					else
						set $TestResult$ = "not o.k."
						LogWarning "failed"
					endif
					set $ConstTest$ = "true"
					Set $tmp$ = "C:\Windows\system32\Boot"
					set $tmp1$ = "sysnative"
					set $CompValue$ = boolToString(DirectoryExists($tmp$,$tmp1$))
					if ($ConstTest$ = $CompValue$)
						comment "passed"
					else
						set $TestResult$ = "not o.k."
						LogWarning "failed"
					endif
					set $ConstTest$ = "true"
					Set $tmp$ = "C:\Windows\system32\Boot"
					; fall back to sysnative
					set $CompValue$ = boolToString(DirectoryExists($tmp$))
					if ($ConstTest$ = $CompValue$)
						comment "passed"
					else
						set $TestResult$ = "not o.k."
						LogWarning "failed"
					endif
					set $ConstTest$ = "false"
					Set $tmp$ = "C:\Windows\system32\Boot"
					set $tmp1$ = "32bit"
					set $CompValue$ = boolToString(DirectoryExists($tmp$,$tmp1$))
					if ($ConstTest$ = $CompValue$)
						comment "passed"
					else
						set $TestResult$ = "not o.k."
						LogWarning "failed"
					endif
				endif
			else
				ShellInAnIcon_Linux_createDirectory
			endif
			set $ConstTest$ = "true"
			Set $tmp$ = $HomeTestFiles$+"\subDirectory"
			set $CompValue$ = boolToString(DirectoryExists($tmp$))
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			if $OS$ = "Windows_NT"
				; on windows a dir is not a file but fileexists sees it like on linux
				set $ConstTest$ = "true"
				set $CompValue$ = boolToString(FileExists($tmp$))
				if ($ConstTest$ = $CompValue$)
					comment "passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "failed"
				endif
			else
				; on unices (Linux / macos) a dir is a file
				set $ConstTest$ = "true"
				set $CompValue$ = boolToString(FileExists($tmp$))
				if ($ConstTest$ = $CompValue$)
					comment "passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "failed"
				endif
			endif
			set $ConstTest$ = "false"
			Set $tmp$ = $HomeTestFiles$+"\dummy.txt"
			set $CompValue$ = boolToString(DirectoryExists($tmp$))
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			set $ConstTest$ = "true"
			set $CompValue$ = boolToString(FileExists($tmp$))
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
		endif
	endif
	
	if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.1.0")
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "zipfile / unzipfile"
		
		if (FileExists($HomeTestFiles$))
			Files_empty_folder_files
		endif
		
		if not (FileExists($HomeTestFiles$))
			Files_fill_testfiles
			Files_zipfile
			if fileexists("%opsiTmpDir%\testfile.zip")
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			if fileexists("%opsiTmpDir%\testdir.zip")
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			Files_del_empty_folder
			Files_unzipfile_dir
			if fileexists($HomeTestFiles$+"\dummy.msi")
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			Files_del_empty_folder
			Files_unzipfile_file
			if fileexists($HomeTestFiles$+"\dummy.msi")
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			
			Files_del_empty_folder
			Set  $list1$ = listFiles("%ScriptPath%\","*.*","True")
			Files_zipfile_bigfolder
			Files_unzipfile_bigfolder
			Set  $list2$ = listFiles($HomeTestFiles$,"*.*","True")
			set $ConstTest$ = count($list1$)
			set $CompValue$ = count($list2$)
			if ($ConstTest$ = $CompValue$)
				comment "passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "failed"
			endif
			
			if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.12.4.32")
				markErrorNumber
				Files_unzipfile_to_profiles /AllNTUserProfiles
				if errorsOccuredSinceMark > 0
					LogWarning "failed"
					set $TestResult$ = "not o.k."
				endif
				Files_work_on_profiles_del_userp /AllNTUserProfiles
			endif
			;Files_empty_folder
		else
			set $TestResult$ = "not o.k."
			logError "Fatal: could not delete all files"
			isFatalError
		endif
		
	endif
	
	if $test_speed$ = "true"
		message "speed test: copy big dir"
		Files_del_empty_folder
		marktime
		Files_bigdir
		difftime
		switch $OS$
			case "Windows_nt"
				set $ConstTest$ = "95"
			endcase
			case "Linux"
				set $ConstTest$ = "95"
			endcase
			case "macos"
				set $ConstTest$ = "95"
			endcase
		endswitch
		comment "difftime should be about "+$ConstTest$+" seconds"
		set $difftime$ = getDiffTimeSec
		comment "difftime is about "+$difftime$+" seconds"
		set $CompValue$ = $difftime$
		if $ConstTest$ int>= $CompValue$
			comment "files copy speed  passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "files copy speed failed"
		endif
		Files_del_empty_folder
	endif
	
	
	
	; the zip command is not supported anymore
	; use a DosInAnIcon section with zip call
	; eg:
	;[DosinanIcon_desktop]
	;7Zip\7z.exe a "$backup$\$username$\Desktop\desktop.zip" "$username$\Desktop\*.*" ï¿½r
	;comment ""
	;comment "-------------------------------------"
	;comment "Testing: "
	;message "zip"
	;
	;if (FileExists($HomeTestFiles$))
	;	Files_empty_folder
	;endif
	;
	;if not (FileExists($HomeTestFiles$))
	;	DosInAnIcon_prepare_copy_r
	;	Files_zip
	;	set $list1$ = getOutStreamFromSection("DosInAnIcon_zip_test")
	;	set $tmp$ = takeString(5, $list1$)
	;	set $CompValue$ = takeFirstStringContaining(splitString ($tmp$, " "),"dummy.zip")
	;	Set $ConstTest$ = "dummy.zip"
	;	if ($ConstTest$ = $CompValue$)
	;		comment "passed"
	;	else
	;		set $TestResult$ = "not o.k."
	;		LogWarning "failed"
	;	endif
	;	Files_empty_folder
	;else
	;	set $TestResult$ = "not o.k."
	;	logError "Fatal: could not delete all files"
	;	isFatalError
	;endif
	
	
	sub_compareResult
	
	set $winst_file$ = $SubResult$
endif

;----------------   start   sections for files test ---------------------------------

[ExecWith_remove_test_from_system32]
%SystemDrive%
cd "%System%"
del "dummy.txt"

[Files_copy_test_to_programfiles]
copy "%ScriptPath%\test-files\testFiles\dummy.txt" "%ProgramFilesDir%\opsi.org\test"

[ExecWith_remove_test_from_programfiles]
%SystemDrive%
cd "%ProgramFilesDir%\opsi.org\test"
del "dummy.txt"

[Files_copy_test_to_programfiles2]
copy "%ScriptPath%\test-files\testFiles\dummy.txt" "c:\program files\opsi.org\test"

[ExecWith_remove_test_from_programfiles2]
%SystemDrive%
cd "c:\program files\opsi.org\test"
del "dummy.txt"


[DosInAnIcon_prepare_copy_r]
c:
mkdir "$HomeTestFiles$"
mkdir "$HomeTestFiles$\files"
cd "$HomeTestFiles$\files"
echo dummy > dummy.txt
attrib +R dummy.txt
echo dummy > dummy2.txt

[ShellInAnIcon_Linux_prepare_copy_r]
set -x
mkdir -p "$HomeTestFiles$"
mkdir -p "$HomeTestFiles$/files"
cd "$HomeTestFiles$/files"
echo "dummy" > dummy.txt
chmod ugo-rw dummy.txt
echo "dummy" > dummy2.txt

[DosInAnIcon_prepare_copy_n]
c:
mkdir "$HomeTestFiles$"
mkdir "$HomeTestFiles$\files"
cd "$HomeTestFiles$"
echo dummy > dummy.txt
cd "$HomeTestFiles$\files"
echo Hello World > dummy.txt
echo dummy > dummy2.txt

[ShellInAnIcon_Linux_prepare_copy_n]
set -x
mkdir -p "$HomeTestFiles$"
mkdir -p "$HomeTestFiles$/files"
cd "$HomeTestFiles$"
echo "dummy" > dummy.txt
cd "$HomeTestFiles$/files"
echo "Hello World" > dummy.txt
echo "dummy" > dummy2.txt

[DosInAnIcon_prepare_copy_w]
c:
mkdir $HomeTestFiles$
mkdir $HomeTestFiles$\files
cd $HomeTestFiles$
echo dummy > dummy.txt
attrib +R dummy.txt
echo dummy > dummy2.txt
cd "$HomeTestFiles$\files"
echo Hello World > dummy.txt
echo Hello World > dummy2.txt
cd "%opsiTmpDir%"
exit

[ShellInAnIcon_Linux_prepare_copy_w]
set -x
mkdir -p "$HomeTestFiles$"
mkdir -p "$HomeTestFiles$/files"
cd "$HomeTestFiles$"
echo "dummy" > dummy.txt
chmod ugo-w dummy.txt
echo "dummy" > dummy2.txt
cd "$HomeTestFiles$/files"
echo "Hello World" > dummy.txt
echo "Hello World" > dummy2.txt


[DosInAnIcon_prepare_copy_u]
c:
cd tmp
mkdir "$HomeTestFiles$"
mkdir "$HomeTestFiles$\files"
cd "$HomeTestFiles$"
echo Hello World > dummy.txt
copy dummy.txt "files\dummy.txt"
cd "$HomeTestFiles$\files"
echo Hello World Files> dummy2.txt
cd ..
ping 127.0.0.1 -n 60
echo Hello World > dummy2.txt
cd "%opsiTmpDir%"
exit

[DosInAnIcon_prepare_copy_u_dir_main]
@echo off
c:
cd $HomeTestFiles$
dir


[ShellInAnIcon_Linux_prepare_copy_u]
set -x
cd /tmp
mkdir -p "$HomeTestFiles$"
mkdir -p "$HomeTestFiles$/files"
cd "$HomeTestFiles$"
echo Hello World > dummy.txt
cp -a  dummy.txt "files/dummy.txt" .
cd "$HomeTestFiles$/files"
echo "Hello World Files"> dummy2.txt
cd ..
ping 127.0.0.1 -n 60
echo "Hello World" > dummy2.txt
cd "%opsiTmpDir%"
exit

[ShellInAnIcon_Linux_prepare_copy_u_dir_main]
set -x
cd $HomeTestFiles$
ls -l


[DosInAnIcon_createDirectory]
mkdir "$HomeTestFiles$"
mkdir "$HomeTestFiles$\subDirectory"
mkdir "$HomeTestFiles$\subDirectory\subsubDirectory"
c:
cd "$HomeTestFiles$"
copy "%ScriptPath%\test-files\testFiles\dummy.txt"
echo Hello World > dummyToday.txt
echo Hello World > readonly.txt
attrib +R "$HomeTestFiles$\readonly.txt"
echo Hello World > .hidden.txt
attrib +H "$HomeTestFiles$\.hidden.txt"
dir
cd "subDirectory\subsubDirectory"
echo Hello World > dummyToday.txt
cd "%opsiTmpDir%"
exit

[ShellInAnIcon_Linux_createDirectory]
set -x
mkdir -p "$HomeTestFiles$"
mkdir -p "$HomeTestFiles$/subDirectory"
mkdir -p "$HomeTestFiles$/subDirectory/subsubDirectory"
cd "$HomeTestFiles$"
cp -a "%ScriptPath%/test-files/testFiles/dummy.txt" .
echo "Hello World" > dummyToday.txt
echo "Hello World" > readonly.txt
chmod ugo-wx "$HomeTestFiles$/readonly.txt"
echo "Hello World" > .hidden.txt
ls
cd "subDirectory/subsubDirectory"
echo "Hello World" > dummyToday.txt

[Files_fill_testfiles]
copy -s "%ScriptPath%/test-files/testFiles/*.*" "$HomeTestFiles$"

[Files_empty_folder_files]
Delete -s -f -c "$HomeTestFiles$"
del -sfc "%opsiTmpDir%\testdir.zip"
del -sfc "%opsiTmpDir%\testfile.zip"

[Files_empty_folder2]
del -f "$HomeTestFiles$\files\symlink.txt"


[Files_delete_hidden]
Delete "$HomeTestFiles$\.hidden.txt"

[Files_delete]
Delete "$HomeTestFiles$\subDirectory\subsubDirectory"

[Files_delete_f]
Delete -f "$HomeTestFiles$\readonly.txt"

[Files_delete_d]
Delete -d2 "$HomeTestFiles$\*.*"

[Files_delete_s]
Delete -s "$HomeTestFiles$"


[Files_del_empty_folder]
Del -s -f -c "$HomeTestFiles$"

[Files_del_hidden]
Del "$HomeTestFiles$\.hidden.txt"

[Files_del]
Del "$HomeTestFiles$\subDirectory\subsubDirectory"

[Files_del_f]
Del -f "$HomeTestFiles$\readonly.txt"

[Files_del_d]
Del -d2 "$HomeTestFiles$\*.*"

[Files_del_s]
Del -s "$HomeTestFiles$"
Del -s "$HomeTestFiles$"

[Files_copy_del_c]
del -sf "%opsiTmpDir%\del_c_test\"
copy -s "%ScriptPath%\$opsi_script_test_helper_path$\*" "%opsiTmpDir%\del_c_test\"

[winbatch_call_del_c]
"%opsiTmpDir%\del_c_test\helperchild.exe" --wait=2

[Files_del_c]
del -crsf "%opsiTmpDir%\del_c_test\"

[ShellInAnIcon_ls_testfiles]
ls -l %ScriptPath%/test-files/testFiles/*

[Files_copy_s]
copy -s "%ScriptPath%\test-files\testFiles\*.*" $HomeTestFiles$

[Files_copy_v]
copy -v "%ScriptPath%\test-files\testFiles\old\*.*" $HomeTestFiles$

[Files_copy_v_dllnew]
copy "%ScriptPath%\test-files\testFiles\new\*.*" $HomeTestFiles$

[Files_copy_d]
copy -d "%ScriptPath%\test-files\testFiles\old\dummy.exe" $HomeTestFiles$

[Files_copy_d_exenew]
copy "%ScriptPath%\test-files\testFiles\new\dummy.exe" $HomeTestFiles$

[Files_copy_u]
copy -u "$HomeTestFiles$\files\dummy.txt" $HomeTestFiles$
copy -u "$HomeTestFiles$\files\dummy2.txt" $HomeTestFiles$

[Files_copy_e]
copy -e "%ScriptPath%\test-files\testFiles\*.*" $HomeTestFiles$

[Files_copy_x]
copy -x "%ScriptPath%\test-files\testFiles\dummy.zip" "$HomeTestFiles$\dummy"

[Files_copy_w]
copy -w "$HomeTestFiles$\files\*.*" $HomeTestFiles$

[Files_copy_n]
copy -n "$HomeTestFiles$\files\*.*" $HomeTestFiles$
; [Files_copy_c]
[Files_copy_r]
copy -r "$HomeTestFiles$\files\*.*" $HomeTestFiles$

[DosInAnIcon_copy_r]
@echo off
c:
cd $HomeTestFiles$
dir /A:R

[ShellInAnIcon_Linux_copy_r]
set -x
cd $HomeTestFiles$
find . -maxdepth 1 -perm 444 -ls

[Files_zipfile]
zipfile "$HomeTestFiles$\" "%opsiTmpDir%\testdir.zip"
zipfile "$HomeTestFiles$\dummy.msi" "%opsiTmpDir%\testfile.zip"

[Files_unzipfile_dir]
checktargetpath = "$HomeTestFiles$\"
unzipfile "%opsiTmpDir%\testdir.zip" "$HomeTestFiles$\"

[Files_unzipfile_file]
checktargetpath = "$HomeTestFiles$\"
unzipfile "%opsiTmpDir%\testfile.zip" "$HomeTestFiles$\"

[Files_unzipfile_to_profiles]
unzipfile "%ScriptPath%\test-files\zips\opsi-script-0.1.2.vsix" "%UserProfileDir%\opsi-script-test"

[Files_zipfile_bigfolder]
zipfile "%ScriptPath%\" "%opsiTmpDir%\testbigdir.zip"

[Files_unzipfile_bigfolder]
checktargetpath = "$HomeTestFiles$\"
unzipfile "%opsiTmpDir%\testbigdir.zip" "$HomeTestFiles$\"

[Files_zip]
zip "$HomeTestFiles$\files\zip" "$HomeTestFiles$\files\*.*"

[DosInAnIcon_zip_test]
@echo off
c:
cd "$HomeTestFiles$\zip\"
dir /A:R

[Files_copy_c]
copy -c "%ScriptPath%\$opsi_script_test_helper_path$\*" "$HomeTestFiles$\$opsi_script_test_helper_path$"

[winbatch_copy_c]
"$HomeTestFiles$\$opsi_script_test_helper_child_bin$" --wait=2

[ShellInAnIcon_copy_c_lin]
set -x
sleep 2

[Files_work_on_profiles]
copy "%ScriptPath%\test-files\testFiles\*.*" "%UserProfileDir%\opsi-script-test"
del -sfc "%UserProfileDir%\opsi-script-test"
copy "%ScriptPath%\test-files\testFiles\*.*" "%CurrentProfileDir%\opsi-script-test"
del -sfc "%CurrentProfileDir%\opsi-script-test"

[Files_work_on_profiles_copy_userp]
copy "%ScriptPath%\test-files\testFiles\*.*" "%UserProfileDir%\opsi-script-test"

[Files_work_on_profiles_del_userp]
del -sfc "%UserProfileDir%\opsi-script-test"

[Files_work_on_profiles_copy_currp]
copy "%ScriptPath%\test-files\testFiles\*.*" "%CurrentProfileDir%\opsi-script-test"

[Files_work_on_profiles_del_currp]
del -sfc "%CurrentProfileDir%\opsi-script-test"

[sub_check_dir_exist_inprof]
if directoryexists("%prof%\opsi-script-test")
	comment "passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "failed"
endif

[sub_check_dir_not_exist_inprof]
if not(directoryexists("%prof%\opsi-script-test"))
	comment "passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "failed"
endif

[Files_hardlink]
;del "$HomeTestFiles$\files\hardlink.txt"
hardlink "$HomeTestFiles$\files\dummy2.txt" "$HomeTestFiles$\files\hardlink.txt"

[Files_symlinklink]
;del "$HomeTestFiles$\files\symlink.txt"
symlink "$HomeTestFiles$\files\dummy.txt" "$HomeTestFiles$\files\symlink.txt"
symlink "$HomeTestFiles$\files\symlink.txt" "$HomeTestFiles$\files\symlink2.txt"


[Files_move]
del "$HomeTestFiles$\files\temp\rename.txt"
del "$HomeTestFiles$\files\temp\move.txt"
copy "$HomeTestFiles$\files\dummy2.txt" "$HomeTestFiles$\files\temp\"
rename "$HomeTestFiles$\files\temp\dummy2.txt" "$HomeTestFiles$\files\temp\rename.txt"
copy "$HomeTestFiles$\files\dummy2.txt" "$HomeTestFiles$\files\temp\"
move "$HomeTestFiles$\files\temp\dummy2.txt" "$HomeTestFiles$\files\temp\move.txt"

[Files_prep_move_dir]
copy -se "%ScriptPath%\test-files\testfiles\*.*" "$HomeTestFiles$\files"

[Files_move_dir]
rename "$HomeTestFiles$\files\subDirectory" "$HomeTestFiles$\files\renamedsubDirectory"

[Files_bigdir]
copy -sec "%ScriptPath%\test-files\bigdir\*.*" $HomeTestFiles$
;----------------   end   sections for files test ---------------------------------

