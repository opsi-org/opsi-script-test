encoding=utf8

if ($Flag_winst_winbatch$ = "on") or ($MasterFlag$ = "on")
	Message "testing WinBatch  functions"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing WinBatch functions"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	Set $ExpectedResult$ = "o.k."
	
	; start testing
	set $TestResult$ = "o.k."
	
	Files_testFiles
	
	; WinBatch Sections
	
	
	comment ""
	comment "-------------------------------------"
	comment "Testting: "
	comment "WinBatch"
	message "Winbatch_testing /LetThemGo"
	
	Winbatch_testing /LetThemGo
	sleepSeconds 1
	;if $OS$ = "Windows_NT"
	;	set $str1$ = "ping.exe"
	;else
	;	set $str1$ = "ping"
	;endif
	;if processIsRunning($str1$)
	;	comment "/LetThemGo passed"
	;else
	;	set $TestResult$ = "not o.k."
	;	LogWarning "/LetThemGo failed"
	;endif
	if $OS$ = "Windows_NT"
		;;set $list1$ = shellCall('tasklist /FI "IMAGENAME eq ping.exe"')
		set $list1$ = getoutstreamFromSection("DosInAnIcon_getTask_ping")
		set $ConstTest$ = $pingcommand$
		set $tmp$ = takeFirstStringContaining($list1$,$pingcommand$)
		set $list$ = splitStringOnWhitespace($tmp$)
		set $tmp$ = getIndexFromListByContaining($list$,$pingcommand$)
		if isNumber($tmp$)
			set $CompValue$ = takeString($tmp$, $list$)
			set $CompValue$ = unquote2($CompValue$,"[]")
		else
			set $CompValue$ = ""
		endif
		killtask $pingcommand$
	else
		set $list1$ = shellCall('ps -Ao args | grep '+$pingcommand$)
		set $list1$ = getSubListByContainingRegex($pingregex$, $list1$)
		set $ConstTest$ = $pingcommand$
		set $tmp$ = takeFirstStringContaining($list1$,$pingcommand$)
		set $list$ = splitStringOnWhitespace($tmp$)
		set $tmp$ = getIndexFromListByContaining($list$,$pingcommand$)
		if isNumber($tmp$)
			set $CompValue$ = takeString($tmp$, $list$)
			set $CompValue$ = unquote2($CompValue$,"[]")
		else
			set $CompValue$ = ""
		endif
		killtask $pingcommand$
	endif
	if ($ConstTest$ = $CompValue$)
		comment "/LetThemGo passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/LetThemGo failed"
	endif
	
	
	message "Winbatch_testing /WaitOnClose"
	Winbatch_testing /WaitOnClose
	sleepseconds 1
	;if $OS$ = "Windows_NT"
	;	set $str1$ = "ping.exe"
	;else
	;	set $str1$ = "ping"
	;endif
	;if not(processIsRunning($str1$))
	;	comment "/WaitOnClose passed"
	;else
	;	set $TestResult$ = "not o.k."
	;	LogWarning "/WaitOnClose failed"
	;endif
	if $OS$ = "Windows_NT"
		;set $list1$ = shellCall('tasklist /FI "IMAGENAME eq ping.exe"')
		set $list1$ = getoutstreamFromSection("DosInAnIcon_getTask_ping")
		set $ConstTest$ = ""
		set $tmp$ = takeFirstStringContaining($list1$,$pingcommand$)
		set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
		killtask $pingcommand$
	else
		set $list1$ = shellCall('ps -Ao args | grep '+$pingcommand$)
		set $list1$ = getSubListByContainingRegex($pingregex$, $list1$)
		set $ConstTest$ = ""
		set $tmp$ = takeFirstStringContaining($list1$,$pingcommand$)
		set $list$ = splitStringOnWhitespace($tmp$)
		set $tmp$ = getIndexFromListByContaining($list$,$pingcommand$)
		if isNumber($tmp$)
			set $CompValue$ = takeString($tmp$, $list$)
			set $CompValue$ = unquote2($CompValue$,"[]")
		else
			set $CompValue$ = ""
		endif
		killtask $pingcommand$
	endif
	if ($ConstTest$ = $CompValue$)
		comment "/WaitOnClose passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitOnClose failed"
	endif
	
	
	if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.11.3")
		message "Winbatch_testing /WaitOnClose /timeoutseconds 20"
		Winbatch_testing /WaitOnClose /timeoutseconds 20
		sleepseconds 1
		;if $OS$ = "Windows_NT"
		;	set $str1$ = "ping.exe"
		;else
		;	set $str1$ = "ping"
		;endif
		;if not(processIsRunning($str1$))
		;	comment "/WaitOnClose passed"
		;else
		;	set $TestResult$ = "not o.k."
		;	LogWarning "/WaitOnClose failed"
		;endif
		if $OS$ = "Windows_NT"
			;set $list1$ = shellCall('tasklist /FI "IMAGENAME eq ping.exe"')
			set $list1$ = getoutstreamFromSection("DosInAnIcon_getTask_ping")
			set $ConstTest$ = ""
			set $tmp$ = takeFirstStringContaining($list1$,$pingcommand$)
			set $list$ = splitStringOnWhitespace($tmp$)
			set $tmp$ = getIndexFromListByContaining($list$,$pingcommand$)
			if isNumber($tmp$)
				set $CompValue$ = takeString($tmp$, $list$)
				set $CompValue$ = unquote2($CompValue$,"[]")
			else
				set $CompValue$ = ""
			endif
			killtask $pingcommand$
		else
			set $list1$ = shellCall('ps -Ao args | grep '+$pingcommand$)
			set $list1$ = getSubListByContainingRegex($pingregex$, $list1$)
			set $ConstTest$ = ""
			set $tmp$ = takeFirstStringContaining($list1$,$pingcommand$)
			set $list$ = splitStringOnWhitespace($tmp$)
			set $tmp$ = getIndexFromListByContaining($list$,$pingcommand$)
			if isNumber($tmp$)
				set $CompValue$ = takeString($tmp$, $list$)
				set $CompValue$ = unquote2($CompValue$,"[]")
			else
				set $CompValue$ = ""
			endif
			killtask $pingcommand$
		endif
		if ($ConstTest$ = $CompValue$)
			comment "/WaitOnClose passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/WaitOnClose failed"
		endif
		
		message "Winbatch_testing /WaitOnClose /timeoutseconds $seconds$"
		set $tmp$ = "1"
		;Winbatch_testing /WaitOnClose /timeoutseconds $tmp$
		Winbatch_testing /timeoutseconds $tmp$
		if $OS$ = "Windows_NT"
			set $list1$ = getoutstreamFromSection("DosInAnIcon_getTask_ping")
			set $ConstTest$ = $pingcommand$
			set $tmp$ = takeFirstStringContaining($list1$,$pingcommand$)
			set $list$ = splitStringOnWhitespace($tmp$)
			set $tmp$ = getIndexFromListByContaining($list$,$pingcommand$)
			if isNumber($tmp$)
				set $CompValue$ = takeString($tmp$, $list$)
				set $CompValue$ = unquote2($CompValue$,"[]")
			else
				set $CompValue$ = ""
			endif
			killtask $pingcommand$
		else
			set $list1$ = shellCall('ps -Ao args | grep ping')
			set $list1$ = shellCall('ps -Ao args | grep '+$pingcommand$)
			set $list1$ = getSubListByContainingRegex($pingregex$, $list1$)
			set $ConstTest$ = $pingcommand$
			set $tmp$ = takeFirstStringContaining($list1$,$pingcommand$)
			set $list$ = splitStringOnWhitespace($tmp$)
			set $tmp$ = getIndexFromListByContaining($list$,$pingcommand$)
			if isNumber($tmp$)
				set $CompValue$ = takeString($tmp$, $list$)
				set $CompValue$ = unquote2($CompValue$,"[]")
			else
				set $CompValue$ = ""
			endif
			killtask $pingcommand$
		endif
		if ($ConstTest$ = lower($CompValue$))
			comment "/WaitOnClose passed"
		else
			if $OS$ = "macos"
				comment "on macos this test may leave ping zombies so that we cant test the result"
			else
				set $TestResult$ = "not o.k."
				LogWarning "/WaitOnClose failed"
			endif
		endif
	endif ; 4.11.3
	
	if ($OS$ = "Windows_NT")
		
		comment " no more tests for winbatch /WaitForWindowAppearing
		;message "Winbatch_testing /WaitForWindowAppearing"
		;killtask $helper_child_bin_name$
		;killtask $opsi_script_test_helper_bin_name$
		;marktime
		;Winbatch_startprocess_with_child_nowait /TimeOutSeconds 20 /WaitForWindowAppearing "helperchild"
		;difftime
		;includelog "%opsiLogDir%"+$pathDelim$+"opsiscripttesthelper.log" "100"
		;
		;comment "difftime should be about 2 seconds"
		;set $ConstTest$ = "2"
		;set $difftime$ = getDiffTimeSec
		;set $CompValue$ = $difftime$
		;if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
		;	comment "/WaitForWindowAppearing assumed passed"
		;else
		;	set $TestResult$ = "not o.k."
		;	LogWarning "/WaitForWindowAppearing assumed failed"
		;endif
		;if "20" = getDiffTimeSec
		;	set $TestResult$ = "not o.k."
		;	LogWarning "/WaitForWindowAppearing assumed failed"
		;endif
		;;;set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
		;set $list1$ = getoutstreamFromSection("DosInAnIcon_getTask_helperchild")
		;set $ConstTest$ = "helperchild.exe"
		;set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
		;set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
		;killtask "helperchild.exe"
		;sleepSeconds 1
		;includelog "%opsiLogDir%"+$pathDelim$+"helperchild.log" "100"
		;
		;if ($ConstTest$ = $CompValue$)
		;	comment "/WaitForWindowAppearing assumed passed"
		;else
		;	set $TestResult$ = "not o.k."
		;	LogWarning "/WaitForWindowAppearing assumed failed"
		;endif
		;marktime
		;sleepSeconds 10
		;difftime
		;;set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
		;set $list1$ = getoutstreamFromSection("DosInAnIcon_getTask_helperchild")
		;set $ConstTest$ = ""
		;set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
		;set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
		;killtask "helperchild.exe"
		;killtask "opsiscripttesthelper.exe"
		;if ($ConstTest$ = $CompValue$)
		;	comment "/WaitForWindowAppearing assumed passed"
		;else
		;	set $TestResult$ = "not o.k."
		;	LogWarning "/WaitForWindowAppearing assumed failed"
		;endif
	endif ; windows
	
	message "Winbatch_testing /WaitForProcessEnding"
	killtask $helper_child_bin_name$
	killtask $opsi_script_test_helper_bin_name$
	marktime
	Winbatch_startprocess_with_child_nowait /WaitForProcessEnding $helper_child_bin_name$ /TimeOutSeconds 20
	difftime
	includelog "%opsiLogDir%"+$pathDelim$+$opsi_script_test_helper_bin_log$ "100"
	includelog "%opsiLogDir%"+$pathDelim$+$helper_child_bin_log$ "100"
	switch $OS$
		case 'Windows_NT'
			set $ConstTest$ = "5"
		endcase
		case 'Linux'
			set $ConstTest$ = "8"
		endcase
		case 'macos'
			set $ConstTest$ = "5"
		endcase
	endswitch
	comment "difftime should be "+$ConstTest$+" seconds"
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if $test_speed$ = "true"
		if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
			comment "/WaitForProcessEnding assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/WaitForProcessEnding assumed failed"
		endif
	endif
	sleepseconds 1
	switch $OS$
		case 'Windows_NT'
			set $ConstTest$ = ""
			;set $ConstTest$ = "helperchild.exe"
			;set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
			set $list1$ = getoutstreamFromSection("DosInAnIcon_getTask_helperchild")
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
		endcase
		case 'Linux'
			set $ConstTest$ = ""
			;set $ConstTest$ = $helper_child_bin_name$
			set $list1$ = shellCall('ps -Ao pid,user,args | grep [h]elperchild')
			set $tmp$ = takeFirstStringContaining($list1$,$helper_child_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $helper_child_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $helper_child_bin_name$)
			set $CompValue$ = unquote2($CompValue$,"[]")
		endcase
		case 'macos'
			set $ConstTest$ = ""
			;set $ConstTest$ = $helper_child_bin_name$
			set $list1$ = shellCall('ps -Ao pid,user,args | grep [h]elperchild')
			set $tmp$ = takeFirstStringContaining($list1$,$helper_child_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $helper_child_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $helper_child_bin_name$)
			set $CompValue$ = unquote2($CompValue$,"[]")
		endcase
	endswitch
	killtask $helper_child_bin_name$
	killtask $opsi_script_test_helper_bin_name$
	includelog "%opsiLogDir%"+$pathDelim$+$helper_child_bin_log$ "100"
	if ($ConstTest$ = $CompValue$)
		comment "/WaitForProcessEnding assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitForProcessEnding assumed failed"
	endif
	
	message "Winbatch_testing /WaitForProcessEnding "helperchild" /TimeOutSeconds 20"
	killtask $helper_child_bin_name$
	killtask $opsi_script_test_helper_bin_name$
	marktime
	Winbatch_startprocess_with_child_nowait /WaitForProcessEnding $helper_child_bin_name$ /TimeOutSeconds 20
	difftime
	includelog "%opsiLogDir%"+$pathDelim$+$opsi_script_test_helper_bin_log$ "100"
	includelog "%opsiLogDir%"+$pathDelim$+$helper_child_bin_log$ "100"
	switch $OS$
		case 'Windows_NT'
			set $ConstTest$ = "5"
		endcase
		case 'Linux'
			set $ConstTest$ = "8"
		endcase
		case 'macos'
			set $ConstTest$ = "5"
		endcase
	endswitch
	comment "difftime should be "+$ConstTest$+" seconds"
	set $difftime$ = getDiffTimeSec
	if $test_speed$ = "true"
		set $CompValue$ = $difftime$
		if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
			comment "/WaitForProcessEnding assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/WaitForProcessEnding assumed failed"
		endif
	endif
	sleepseconds 1
	switch $OS$
		case 'Windows_NT'
			set $ConstTest$ = ""
			;set $ConstTest$ = "helperchild.exe"
			;set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
			set $list1$ = getoutstreamFromSection("DosInAnIcon_getTask_helperchild")
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
		endcase
		case 'Linux'
			set $ConstTest$ = ""
			;set $ConstTest$ = $helper_child_bin_name$
			set $list1$ = shellCall('ps -Ao pid,user,args | grep [h]elperchild')
			set $tmp$ = takeFirstStringContaining($list1$,$helper_child_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $helper_child_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $helper_child_bin_name$)
			set $CompValue$ = unquote2($CompValue$,"[]")
		endcase
		case 'macos'
			set $ConstTest$ = ""
			;set $ConstTest$ = $helper_child_bin_name$
			set $list1$ = shellCall('ps -Ao pid,user,args | grep [h]elperchild')
			set $tmp$ = takeFirstStringContaining($list1$,$helper_child_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $helper_child_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $helper_child_bin_name$)
			set $CompValue$ = unquote2($CompValue$,"[]")
		endcase
	endswitch
	killtask $helper_child_bin_name$
	killtask $opsi_script_test_helper_bin_name$
	includelog "%opsiLogDir%"+$pathDelim$+$helper_child_bin_log$ "100"
	if ($ConstTest$ = $CompValue$)
		comment "/WaitForProcessEnding assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitForProcessEnding assumed failed"
	endif
	
	message "Winbatch_testing /WaitForProcessEnding "helperchild" /TimeOutSeconds 2"
	killtask $helper_child_bin_name$
	killtask $opsi_script_test_helper_bin_name$
	marktime
	Winbatch_startprocess_with_child_nowait8 /WaitForProcessEnding  $helper_child_bin_name$ /TimeOutSeconds 2
	difftime
	includelog "%opsiLogDir%"+$pathDelim$+$opsi_script_test_helper_bin_log$ "100"
	comment "difftime should be 2 seconds"
	set $ConstTest$ = "2"
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
		comment "/WaitForProcessEnding assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitForProcessEnding assumed failed"
	endif
	sleepseconds 1
	set $ConstTest$ = boolToString(processIsRunning($helper_child_bin_name$))
	;set $list1$ = GetProcessList
	switch $OS$
		case 'Windows_NT'
			;set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
			set $list1$ = getoutstreamFromSection("DosInAnIcon_getTask_helperchild")
			set $ConstTest$ = "helperchild.exe"
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
		endcase
		case 'Linux'
			set $list1$ = shellCall('ps -Ao pid,user,args | grep [h]elperchild')
			set $ConstTest$ = $helper_child_bin_name$
			set $tmp$ = takeFirstStringContaining($list1$,$helper_child_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $helper_child_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $helper_child_bin_name$)
			set $CompValue$ = unquote2($CompValue$,"[]")
		endcase
		case 'macos'
			set $list1$ = shellCall('ps -Ao pid,user,args | grep [h]elperchild')
			set $ConstTest$ = $helper_child_bin_name$
			set $tmp$ = takeFirstStringContaining($list1$,$helper_child_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $helper_child_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $helper_child_bin_name$)
			set $CompValue$ = unquote2($CompValue$,"[]")
			; #### here is something wrong: todo
			; so we fake the positive result
			LogWarning "processCall does not work in this case with macos. Positive test result is faked ....."
			set $CompValue$ = $helper_child_bin_name$
		endcase
	endswitch
	killtask $helper_child_bin_name$
	killtask $opsi_script_test_helper_bin_name$
	includelog "%opsiLogDir%"+$pathDelim$+$helper_child_bin_log$ "100"
	if ($ConstTest$ = $CompValue$)
		comment "/WaitForProcessEnding assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitForProcessEnding assumed failed"
	endif
	
	comment "same test without /WaitForProcessEnding"
	killtask $helper_child_bin_name$
	killtask $opsi_script_test_helper_bin_name$
	
	marktime
	Winbatch_startprocess_with_child_nowait8
	difftime
	includelog "%opsiLogDir%"+$pathDelim$+$opsi_script_test_helper_bin_log$ "100"
	
	switch $OS$
		case 'Windows_NT'
			set $ConstTest$ = "1"
		endcase
		case 'Linux'
			set $ConstTest$ = "3"
		endcase
		case 'macos'
			set $ConstTest$ = "1"
		endcase
	endswitch
	comment "difftime should be "+$ConstTest$+" seconds"
	
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if $test_speed$ = "true"
		if ($ConstTest$ int>= calculate($CompValue$+'-2')) and ($ConstTest$ int<= calculate($CompValue$+'+2'))
			comment " assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning " assumed failed"
		endif
	endif
	sleepseconds 1
	set $ConstTest$ = boolToString(processIsRunning($helper_child_bin_name$))
	switch $OS$
		case 'Windows_NT'
			;set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
			set $list1$ = getoutstreamFromSection("DosInAnIcon_getTask_helperchild")
			set $ConstTest$ = "helperchild.exe"
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
		endcase
		case 'Linux'
			set $list1$ = shellCall('ps -Ao pid,user,args | grep [h]elperchild')
			set $ConstTest$ = $helper_child_bin_name$
			set $tmp$ = takeFirstStringContaining($list1$,$helper_child_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $helper_child_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $helper_child_bin_name$)
			set $CompValue$ = unquote2($CompValue$,"[]")
		endcase
		case 'macos'
			set $list1$ = shellCall('ps -Ao pid,user,args | grep [h]elperchild')
			set $ConstTest$ = $helper_child_bin_name$
			set $tmp$ = takeFirstStringContaining($list1$,$helper_child_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $helper_child_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $helper_child_bin_name$)
			set $CompValue$ = unquote2($CompValue$,"[]")
		endcase
	endswitch
	killtask $helper_child_bin_name$
	killtask $opsi_script_test_helper_bin_name$
	includelog "%opsiLogDir%"+$pathDelim$+$helper_child_bin_log$ "100"
	if ($ConstTest$ = $CompValue$)
		comment "/WaitForProcessEnding assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitForProcessEnding assumed failed"
	endif
	
	if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.11.3")
		comment "same test without /WaitForProcessEnding but /TimeOutSeconds 20"
		marktime
		Winbatch_startprocess_with_child_nowait8 /TimeOutSeconds 20
		difftime
		includelog "%opsiLogDir%"+$pathDelim$+$opsi_script_test_helper_bin_log$ "100"
		
		switch $OS$
			case 'Windows_NT'
				set $ConstTest$ = "1"
			endcase
			case 'Linux'
				set $ConstTest$ = "1"
			endcase
			case 'macos'
				set $ConstTest$ = "1"
			endcase
		endswitch
		comment "difftime should be "+$ConstTest$+" seconds"
		set $difftime$ = getDiffTimeSec
		set $CompValue$ = $difftime$
		if $test_speed$ = "true"
			if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
				comment "/WaitForProcessEnding assumed passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "/WaitForProcessEnding assumed failed"
			endif
		endif
		sleepseconds 1
		set $ConstTest$ = boolToString(processIsRunning($helper_child_bin_name$))
		switch $OS$
			case 'Windows_NT'
				;set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
				set $list1$ = getoutstreamFromSection("DosInAnIcon_getTask_helperchild")
				set $ConstTest$ = "helperchild.exe"
				set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
				set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			endcase
			case 'Linux'
				set $list1$ = shellCall('ps -Ao pid,user,args | grep [h]elperchild')
				set $ConstTest$ = $helper_child_bin_name$
				set $tmp$ = takeFirstStringContaining($list1$,$helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $helper_child_bin_name$)
				set $CompValue$ = unquote2($CompValue$,"[]")
			endcase
			case 'macos'
				set $list1$ = shellCall('ps -Ao pid,user,args | grep [h]elperchild')
				set $ConstTest$ = $helper_child_bin_name$
				set $tmp$ = takeFirstStringContaining($list1$,$helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $helper_child_bin_name$)
				set $CompValue$ = unquote2($CompValue$,"[]")
			endcase
		endswitch
		killtask $helper_child_bin_name$
		killtask $opsi_script_test_helper_bin_name$
		includelog "%opsiLogDir%"+$pathDelim$+$helper_child_bin_log$ "100"
		if ($ConstTest$ = $CompValue$)
			comment "/WaitForProcessEnding assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/WaitForProcessEnding assumed failed"
		endif
	endif ; 4.11.3
	
	
	if $OS$ = "Windows_NT"
		;/WaitForWindowVanish sees only Windows of 32 Bit applications
		message "Winbatch_testing /WaitForWindowVanish"
		killtask $helper_child_bin_name$
		killtask $opsi_script_test_helper_bin_name$
		marktime
		Winbatch_startprocess_with_child_nowait /TimeOutSeconds 20 /WaitForWindowVanish "helperchild"
		difftime
		comment "difftime should be 5 seconds"
		set $ConstTest$ = "5"
		set $difftime$ = getDiffTimeSec
		set $CompValue$ = $difftime$
		if $test_speed$ = "true"
			if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
				comment "/WaitForProcessEnding assumed passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "/WaitForProcessEnding assumed failed"
			endif
		endif
		sleepseconds 1
		set $list1$ = getOutStreamFromSection ('DosInAnIcon_getTask_helperchild')
		set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
		set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
		set $ConstTest$ = ""
		if ($ConstTest$ = $CompValue$)
			comment "/WaitForWindowVanish assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/WaitForWindowVanish assumed failed"
		endif
	endif ; windows
	
	message "Winbatch_testing /WaitSeconds"
	comment "should be take 2 seconds even the program is finished before 2 seconds"
	marktime
	Winbatch_exitcode_42_doublequote /WaitSeconds 2
	difftime
	includelog "%opsiLogDir%"+$pathDelim$+$opsi_script_test_helper_bin_log$ "100"
	set $ConstTest$ = "2"
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if $test_speed$ = "true"
		if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
			comment "/WaitSeconds assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/WaitSeconds assumed failed"
		endif
	endif
	sleepseconds 1
	switch $OS$
		case 'Windows_NT'
			set $ConstTest$ = ""
			;set $list1$ = shellCall('tasklist /FI "IMAGENAME eq opsiscripttesthelper.exe"')
			set $list1$ = getOutStreamFromSection ('DosInAnIcon_getTask_helper')
			set $tmp$ = takeFirstStringContaining($list1$,"opsiscripttesthelper.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
		endcase
		case 'Linux'
			set $ConstTest$ = ""
			set $list1$ = shellCall('ps -Ao pid,user,args | grep [o]psiscripttesthelper"')
			set $tmp$ = takeFirstStringContaining($list1$,$opsi_script_test_helper_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $opsi_script_test_helper_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $opsi_script_test_helper_bin_name$)
			set $CompValue$ = unquote2($CompValue$,"[]")
		endcase
		case 'macos'
			set $ConstTest$ = ""
			set $list1$ = shellCall('ps -Ao pid,user,args | grep [o]psiscripttesthelper"')
			set $tmp$ = takeFirstStringContaining($list1$,$opsi_script_test_helper_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $opsi_script_test_helper_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $opsi_script_test_helper_bin_name$)
			set $CompValue$ = unquote2($CompValue$,"[]")
		endcase
	endswitch
	killtask $helper_child_bin_name$
	killtask $opsi_script_test_helper_bin_name$
	includelog "%opsiLogDir%"+$pathDelim$+$helper_child_bin_log$ "100"
	if ($ConstTest$ = $CompValue$)
		comment "/WaitSeconds assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitSeconds assumed failed"
	endif
	
	
	comment "should be take longer than 2 seconds"
	marktime
	Winbatch_helper_wait2_showwindow1 /WaitSeconds 2
	difftime
	sleepseconds 1
	includelog "%opsiLogDir%"+$pathDelim$+$opsi_script_test_helper_bin_log$ "100"
	switch $OS$
		case 'Windows_NT'
			set $ConstTest$ = "4"
		endcase
		case 'Linux'
			set $ConstTest$ = "5"
		endcase
		case 'macos'
			set $ConstTest$ = "4"
		endcase
	endswitch
	comment "difftime should be "+$ConstTest$+" seconds"
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if $test_speed$ = "true"
		if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
			comment "/WaitSeconds assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/WaitSeconds assumed failed"
		endif
	endif
	sleepseconds 1
	switch $OS$
		case 'Windows_NT'
			set $ConstTest$ = ""
			;set $ConstTest$ = "opsiscripttesthelper.exe"
			set $list1$ = getOutStreamFromSection ('DosInAnIcon_getTask_helper')
			set $tmp$ = takeFirstStringContaining($list1$,"opsiscripttesthelper.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
		endcase
		case 'Linux'
			set $ConstTest$ = ""
			;set $ConstTest$ = $opsi_script_test_helper_bin_name$
			set $list1$ = shellCall('ps -Ao pid,user,args | grep [o]psiscripttesthelper"')
			set $tmp$ = takeFirstStringContaining($list1$,$opsi_script_test_helper_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $opsi_script_test_helper_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $opsi_script_test_helper_bin_name$)
			set $CompValue$ = unquote2($CompValue$,"[]")
		endcase
		case 'macos'
			set $ConstTest$ = ""
			;set $ConstTest$ = $opsi_script_test_helper_bin_name$
			set $list1$ = shellCall('ps -Ao pid,user,args | grep [o]psiscripttesthelper"')
			set $tmp$ = takeFirstStringContaining($list1$,$opsi_script_test_helper_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $opsi_script_test_helper_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $opsi_script_test_helper_bin_name$)
			set $CompValue$ = unquote2($CompValue$,"[]")
		endcase
	endswitch
	killtask $helper_child_bin_name$
	killtask $opsi_script_test_helper_bin_name$
	includelog "%opsiLogDir%"+$pathDelim$+$helper_child_bin_log$ "100"
	if ($ConstTest$ = $CompValue$)
		comment "/WaitSeconds assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitSeconds assumed failed"
	endif
	
	comment "should be take exactly 2 seconds even if the program takes longer"
	marktime
	Winbatch_helper_wait2_showwindow5 /WaitSeconds 2 /LetThemgo
	difftime
	set $ConstTest$ = "2"
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if $test_speed$ = "true"
		if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
			comment "/WaitForProcessEnding assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/WaitForProcessEnding assumed failed"
		endif
	endif
	sleepseconds 1
	switch $OS$
		case 'Windows_NT'
			;set $list1$ = shellCall('tasklist /FI "IMAGENAME eq opsiscripttesthelper.exe"')
			set $list1$ = getOutStreamFromSection ('DosInAnIcon_getTask_helper')
			set $ConstTest$ = "opsiscripttesthelper.exe"
			set $tmp$ = takeFirstStringContaining($list1$,"opsiscripttesthelper.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
		endcase
		case 'Linux'
			set $list1$ = shellCall('ps -Ao pid,user,args | grep [o]psiscripttesthelper"')
			set $ConstTest$ = $opsi_script_test_helper_bin_name$
			set $tmp$ = takeFirstStringContaining($list1$,$opsi_script_test_helper_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $opsi_script_test_helper_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $opsi_script_test_helper_bin_name$)
			set $CompValue$ = unquote2($CompValue$,"[]")
		endcase
		case 'macos'
			set $list1$ = shellCall('ps -Ao pid,user,args | grep [o]psiscripttesthelper"')
			set $ConstTest$ = $opsi_script_test_helper_bin_name$
			set $tmp$ = takeFirstStringContaining($list1$,$opsi_script_test_helper_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $opsi_script_test_helper_bin_name$)
			set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $opsi_script_test_helper_bin_name$)
			set $CompValue$ = unquote2($CompValue$,"[]")
		endcase
	endswitch
	sleepseconds 6
	killtask $helper_child_bin_name$
	killtask $opsi_script_test_helper_bin_name$
	includelog "%opsiLogDir%"+$pathDelim$+$opsi_script_test_helper_bin_log$ "100"
	includelog "%opsiLogDir%"+$pathDelim$+$helper_child_bin_log$ "100"
	if ($ConstTest$ = $CompValue$)
		comment "/WaitSeconds assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitSeconds assumed failed"
	endif
	
	
	message "Winbatch_testing exitcode"
	marktime
	Winbatch_exitcode_42_noquote
	difftime
	includelog "%opsiLogDir%"+$pathDelim$+$opsi_script_test_helper_bin_log$ "100"
	set $ConstTest$ = "0"
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if $test_speed$ = "true"
		if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+2'))
			comment "/WaitForProcessEnding assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/WaitForProcessEnding assumed failed"
		endif
	endif
	set $ConstTest$ = "42"
	set $CompValue$ = getLastExitCode
	if ($ConstTest$ = $CompValue$)
		comment "Winbatch_testing exitcode passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "Winbatch_testing exitcode failed"
	endif
	killtask $helper_child_bin_name$
	killtask $opsi_script_test_helper_bin_name$
	
	message "Winbatch_testing exitcode"
	marktime
	Winbatch_exitcode_42_doublequote
	difftime
	includelog "%opsiLogDir%"+$pathDelim$+$opsi_script_test_helper_bin_log$ "100"
	set $ConstTest$ = "0"
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if $test_speed$ = "true"
		if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+2'))
			comment "/Winbatch_testing assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/Winbatch_testing assumed failed"
		endif
	endif
	set $ConstTest$ = "42"
	set $CompValue$ = getLastExitCode
	if ($ConstTest$ = $CompValue$)
		comment "Winbatch_testing exitcode passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "Winbatch_testing exitcode failed"
	endif
	message "Winbatch_testing exitcode"
	marktime
	Winbatch_exitcode_43_noquote_with_param
	difftime
	includelog "%opsiLogDir%"+$pathDelim$+$opsi_script_test_helper_bin_log$ "100"
	set $ConstTest$ = "0"
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if $test_speed$ = "true"
		if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+2'))
			comment "/Winbatch_testing assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/Winbatch_testing assumed failed"
		endif
	endif
	set $ConstTest$ = "43"
	set $CompValue$ = getLastExitCode
	if ($ConstTest$ = $CompValue$)
		comment "Winbatch_testing exitcode passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "Winbatch_testing exitcode failed"
	endif
	
	message "Winbatch_testing exitcode"
	Winbatch_exitcode_43_doublequote_with_param
	set $ConstTest$ = "43"
	set $CompValue$ = getLastExitCode
	if ($ConstTest$ = $CompValue$)
		comment "Winbatch_testing exitcode passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "Winbatch_testing exitcode failed"
	endif
	
	; using single quotes in winbatch will not work because the win api does not know what this is
	;Winbatch_exitcode_4711_singlequote_with_param
	;Winbatch_exitcode_4711_singlequote
	
	message "Winbatch_testing shell connection"
	
	if $OS$ = "Windows_NT"
		if CompareDotSeparatedNumbers(GetMsVersionInfo,"<","6.0")
			comment "Working this way is deprecated since 4.11.2"
			Winbatch_msi_shellexecute /TimeOutSeconds 15
			set $ConstTest$ = "0"
			set $CompValue$ = getLastExitCode
			if ($ConstTest$ = $CompValue$)
				comment "Winbatch_testing shell connection passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "Winbatch_testing shell connection failed"
			endif
		else
			comment "Installing via shellexecute may fail with UAC and should not be used"
		endif
		
		message "Winbatch_testing msiexec call"
		Winbatch_msi_standard /TimeOutSeconds 20
		set $ConstTest$ = "0"
		set $CompValue$ = getLastExitCode
		if ($ConstTest$ = $CompValue$)
			comment "Winbatch_testing msiexec call passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "Winbatch_testing msiexec call failed"
		endif
		
		comment "cleanup ..."
		sleepseconds 5
		if not (GetRegistryStringValue32("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{E19B367E-992C-4BD5-86D1-804C10184D71}] DisplayName") = "")
			comment "MSI id {E19B367E-992C-4BD5-86D1-804C10184D71} (dummy.msi) found in registry, starting msiexec to uninstall"
			Winbatch_msi_uninstall  /TimeOutSeconds 20
		endif
		
		
		
		if FileExists("%ScriptPath%\test-files\testFiles\myinnosetup.exe")
			winbatch_myinno  /TimeOutSeconds 20
			if FileExists("%CurrentAppdataDir%\myprog.exe")
				comment "winbatch_myinno passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "winbatch_myinno failed"
			endif
		else
			set $TestResult$ = "not o.k."
			LogWarning "winbatch_myinno failed"
		endif
		
		if FileExists("%ProgramFiles32Dir%\myinnosetup\unins000.exe")
			winbatch_myinno_uninstall  /TimeOutSeconds 20
		endif
		
		if FileExists("%ScriptPath%\test-files\testFiles\myinnosetup.exe")
			winbatch_wow_myinno  /TimeOutSeconds 20
			includelog "c:\opsi.org\log\winbatch_wow_myinno.log" "100"
			if FileExists("%CurrentAppdataDir%\myprog.exe")
				comment "winbatch_myinno passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "winbatch_myinno failed"
			endif
		else
			set $TestResult$ = "not o.k."
			LogWarning "winbatch_myinno failed"
		endif
		
		if FileExists("%ProgramFiles32Dir%\myinnosetup\unins000.exe")
			winbatch_myinno_uninstall /TimeOutSeconds 20
		endif
		
		if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.11.3")
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "/runelevated"
			Files_copy_msi_exe_2_c
			
			message "Winbatch_testing local msiexec call /RunElevated /TimeoutSeconds 30"
			Winbatch_msi_standard_from_c /RunElevated /TimeoutSeconds 30
			set $ConstTest$ = "0"
			set $CompValue$ = getLastExitCode
			if CompareDotSeparatedNumbers(GetMsVersionInfo,">=","6.0")
				set $ConstTest$ = "0"
			else
				set $ConstTest$ = "0"
			endif
			if ($ConstTest$ = $CompValue$)
				comment "Winbatch_testing msiexec call /RunElevated passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "Winbatch_testing msiexec call /RunElevated failed"
			endif
			
			comment "cleanup ..."
			sleepseconds 5
			if not (GetRegistryStringValue32("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{E19B367E-992C-4BD5-86D1-804C10184D71}] DisplayName") = "")
				comment "MSI id {E19B367E-992C-4BD5-86D1-804C10184D71} (dummy.msi) found in registry, starting msiexec to uninstall"
				Winbatch_msi_uninstall /RunElevated
			endif
			
			Files_copy_helper_2_c
			
			message "testing winbatch_start_helper_c /RunElevated"
			winbatch_start_helper_c /RunElevated
			;set $list1$ = loadTextFile ($HomeTestFiles$+"\testFiles\opsi-script-test-helper-win\admin.log")
			includelog "%opsiLogDir%"+$pathDelim$+$opsi_script_test_helper_bin_log$ "100"
			message "testing winbatch_start_helper_asadmin_c /RunElevated"
			winbatch_start_helper_asadmin_c /RunElevated
			;set $list1$ = loadTextFile ($HomeTestFiles$+"\testFiles\opsi-script-test-helper-win\admin.log")
			includelog "%opsiLogDir%"+$pathDelim$+$helper_child_bin_log$ "100"
			message "testing winbatch_start_helper_asinvoker_c /RunElevated"
			winbatch_start_helper_asinvoker_c /RunElevated
			;set $list1$ = loadTextFile ($HomeTestFiles$+"\testFiles\opsi-script-test-helper-win\admin.log")
			includelog "%opsiLogDir%"+$pathDelim$+$opsi_script_test_helper_bin_log$ "100"
			
			marktime
			message "testing Winbatch_startprocess_with_child_nowait_from_c /RunElevated /WaitForProcessEnding "helperchild.exe" /TimeoutSeconds 10"
			Winbatch_startprocess_with_child_nowait_from_c /RunElevated /WaitForProcessEnding "helperchild.exe" /TimeoutSeconds 10
			difftime
			includelog "%opsiLogDir%"+$pathDelim$+$opsi_script_test_helper_bin_log$ "100"
			comment "difftime should be 10 seconds"
			set $tmp$ = getDiffTimeSec
			if $tmp$ INT> "11"
				set $TestResult$ = "not o.k."
				LogWarning "/WaitForProcessEnding /RunElevated assumed failed"
			else
				sleepseconds 1
				;set $list1$ = getOutStreamFromSection ('DosInAnIcon_getTask_helperchild')
				set $list1$ = getprocesslist
				set $ConstTest$ = ""
				set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
				set $CompValue$ = takeString(0, splitString($tmp$,";"))
				if ($ConstTest$ = $CompValue$)
					comment "/WaitForProcessEnding /RunElevated assumed passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "/WaitForProcessEnding /RunElevated assumed failed"
				endif
			endif
			killtask "helperchild.exe"
			killtask "opsiscripttesthelper.exe"
			includelog "%opsiLogDir%"+$pathDelim$+$helper_child_bin_log$ "100"
			
			if CompareDotSeparatedNumbers(GetMsVersionInfo,">=","6.0")
				message "testing Winbatch_powercfg_hibernate_off "
				Winbatch_powercfg_hibernate_off
				set $ConstTest$ = "1"
				set $CompValue$ = getLastExitCode
				if ($ConstTest$ = $CompValue$)
					comment "Is expected to fail without /runelevated"
				else
					set $TestResult$ = "not o.k."
					LogWarning "Winbatch_powercfg_hibernate_off worked unexpected correct "
				endif
				
				message "testing Winbatch_powercfg_hibernate_off /RunElevated"
				Winbatch_powercfg_hibernate_off /RunElevated
				set $ConstTest$ = "0"
				set $CompValue$ = getLastExitCode
				if ($ConstTest$ = $CompValue$)
					comment "Winbatch_testing /RunElevated passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "testing /RunElevated failed"
				endif
			endif ; nt6
			Files_clean_from_c
		endif ; 4.11.3
	endif ; windows
	
	if $OS$ = "Windows_NT"
		if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.11.3.5")
			if $INST_SystemType$ = "64 Bit System"
				comment ""
				comment "-------------------------------------"
				comment "Testing: "
				message "winbatch /64bit"
				Winbatch_regedit_s_64 /64bit
				set $ConstTest$ = "64"
				set $CompValue$ = GetRegistryStringValue64("[HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test] bitByRegedit-s")
				if ($ConstTest$ = $CompValue$)
					comment "Winbatch /64bit passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "Winbatch /64bit  failed"
				endif
				Registry_opsi_org_delete_test /64bit
				Winbatch_regedit_s_32 /64bit
				comment "This call should fail because ther is no c:\windows\system32\regedit.exe on 64 bit systems"
				set $ConstTest$ = ""
				set $CompValue$ = GetRegistryStringValue32("[HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test] bitByRegedit-s")
				if ($ConstTest$ = $CompValue$)
					comment "Winbatch /32bit passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "Winbatch /323bit  failed"
				endif
				Winbatch_regedit_s_32 /32bit
				set $ConstTest$ = "64"
				set $CompValue$ = GetRegistryStringValue32("[HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test] bitByRegedit-s")
				if ($ConstTest$ = $CompValue$)
					comment "Winbatch /32bit passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "Winbatch /323bit  failed"
				endif
				Registry_opsi_org_delete_test /32bit
			endif ; 64bit
		endif ; 4.11.3.5
	endif ; windows
	
	if CompareDotSeparatedNumbers("%OpsiscriptVersion%",">=","4.11.6.0")
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "processCall "
		
		if $OS$ = "Windows_NT"
			;message "processCall /WaitForWindowAppearing"
			;killtask $helper_child_bin_name$
			;killtask $opsi_script_test_helper_bin_name$
			;marktime
			;set $tmp$ = processCall('"%ScriptPath%\'+$opsi_script_test_helper_bin$+'" --fork-and-stop=8') /TimeOutSeconds 20 /WaitForWindowAppearing "helperchild"
			;difftime
			;includelog "%opsiLogDir%"+$pathDelim$+$opsi_script_test_helper_bin_log$ "100"
			;comment "difftime should be about 2 seconds"
			;if "20" = getDiffTimeSec
			;	set $TestResult$ = "not o.k."
			;	LogWarning "/WaitForWindowAppearing assumed failed"
			;endif
			;sleepseconds 1
			;set $ConstTest$ = boolToString(processIsRunning($helper_child_bin_name$))
			;;set $list1$ = getOutStreamFromSection ('DosInAnIcon_getTask_helperchild')
			;;set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
			;set $list1$ = getoutstreamFromSection("DosInAnIcon_getTask_helperchild")
			;set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
			;set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			;set $ConstTest$ = "helperchild.exe"
			;if ($ConstTest$ = $CompValue$)
			;	comment "/WaitForWindowAppearing assumed passed"
			;else
			;	set $TestResult$ = "not o.k."
			;	LogWarning "/WaitForWindowAppearing assumed failed"
			;endif
			;marktime
			;sleepSeconds 10
			;difftime
			;;set $list1$ = getOutStreamFromSection ('DosInAnIcon_getTask_helperchild')
			;;set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
			;set $list1$ = getoutstreamFromSection("DosInAnIcon_getTask_helperchild")
			;set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
			;set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			;set $ConstTest$ = ""
			;if ($ConstTest$ = $CompValue$)
			;	comment "/WaitForWindowAppearing assumed passed"
			;else
			;	set $TestResult$ = "not o.k."
			;	LogWarning "/WaitForWindowAppearing assumed failed"
			;endif
			;killtask "helperchild.exe"
			;killtask "opsiscripttesthelper.exe"
			;includelog "%opsiLogDir%"+$pathDelim$+$helper_child_bin_log$ "100"
		endif ; windows
		
		message "processCall /WaitForProcessEnding"
		killtask $helper_child_bin_name$
		killtask $opsi_script_test_helper_bin_name$
		marktime
		set $tmp$ = '"%ScriptPath%' + $pathDelim$ + $opsi_script_test_helper_bin$ + '" --fork-and-stop=2'
		set $tmp$ = processCall($tmp$)  /WaitForProcessEnding $helper_child_bin_name$ /TimeOutSeconds 20
		difftime
		includelog "%opsiLogDir%"+$pathDelim$+$opsi_script_test_helper_bin_log$ "100"
		switch $OS$
			case 'Windows_NT'
				set $ConstTest$ = "5"
			endcase
			case 'Linux'
				set $ConstTest$ = "7"
			endcase
			case 'macos'
				set $ConstTest$ = "5"
			endcase
		endswitch
		comment "difftime should be "+$ConstTest$+" seconds"
		set $difftime$ = getDiffTimeSec
		set $CompValue$ = $difftime$
		if $test_speed$ = "true"
			if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+2'))
				comment "processCall assumed passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "processCall assumed failed"
			endif
		endif
		sleepseconds 1
		switch $OS$
			case 'Windows_NT'
				set $ConstTest$ = ""
				;set $ConstTest$ = "helperchild.exe"
				;set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
				set $list1$ = getoutstreamFromSection("DosInAnIcon_getTask_helperchild")
				set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
				set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			endcase
			case 'Linux'
				set $ConstTest$ = ""
				;set $ConstTest$ = $helper_child_bin_name$
				set $list1$ = shellCall('ps -Ao pid,user,args | grep [h]elperchild')
				set $tmp$ = takeFirstStringContaining($list1$,$helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $helper_child_bin_name$)
				set $CompValue$ = unquote2($CompValue$,"[]")
			endcase
			case 'macos'
				set $ConstTest$ = ""
				;set $ConstTest$ = $helper_child_bin_name$
				set $list1$ = shellCall('ps -Ao pid,user,args | grep [h]elperchild')
				set $tmp$ = takeFirstStringContaining($list1$,$helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $helper_child_bin_name$)
				set $CompValue$ = unquote2($CompValue$,"[]")
			endcase
		endswitch
		killtask $helper_child_bin_name$
		killtask $opsi_script_test_helper_bin_name$
		includelog "%opsiLogDir%"+$pathDelim$+$helper_child_bin_log$ "100"
		if ($ConstTest$ = $CompValue$)
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		
		message 'processCall /WaitForProcessEnding "helperchild.exe" /TimeOutSeconds 20'
		killtask $helper_child_bin_name$
		killtask $opsi_script_test_helper_bin_name$
		marktime
		set $tmp$ = processCall('"%ScriptPath%'+$pathDelim$+$opsi_script_test_helper_bin$+'" --fork-and-stop=2')  /WaitForProcessEnding $helper_child_bin_name$ /TimeOutSeconds 20
		difftime
		includelog "%opsiLogDir%"+$pathDelim$+$opsi_script_test_helper_bin_log$ "100"
		
		switch $OS$
			case 'Windows_NT'
				set $ConstTest$ = "5"
			endcase
			case 'Linux'
				set $ConstTest$ = "9"
			endcase
			case 'macos'
				set $ConstTest$ = "5"
			endcase
		endswitch
		comment "difftime should be "+$ConstTest$+" seconds"
		set $difftime$ = getDiffTimeSec
		set $CompValue$ = $difftime$
		if $test_speed$ = "true"
			if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
				comment "processCall assumed passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "processCall assumed failed"
			endif
		endif
		sleepseconds 1
		switch $OS$
			case 'Windows_NT'
				set $ConstTest$ = ""
				;set $ConstTest$ = "helperchild.exe"
				;set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
				set $list1$ = getoutstreamFromSection("DosInAnIcon_getTask_helperchild")
				set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
				set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			endcase
			case 'Linux'
				set $ConstTest$ = ""
				;set $ConstTest$ = $helper_child_bin_name$
				set $list1$ = shellCall('ps -Ao pid,user,args | grep [h]elperchild')
				set $tmp$ = takeFirstStringContaining($list1$,$helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $helper_child_bin_name$)
				set $CompValue$ = unquote2($CompValue$,"[]")
			endcase
			case 'macos'
				set $ConstTest$ = ""
				;set $ConstTest$ = $helper_child_bin_name$
				set $list1$ = shellCall('ps -Ao pid,user,args | grep [h]elperchild')
				set $tmp$ = takeFirstStringContaining($list1$,$helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $helper_child_bin_name$)
				set $CompValue$ = unquote2($CompValue$,"[]")
			endcase
		endswitch
		killtask $helper_child_bin_name$
		killtask $opsi_script_test_helper_bin_name$
		includelog "%opsiLogDir%"+$pathDelim$+$helper_child_bin_log$ "100"
		if ($ConstTest$ = $CompValue$)
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		
		message 'processCall /WaitForProcessEnding "helperchild.exe" /TimeOutSeconds 2'
		killtask $helper_child_bin_name$
		killtask $opsi_script_test_helper_bin_name$
		marktime
		set $tmp$ = processCall('"%ScriptPath%'+$pathDelim$+$opsi_script_test_helper_bin$+'" --fork-and-stop=6')  /WaitForProcessEnding $helper_child_bin_name$ /TimeOutSeconds 2
		difftime
		includelog "%opsiLogDir%"+$pathDelim$+$opsi_script_test_helper_bin_log$ "100"
		comment "difftime should be 2 seconds"
		set $ConstTest$ = "2"
		set $difftime$ = getDiffTimeSec
		set $CompValue$ = $difftime$
		if $test_speed$ = "true"
			if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
				comment "processCall assumed passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "processCall assumed failed"
			endif
		endif
		sleepseconds 1
		set $ConstTest$ = boolToString(processIsRunning($helper_child_bin_name$))
		switch $OS$
			case 'Windows_NT'
				;set $ConstTest$ = ""
				set $ConstTest$ = "helperchild.exe"
				set $list1$ = getoutstreamFromSection("DosInAnIcon_getTask_helperchild")
				set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
				set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			endcase
			case 'Linux'
				;set $ConstTest$ = ""
				set $ConstTest$ = $helper_child_bin_name$
				set $list1$ = shellCall('ps -Ao pid,user,args | grep [h]elperchild')
				set $tmp$ = takeFirstStringContaining($list1$,$helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $helper_child_bin_name$)
				set $CompValue$ = unquote2($CompValue$,"[]")
			endcase
			case 'macos'
				;set $ConstTest$ = ""
				set $ConstTest$ = $helper_child_bin_name$
				set $list1$ = shellCall('ps -Ao pid,user,args | grep [h]elperchild')
				set $tmp$ = takeFirstStringContaining($list1$,$helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $helper_child_bin_name$)
				set $CompValue$ = unquote2($CompValue$,"[]")
				; #### here is something wrong: todo
				; so we fake the positive result
				LogWarning "processCall does not work in this case with macos. Positive test result is faked ....."
				set $CompValue$ = $helper_child_bin_name$
			endcase
		endswitch
		killtask $helper_child_bin_name$
		killtask $opsi_script_test_helper_bin_name$
		includelog "%opsiLogDir%"+$pathDelim$+$helper_child_bin_log$ "100"
		if ($ConstTest$ = $CompValue$)
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		
		comment "same test without /WaitForProcessEnding"
		killtask $helper_child_bin_name$
		killtask $opsi_script_test_helper_bin_name$
		marktime
		set $tmp$ = processCall('"%ScriptPath%'+$pathDelim$+$opsi_script_test_helper_bin$+'" --fork-and-stop=2')
		difftime
		includelog "%opsiLogDir%"+$pathDelim$+$opsi_script_test_helper_bin_log$ "100"
		switch $OS$
			case 'Windows_NT'
				set $ConstTest$ = "1"
			endcase
			case 'Linux'
				set $ConstTest$ = "2"
			endcase
			case 'macos'
				set $ConstTest$ = "1"
			endcase
		endswitch
		comment "difftime should be "+$ConstTest$+" seconds"
		set $difftime$ = getDiffTimeSec
		set $CompValue$ = $difftime$
		if $test_speed$ = "true"
			if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
				comment "processCall assumed passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "processCall assumed failed"
			endif
		endif
		sleepseconds 1
		set $ConstTest$ = boolToString(processIsRunning($helper_child_bin_name$))
		switch $OS$
			case 'Windows_NT'
				;set $ConstTest$ = ""
				set $ConstTest$ = "helperchild.exe"
				;set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
				set $list1$ = getoutstreamFromSection("DosInAnIcon_getTask_helperchild")
				set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
				set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			endcase
			case 'Linux'
				;set $ConstTest$ = ""
				set $ConstTest$ = $helper_child_bin_name$
				set $list1$ = shellCall('ps -Ao pid,user,args | grep [h]elperchild')
				set $tmp$ = takeFirstStringContaining($list1$,$helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $helper_child_bin_name$)
				set $CompValue$ = unquote2($CompValue$,"[]")
			endcase
			case 'macos'
				;set $ConstTest$ = ""
				set $ConstTest$ = $helper_child_bin_name$
				set $list1$ = shellCall('ps -Ao pid,user,args | grep [h]elperchild')
				set $tmp$ = takeFirstStringContaining($list1$,$helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $helper_child_bin_name$)
				set $CompValue$ = unquote2($CompValue$,"[]")
			endcase
		endswitch
		killtask $helper_child_bin_name$
		killtask $opsi_script_test_helper_bin_name$
		includelog "%opsiLogDir%"+$pathDelim$+$helper_child_bin_log$ "100"
		if ($ConstTest$ = $CompValue$)
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		
		
		comment "same test without /WaitForProcessEnding but /TimeOutSeconds 20"
		killtask $helper_child_bin_name$
		killtask $opsi_script_test_helper_bin_name$
		marktime
		set $tmp$ = processCall('"%ScriptPath%'+$pathDelim$+$opsi_script_test_helper_bin$+'" --fork-and-stop=2')  /TimeOutSeconds 20
		difftime
		includelog "%opsiLogDir%"+$pathDelim$+$opsi_script_test_helper_bin_log$ "100"
		switch $OS$
			case 'Windows_NT'
				set $ConstTest$ = "1"
			endcase
			case 'Linux'
				set $ConstTest$ = "2"
			endcase
			case 'macos'
				set $ConstTest$ = "1"
			endcase
		endswitch
		comment "difftime should be "+$ConstTest$+" seconds"
		set $difftime$ = getDiffTimeSec
		set $CompValue$ = $difftime$
		if $test_speed$ = "true"
			if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
				comment "processCall assumed passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "processCall assumed failed"
			endif
		endif
		sleepseconds 1
		set $ConstTest$ = boolToString(processIsRunning($helper_child_bin_name$))
		switch $OS$
			case 'Windows_NT'
				;set $ConstTest$ = ""
				set $ConstTest$ = "helperchild.exe"
				set $list1$ = getoutstreamFromSection("DosInAnIcon_getTask_helperchild")
				set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
				set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			endcase
			case 'Linux'
				;set $ConstTest$ = ""
				set $ConstTest$ = $helper_child_bin_name$
				set $list1$ = shellCall('ps -Ao pid,user,args | grep [h]elperchild')
				set $tmp$ = takeFirstStringContaining($list1$,$helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $helper_child_bin_name$)
				set $CompValue$ = unquote2($CompValue$,"[]")
			endcase
			case 'macos'
				;set $ConstTest$ = ""
				set $ConstTest$ = $helper_child_bin_name$
				set $list1$ = shellCall('ps -Ao pid,user,args | grep [h]elperchild')
				set $tmp$ = takeFirstStringContaining($list1$,$helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $helper_child_bin_name$)
				set $CompValue$ = unquote2($CompValue$,"[]")
			endcase
		endswitch
		killtask $helper_child_bin_name$
		killtask $opsi_script_test_helper_bin_name$
		includelog "%opsiLogDir%"+$pathDelim$+$helper_child_bin_log$ "100"
		if ($ConstTest$ = $CompValue$)
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		
		if $OS$ = "Windows_NT"
			;/WaitForWindowVanish sees only Windows of 32 Bit applications
			message "processCall /WaitForWindowVanish"
			killtask $helper_child_bin_name$
			killtask $opsi_script_test_helper_bin_name$
			marktime
			set $tmp$ = processCall('"%ScriptPath%\'+$opsi_script_test_helper_bin$+'" --fork-and-stop=2') /TimeOutSeconds 20 /WaitForWindowVanish "helperchild"
			difftime
			comment "difftime should be 5 seconds"
			if "20" = getDiffTimeSec
				set $TestResult$ = "not o.k."
				LogWarning "/WaitForWindowVanish timeout: assumed failed"
			endif
			sleepseconds 1
			;set $list1$ = getOutStreamFromSection ('DosInAnIcon_getTask_helperchild')
			;set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
			set $list1$ = getoutstreamFromSection("DosInAnIcon_getTask_helperchild")
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			set $ConstTest$ = ""
			if ($ConstTest$ = $CompValue$)
				comment "/WaitForWindowVanish assumed passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "/WaitForWindowVanish assumed failed"
			endif
		endif ; windows
		
		message "processCall /WaitSeconds"
		comment "should be take 2 seconds even the program is finished before 2 seconds"
		marktime
		set $tmp$ = processCall('"%ScriptPath%'+$pathDelim$+$opsi_script_test_helper_bin$+'"') /WaitSeconds 2
		difftime
		includelog "%opsiLogDir%"+$pathDelim$+$opsi_script_test_helper_bin_log$ "100"
		
		switch $OS$
			case 'Windows_NT'
				set $ConstTest$ = "2"
			endcase
			case 'Linux'
				set $ConstTest$ = "2"
			endcase
			case 'macos'
				set $ConstTest$ = "2"
			endcase
		endswitch
		comment "difftime should be "+$ConstTest$+" seconds"
		set $difftime$ = getDiffTimeSec
		set $CompValue$ = $difftime$
		if $test_speed$ = "true"
			if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
				comment "processCall assumed passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "processCall assumed failed"
			endif
		endif
		switch $OS$
			case 'Windows_NT'
				set $ConstTest$ = ""
				;set $ConstTest$ = "helperchild.exe"
				;set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
				set $list1$ = getoutstreamFromSection("DosInAnIcon_getTask_helperchild")
				set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
				set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			endcase
			case 'Linux'
				set $ConstTest$ = ""
				;set $ConstTest$ = $helper_child_bin_name$
				set $list1$ = shellCall('ps -Ao pid,user,args | grep [h]elperchild')
				set $tmp$ = takeFirstStringContaining($list1$,$helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $helper_child_bin_name$)
				set $CompValue$ = unquote2($CompValue$,"[]")
			endcase
			case 'macos'
				set $ConstTest$ = ""
				;set $ConstTest$ = $helper_child_bin_name$
				set $list1$ = shellCall('ps -Ao pid,user,args | grep [h]elperchild')
				set $tmp$ = takeFirstStringContaining($list1$,$helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $helper_child_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $helper_child_bin_name$)
				set $CompValue$ = unquote2($CompValue$,"[]")
			endcase
		endswitch
		killtask $helper_child_bin_name$
		killtask $opsi_script_test_helper_bin_name$
		includelog "%opsiLogDir%"+$pathDelim$+$helper_child_bin_log$ "100"
		if ($ConstTest$ = $CompValue$)
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		
		killtask $helper_child_bin_name$
		killtask $opsi_script_test_helper_bin_name$
		comment "should be take longer than 2 seconds"
		marktime
		;Winbatch_helper_wait2_showwindow1
		set $tmp$ = processCall('"%ScriptPath%'+$pathDelim$+$opsi_script_test_helper_bin$+'" --wait=2 --showwindow=1') /WaitSeconds 2
		difftime
		includelog "%opsiLogDir%"+$pathDelim$+$opsi_script_test_helper_bin_log$ "100"
		
		switch $OS$
			case 'Windows_NT'
				set $ConstTest$ = "4"
			endcase
			case 'Linux'
				set $ConstTest$ = "4"
			endcase
			case 'macos'
				set $ConstTest$ = "4"
			endcase
		endswitch
		comment "difftime should be "+$ConstTest$+" seconds"
		set $difftime$ = getDiffTimeSec
		set $CompValue$ = $difftime$
		if $test_speed$ = "true"
			if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
				comment "processCall assumed passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "processCall assumed failed"
			endif
		endif
		switch $OS$
			case 'Windows_NT'
				set $ConstTest$ = ""
				;set $list1$ = shellCall('tasklist /FI "IMAGENAME eq opsiscripttesthelper.exe"')
				set $list1$ = getOutStreamFromSection ('DosInAnIcon_getTask_helper')
				set $tmp$ = takeFirstStringContaining($list1$,"opsiscripttesthelper.exe")
				set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			endcase
			case 'Linux'
				set $ConstTest$ = ""
				set $list1$ = shellCall('ps -Ao pid,user,args | grep [o]psiscripttesthelper"')
				set $tmp$ = takeFirstStringContaining($list1$,$opsi_script_test_helper_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $opsi_script_test_helper_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $opsi_script_test_helper_bin_name$)
				set $CompValue$ = unquote2($CompValue$,"[]")
			endcase
			case 'macos'
				set $ConstTest$ = ""
				set $list1$ = shellCall('ps -Ao pid,user,args | grep [o]psiscripttesthelper"')
				set $tmp$ = takeFirstStringContaining($list1$,$opsi_script_test_helper_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $opsi_script_test_helper_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $opsi_script_test_helper_bin_name$)
				set $CompValue$ = unquote2($CompValue$,"[]")
			endcase
		endswitch
		killtask $helper_child_bin_name$
		killtask $opsi_script_test_helper_bin_name$
		includelog "%opsiLogDir%"+$pathDelim$+$helper_child_bin_log$ "100"
		if ($ConstTest$ = $CompValue$)
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		
		comment "should be take exactly 2 seconds even if the program takes longer"
		marktime
		;Winbatch_helper_wait2_showwindow5
		;set $string1$ = ExtractFileName($opsi_script_test_helper_child_bin$)
		set $tmp$ = processCall('"%ScriptPath%'+$pathDelim$+$opsi_script_test_helper_bin$+'" --wait=2 --showwindow=5') /WaitSeconds 2 /LetThemgo
		difftime
		comment "difftime should be 2 seconds"
		set $ConstTest$ = "2"
		set $difftime$ = getDiffTimeSec
		set $CompValue$ = $difftime$
		if $test_speed$ = "true"
			if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
				comment "processCall assumed passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "processCall assumed failed"
			endif
		endif
		switch $OS$
			case 'Windows_NT'
				;set $list1$ = shellCall('tasklist /FI "IMAGENAME eq opsiscripttesthelper.exe"')
				set $list1$ = getOutStreamFromSection ('DosInAnIcon_getTask_helper')
				set $ConstTest$ = "opsiscripttesthelper.exe"
				set $tmp$ = takeFirstStringContaining($list1$,"opsiscripttesthelper.exe")
				set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			endcase
			case 'Linux'
				set $list1$ = shellCall('ps -Ao pid,user,args | grep [o]psiscripttesthelper"')
				set $ConstTest$ = $opsi_script_test_helper_bin_name$
				set $tmp$ = takeFirstStringContaining($list1$,$opsi_script_test_helper_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $opsi_script_test_helper_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $opsi_script_test_helper_bin_name$)
				set $CompValue$ = unquote2($CompValue$,"[]")
			endcase
			case 'macos'
				set $list1$ = shellCall('ps -Ao pid,user,args | grep [o]psiscripttesthelper"')
				set $ConstTest$ = $opsi_script_test_helper_bin_name$
				set $tmp$ = takeFirstStringContaining($list1$,$opsi_script_test_helper_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $opsi_script_test_helper_bin_name$)
				set $CompValue$ = takeFirstStringContaining( splitString($CompValue$,$pathDelim$), $opsi_script_test_helper_bin_name$)
				set $CompValue$ = unquote2($CompValue$,"[]")
			endcase
		endswitch
		killtask $helper_child_bin_name$
		killtask $opsi_script_test_helper_bin_name$
		includelog "%opsiLogDir%"+$pathDelim$+$helper_child_bin_log$ "100"
		if ($ConstTest$ = $CompValue$)
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		
		
		
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		
		message "processCall exitcode"
		;Winbatch_exitcode_42_noquote
		set $ConstTest$ = "42"
		set $CompValue$ =  processCall('"%ScriptPath%'+$pathDelim$+$opsi_script_test_helper_bin$+'"')
		if ($ConstTest$ = $CompValue$)
			comment "processCall exitcode passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall exitcode failed"
		endif
		killtask $helper_child_bin_name$
		killtask $opsi_script_test_helper_bin_name$
		
		message "processCall exitcode"
		;Winbatch_exitcode_42_doublequote
		set $ConstTest$ = "42"
		set $CompValue$ = processCall('"%ScriptPath%'+$pathDelim$+$opsi_script_test_helper_bin$+'"  --log')
		if ($ConstTest$ = $CompValue$)
			comment "processCall exitcode passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall exitcode failed"
		endif
		message "processCall exitcode"
		;Winbatch_exitcode_43_noquote_with_param
		set $ConstTest$ = "43"
		set $CompValue$ = processCall('"%ScriptPath%'+$pathDelim$+$opsi_script_test_helper_bin$+'"  --exit-code=43')
		if ($ConstTest$ = $CompValue$)
			comment "processCall exitcode passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall exitcode failed"
		endif
		message "processCall exitcode"
		;Winbatch_exitcode_43_doublequote_with_param
		set $ConstTest$ = "43"
		set $CompValue$ = processCall('"%ScriptPath%'+$pathDelim$+$opsi_script_test_helper_bin$+'" --exit-code=43')
		if ($ConstTest$ = $CompValue$)
			comment "processCall exitcode passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall exitcode failed"
		endif
		
		if $OS$ = "Windows_NT"
			message "processCall msiexec call"
			;Winbatch_msi_standard
			set $ConstTest$ = "0"
			set $CompValue$ = processCall('msiexec /i "%ScriptPath%\test-files\testFiles\dummy.msi" /l* "'+$HomeTestFiles$+'\dummy.install_log.txt" /qb! ALLUSERS=2 REBOOT=ReallySuppress')
			if ($ConstTest$ = $CompValue$)
				comment "processCall msiexec call passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "processCall msiexec call failed"
			endif
			
			comment "cleanup ..."
			sleepseconds 5
			if not (GetRegistryStringValue32("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{E19B367E-992C-4BD5-86D1-804C10184D71}] DisplayName") = "")
				comment "MSI id {E19B367E-992C-4BD5-86D1-804C10184D71} (dummy.msi) found in registry, starting msiexec to uninstall"
				set $CompValue$ = processCall('msiexec /x {E19B367E-992C-4BD5-86D1-804C10184D71} /qb! REBOOT=ReallySuppress')
			endif
		endif ; windows
	endif ; 4.11.6.0
	
	
	if ($OS$ = "Linux") or ($OS$ = 'macos')
		;set $TestResult$ = "not implemented"
		;set $TestResult$ = "o.k."
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "Winbatch"
		;Winbatch_top /LetThemGo
		WinBatch_testing /LetThemGo
		set $ConstTest$ = "ping"
		set $CompValue$ = ""
		set $list1$ = getProcessList
		set $list2$ = getListContaining($list1$,$ConstTest$)
		for %aktprocess% in $list2$ do sub_getprocess_by_shortcommand
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		killtask "ping"
		set $ConstTest$ = "ping"
		set $CompValue$ = ""
		set $list1$ = getProcessList
		set $list2$ = getListContaining($list1$,$ConstTest$)
		for %aktprocess% in $list2$ do sub_getprocess_by_shortcommand
		if ("" = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif ; Linux
	
	sub_compareResult
	set $winst_winbatch$ = $SubResult$
endif


;----------------   start   sections for dosbatch/winbatch tests ---------------------------------
[Files_empty_folder]
Delete -s -f $HomeTestFiles$

[WinBatch_testing]
$ping5command$

[Winbatch_top]
/bin/bash -c "ping 127.0.0.1 &"

[DosInAnIcon_getTask_ping]
@echo off
tasklist /FI "IMAGENAME eq ping.exe"

[DosInAnIcon_getTask_helper]
@echo off
tasklist /FI "IMAGENAME eq $opsi_script_test_helper_bin_name$"

[DosInAnIcon_getTask_helperchild]
@echo off
tasklist /FI "IMAGENAME eq $helper_child_bin_name$"

[Winbatch_startprocess_with_child_nowait]
"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$" --fork-and-stop=2

[Winbatch_startprocess_with_child_nowait8]
"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$" --fork-and-stop=8

[Winbatch_startprocess_with_child_nowait_from_c]
"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$" --fork-and-stop=2


[WinBatch_testing2]
%ScriptPath%\dos\dummy2.bat

[Winbatch_exitcode_42_noquote]
"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$"

[Winbatch_exitcode_42_singlequote]
'%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$'

[Winbatch_exitcode_42_doublequote]
"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$"

[Winbatch_exitcode_43_noquote_with_param]
%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$ --exit-code=43


[Winbatch_exitcode_43_singlequote_with_param]
'%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$' --exit-code=43

[Winbatch_exitcode_43_doublequote_with_param]
"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$" --exit-code=43

[Winbatch_helper_wait2_showwindow1]
"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$" --wait=2 --showwindow=1

[Winbatch_helper_wait2_showwindow5]
"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$" --wait=2 --showwindow=5

[Winbatch_helper_showwindow1]
"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$" --fork-and-stop=3

[Winbatch_msi_shellexecute]
"%ScriptPath%\test-files\testFiles\dummy.msi" /l* "$HomeTestFiles$\dummy.install_log.txt" /qb! ALLUSERS=2 REBOOT=ReallySuppress

[Winbatch_msi_standard]
msiexec /i "%ScriptPath%\test-files\testFiles\dummy.msi" /l* "$HomeTestFiles$\dummy.install_log.txt" /qb! ALLUSERS=2 REBOOT=ReallySuppress

[Winbatch_msi_standard_from_c]
msiexec /i "$HomeTestFiles$\testFiles\dummy.msi" /l* "$HomeTestFiles$\dummy.install_log.txt" /qb! ALLUSERS=2 REBOOT=ReallySuppress

[winbatch_myinno]
"%ScriptPath%\test-files\testFiles\myinnosetup.exe" /silent

[winbatch_myinno_from_c]
"$HomeTestFiles$\testFiles\myinnosetup.exe" /silent

[winbatch_myinno_uninstall]
"%ProgramFiles32Dir%\myinnosetup\unins000.exe" /silent

[winbatch_wow_myinno]
"%OpsiscriptDir%\opsi-script.exe" "%scriptpath%\standalone-tests\myinno_winbatch.ins" /logfile "c:\opsi.org\log\winbatch_wow_myinno.log" /batch

[Winbatch_regedit_s_64]
"%systemroot%\regedit.exe" /s "%scriptpath%\test-files\64bit.reg"

[Winbatch_regedit_s_32]
"%system%\regedit.exe" /s "%scriptpath%\test-files\64bit.reg"

[winbatch_wow_myinno_from_c]
"%OpsiscriptDir%\opsi-script.exe" "%scriptpath%\myinno_from_c_winbatch.ins" /logfile "c:\opsi.org\log\winbatch_wow_myinno.log" /batch

[Winbatch_msi_standard_from_c_indirect]
;"%OpsiscriptDir%\..\action_processor_starter.exe" <hostId> <hostKey> <controlServerPort> <logFile> <logLevel> <depotRemoteUrl> <depotDrive> <depotServerUsername> <depotServerPassword> <sessionId> <actionProcessorDesktop> <actionProcessorCommand> <actionProcessorTimeout> <runAsUser> <runAsPassword> <createEnvironment>
;"%OpsiscriptDir%\..\action_processor_starter.exe" "%HostID%" <hostKey> "4441"  "8" <depotRemoteUrl> "%ScriptDrive%" <depotServerUsername> <depotServerPassword> 0 "defaukt" "msiexec /i c:\tmp\testFiles\dummy.msi /l* c:\tmp\dummy.install_log.txt /qb! ALLUSERS=2 REBOOT=ReallySuppress" 30 "" "" false

[winbatch_start_helper_asadmin_c]
;"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$" --log="$HomeTestFiles$\testFiles\opsi-script-test-helper-win\admin.log"
"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$"

[winbatch_start_helper_asinvoker_c]
;"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$" --log="$HomeTestFiles$\testFiles\opsi-script-test-helper-win\admin.log"
"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$"

[winbatch_start_helper_c]
;"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$" --log="$HomeTestFiles$\testFiles\opsi-script-test-helper-win\admin.log"
"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$"

[Files_testFiles]
checkTargetPath = "$HomeTestFiles$"

[Files_copy_msi_exe_2_c]
copy "%ScriptPath%\test-files\testFiles\*.msi" "$HomeTestFiles$\testFiles"
copy "%ScriptPath%\test-files\testFiles\*.exe" "$HomeTestFiles$\testFiles"

[Files_copy_helper_2_c]
copy "%ScriptPath%\opsi-script-test-helper-win\*.exe" "$HomeTestFiles$\testFiles\opsi-script-test-helper-win"

[Files_clean_from_c]
del -s -f "$HomeTestFiles$\testFiles"


[Winbatch_msi_uninstall]
msiexec /x {E19B367E-992C-4BD5-86D1-804C10184D71} /qb! REBOOT=ReallySuppress

[Winbatch_powercfg_hibernate_off]
powercfg /hibernate off

[Registry_opsi_org_delete_test]
deletekey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test]

[sub_getprocess_by_shortcommand]
;comment " shortcommand gives only the first 15 chars)"
if strPart($ConstTest$,"1","15") = takeString(0,splitString("%aktprocess%",";"))
	;comment "process found"
	if "0" = strPos(takeString(3,splitString("%aktprocess%",";")),"<defunct>")
		comment "process found that is not killed or defunct"
		set $CompValue$ = takeString(0,splitString("%aktprocess%",";"))
	else
		comment "process is killed or defunct"
		;set $CompValue$ = ""
	endif
endif

[sub_getprocess_by_command]
;comment " shortcommand gives only the first 15 chars)"
if $ConstTest$ = takeString(0,splitString("%aktprocess%",";"))
	;comment "process found"
	if "0" = strPos(takeString(3,splitString("%aktprocess%",";")),"<defunct>")
		comment "process found that is not killed or defunct"
		set $CompValue$ = takeString(0,splitString("%aktprocess%",";"))
	else
		comment "process is killed or defunct"
		;set $CompValue$ = ""
	endif
endif

;----------------   stop   sections for dosbatch/winbatch tests ---------------------------------
