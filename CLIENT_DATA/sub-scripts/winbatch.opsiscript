encoding=utf8

if ($Flag_winst_winbatch$ = "on") or ($MasterFlag$ = "on")
	Message "testing WinBatch  functions"
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	comment ""
	comment "testing WinBatch functions"
	comment ""
	comment ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
	Set $ExpectedResult$ = "o.k."

	; start testing
	set $TestResult$ = "o.k."

	; WinBatch Sections
	

	comment ""
	comment "-------------------------------------"
	comment "Testting: "
	comment "WinBatch"
	message "Winbatch_testing /LetThemGo"
	Winbatch_testing /LetThemGo
	sleepSeconds 1
	if $OS$ = "Windows_NT"
		set $list1$ = shellCall('tasklist /FI "IMAGENAME eq ping.exe"')
		set $ConstTest$ = "ping.exe"
		set $tmp$ = takeFirstStringContaining($list1$,"ping.exe")
		set $list$ = splitStringOnWhitespace($tmp$)
		set $tmp$ = getIndexFromListByContaining($list$,"ping")
		if isNumber($tmp$)
			set $CompValue$ = takeString($tmp$, $list$)
			set $CompValue$ = unquote2($CompValue$,"[]")
		else
			set $CompValue$ = ""
		endif
		killtask "ping.exe"
	else
		set $list1$ = shellCall('ps -ef | grep ping"')
		set $ConstTest$ = "ping"
		set $tmp$ = takeFirstStringContaining($list1$,"ping")
		set $list$ = splitStringOnWhitespace($tmp$)
		set $tmp$ = getIndexFromListByContaining($list$,"ping")
		if isNumber($tmp$)
			set $CompValue$ = takeString($tmp$, $list$)
			set $CompValue$ = unquote2($CompValue$,"[]")
		else
			set $CompValue$ = ""
		endif
		killtask "ping"
	endif
	if ($ConstTest$ = $CompValue$)
		comment "/LetThemGo passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/LetThemGo failed"
	endif
	
  	
	message "Winbatch_testing /WaitOnClose"
	Winbatch_testing /WaitOnClose
	sleepseconds 1
	if $OS$ = "Windows_NT"
		set $list1$ = shellCall('tasklist /FI "IMAGENAME eq ping.exe"')
		set $ConstTest$ = ""
		set $tmp$ = takeFirstStringContaining($list1$,"ping.exe")
		set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
		killtask "ping.exe"
	else
		set $list1$ = shellCall('ps -ef | grep ping"')
		set $ConstTest$ = "ping"
		set $tmp$ = takeFirstStringContaining($list1$,"ping")
		set $list$ = splitStringOnWhitespace($tmp$)
		set $tmp$ = getIndexFromListByContaining($list$,"ping")
		if isNumber($tmp$)
			set $CompValue$ = takeString($tmp$, $list$)
			set $CompValue$ = unquote2($CompValue$,"[]")
		else
			set $CompValue$ = ""
		endif
		killtask "ping"
	endif
	if ($ConstTest$ = $CompValue$)
		comment "/WaitOnClose passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitOnClose failed"
	endif


	if CompareDotSeparatedNumbers("%WinstVersion%",">=","4.11.3")
		message "Winbatch_testing /WaitOnClose /timeoutseconds 20"
		Winbatch_testing /WaitOnClose /timeoutseconds 20
		sleepseconds 1
		if $OS$ = "Windows_NT"
			set $list1$ = shellCall('tasklist /FI "IMAGENAME eq ping.exe"')
			set $ConstTest$ = ""
			set $tmp$ = takeFirstStringContaining($list1$,"ping.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			killtask "ping.exe"
		else
			set $list1$ = shellCall('ps -ef | grep ping"')
			set $ConstTest$ = "ping"
			set $tmp$ = takeFirstStringContaining($list1$,"ping")
			set $list$ = splitStringOnWhitespace($tmp$)
			set $tmp$ = getIndexFromListByContaining($list$,"ping")
			if isNumber($tmp$)
				set $CompValue$ = takeString($tmp$, $list$)
				set $CompValue$ = unquote2($CompValue$,"[]")
			else
				set $CompValue$ = ""
			endif
			killtask "ping"
		endif
		if ($ConstTest$ = $CompValue$)
			comment "/WaitOnClose passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/WaitOnClose failed"
		endif

		message "Winbatch_testing /WaitOnClose /timeoutseconds $seconds$"
		set $tmp$ = "1"
		Winbatch_testing /WaitOnClose /timeoutseconds $tmp$
		if $OS$ = "Windows_NT"
			set $list1$ = shellCall('tasklist /FI "IMAGENAME eq ping.exe"')
			set $ConstTest$ = "ping.exe"
			set $tmp$ = takeFirstStringContaining($list1$,"ping.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			killtask "ping.exe"
		else
			set $list1$ = shellCall('ps -ef | grep ping"')
			set $ConstTest$ = "ping"
			set $tmp$ = takeFirstStringContaining($list1$,"ping")
			set $list$ = splitStringOnWhitespace($tmp$)
			set $tmp$ = getIndexFromListByContaining($list$,"ping")
			if isNumber($tmp$)
				set $CompValue$ = takeString($tmp$, $list$)
				set $CompValue$ = unquote2($CompValue$,"[]")
			else
				set $CompValue$ = ""
			endif
			killtask "ping"
		endif
		if ($ConstTest$ = lower($CompValue$))
			comment "/WaitOnClose passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/WaitOnClose failed"
		endif
	endif ; 4.11.3

	if ($OS$ = "Windows_NT")
		message "Winbatch_testing /WaitForWindowAppearing"
		marktime
		Winbatch_startprocess_with_child_nowait /WaitForWindowAppearing "opsi-helper-child"
		difftime
		comment "difftime should be about 2 seconds"
		set $ConstTest$ = "2"
		set $difftime$ = getDiffTimeSec
		set $CompValue$ = $difftime$
		if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
			comment "/WaitForWindowAppearing assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/WaitForWindowAppearing assumed failed"
		endif
			set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
			set $ConstTest$ = "helperchild.exe"
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			killtask "helperchild.exe"
		
		if ($ConstTest$ = $CompValue$)
			comment "/WaitForWindowAppearing assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/WaitForWindowAppearing assumed failed"
		endif
		marktime
		sleepSeconds 3
		difftime
			set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
			set $ConstTest$ = ""
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			killtask "helperchild.exe"
			killtask "opsiscripttesthelper.exe"
		if ($ConstTest$ = $CompValue$)
			comment "/WaitForWindowAppearing assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/WaitForWindowAppearing assumed failed"
		endif
	endif ; windows

	message "Winbatch_testing /WaitForProcessEnding"
	marktime
	set $string1$ =  ExtractFileName ($opsi_script_test_helper_child_bin$)  
	Winbatch_startprocess_with_child_nowait /WaitForProcessEnding $string1$
	difftime
	comment "difftime should be 6 seconds"
	set $ConstTest$ = "6"
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
		comment "/WaitForProcessEnding assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitForProcessEnding assumed failed"
	endif
	sleepseconds 1
	if $OS$ = "Windows_NT"
		set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
		set $ConstTest$ = ""
		set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
		set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
		killtask "helperchild.exe"
		killtask "opsiscripttesthelper.exe"
	else
		set $list1$ = shellCall('ps -ef | grep [h]elperchild"')
		set $ConstTest$ = ""
		set $tmp$ = takeFirstStringContaining($list1$,"helperchild")
		set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), "helperchild")
		killtask "helperchild"
		killtask "opsiscripttesthelper"
	endif
	if ($ConstTest$ = $CompValue$)
		comment "/WaitForProcessEnding assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitForProcessEnding assumed failed"
	endif
	killtask $string1$
	killtask ExtractFileName ($opsi_script_test_helper_bin$)  

	message "Winbatch_testing /WaitForProcessEnding "helperchild" /TimeOutSeconds 20"
	marktime
	Winbatch_startprocess_with_child_nowait /WaitForProcessEnding $string1$ /TimeOutSeconds 20
	difftime
	comment "difftime should be 6 seconds"
	set $ConstTest$ = "6"
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
		comment "/WaitForProcessEnding assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitForProcessEnding assumed failed"
	endif
	sleepseconds 1
	if $OS$ = "Windows_NT"
			set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
			set $ConstTest$ = ""
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			killtask "helperchild.exe"
			killtask "opsiscripttesthelper.exe"
		else
			set $list1$ = shellCall('ps -ef | grep [h]elperchild"')
			set $ConstTest$ = ""
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild")
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), "helperchild")
			killtask "helperchild"
			killtask "opsiscripttesthelper"
		endif
	if ($ConstTest$ = $CompValue$)
		comment "/WaitForProcessEnding assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitForProcessEnding assumed failed"
	endif

	message "Winbatch_testing /WaitForProcessEnding "helperchild" /TimeOutSeconds 2"
	marktime
	set $string1$ =  ExtractFileName ($opsi_script_test_helper_child_bin$)
	Winbatch_startprocess_with_child_nowait /WaitForProcessEnding  $string1$ /TimeOutSeconds 2
	difftime
	comment "difftime should be 2 seconds"
	set $ConstTest$ = "2"
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
		comment "/WaitForProcessEnding assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitForProcessEnding assumed failed"
	endif
	sleepseconds 1
	if $OS$ = "Windows_NT"
		set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
		set $ConstTest$ = "helperchild.exe"
		set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
		set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
		killtask "helperchild.exe"
		killtask "opsiscripttesthelper.exe"
	else
		set $list1$ = shellCall('ps -ef | grep [h]elperchild"')
		set $ConstTest$ = "helperchild"
		set $tmp$ = takeFirstStringContaining($list1$,"helperchild")
		set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), "helperchild")
		killtask "helperchild"
		killtask "opsiscripttesthelper"
	endif
	if ($ConstTest$ = $CompValue$)
		comment "/WaitForProcessEnding assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitForProcessEnding assumed failed"
	endif

	comment "same test without /WaitForProcessEnding"
	marktime
	Winbatch_startprocess_with_child_nowait
	difftime
	comment "difftime should be 2 seconds"
	if $OS$ = "Windows_NT"
		set $ConstTest$ = "2"
	else
		comment "unix always wait for the child - so 6 seconds"
		set $ConstTest$ = "6"
	endif
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
		comment "/WaitForProcessEnding assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitForProcessEnding assumed failed"
	endif
	sleepseconds 1
	if $OS$ = "Windows_NT"
		set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
		set $ConstTest$ = "helperchild.exe"
		set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
		set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
		killtask "helperchild.exe"
		killtask "opsiscripttesthelper.exe"
	else
		set $list1$ = shellCall('ps -ef | grep [h]elperchild"')
		set $ConstTest$ = ""
		set $tmp$ = takeFirstStringContaining($list1$,"helperchild")
		set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), "helperchild")
		killtask "helperchild"
		killtask "opsiscripttesthelper"
	endif
	if ($ConstTest$ = $CompValue$)
		comment "/WaitForProcessEnding assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitForProcessEnding assumed failed"
	endif

	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.3") >= "0"
		comment "same test without /WaitForProcessEnding but /TimeOutSeconds 20"
		marktime
		Winbatch_startprocess_with_child_nowait /TimeOutSeconds 20
		difftime
		comment "difftime should be 2 seconds"
		if $OS$ = "Windows_NT"
			set $ConstTest$ = "2"
		else
			comment "unix always wait for the child - so 6 seconds"
			set $ConstTest$ = "6"
		endif
		set $difftime$ = getDiffTimeSec
		set $CompValue$ = $difftime$
		if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
			comment "/WaitForProcessEnding assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/WaitForProcessEnding assumed failed"
		endif
		sleepseconds 1
		if $OS$ = "Windows_NT"
			set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
			set $ConstTest$ = "helperchild.exe"
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			killtask "helperchild.exe"
			killtask "opsiscripttesthelper.exe"
		else
			set $list1$ = shellCall('ps -ef | grep [h]elperchild"')
			set $ConstTest$ = ""
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild")
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), "helperchild")
			killtask "helperchild"
			killtask "opsiscripttesthelper"
		endif
		if ($ConstTest$ = $CompValue$)
			comment "/WaitForProcessEnding assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/WaitForProcessEnding assumed failed"
		endif
	endif ; 4.11.3


	if $OS$ = "Windows_NT"
		;/WaitForWindowVanish sees only Windows of 32 Bit applications
		message "Winbatch_testing /WaitForWindowVanish"
		marktime
		Winbatch_startprocess_with_child_nowait /WaitForWindowVanish "opsi-helper-child"
		difftime
		comment "difftime should be 5 seconds"
		set $ConstTest$ = "5"
		set $difftime$ = getDiffTimeSec
		set $CompValue$ = $difftime$
		if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
			comment "/WaitForProcessEnding assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/WaitForProcessEnding assumed failed"
		endif
		sleepseconds 1
		set $list1$ = getOutStreamFromSection ('DosInAnIcon_getTask_helperchild')
		set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
		set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
		set $ConstTest$ = ""
		if ($ConstTest$ = $CompValue$)
			comment "/WaitForWindowVanish assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "/WaitForWindowVanish assumed failed"
		endif
	endif ; windows

	message "Winbatch_testing /WaitSeconds"
	comment "should be take 2 seconds even the program is finished before 2 seconds"
	marktime
	Winbatch_exitcode_42_doublequote /WaitSeconds 2
	difftime
	set $ConstTest$ = "2"
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
		comment "/WaitSeconds assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitSeconds assumed failed"
	endif
	sleepseconds 1
	if $OS$ = "Windows_NT"
		set $list1$ = shellCall('tasklist /FI "IMAGENAME eq opsiscripttesthelper.exe"')
		set $ConstTest$ = ""
		set $tmp$ = takeFirstStringContaining($list1$,"opsiscripttesthelper.exe")
		set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
		killtask "helperchild.exe"
		killtask "opsiscripttesthelper.exe"
	else
		set $list1$ = shellCall('ps -ef | grep [o]psiscripttesthelper"')
		set $ConstTest$ = ""
		set $tmp$ = takeFirstStringContaining($list1$,"opsiscripttesthelper")
		set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), "opsiscripttesthelper")
		killtask "helperchild"
		killtask "opsiscripttesthelper"
	endif
	if ($ConstTest$ = $CompValue$)
		comment "/WaitSeconds assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitSeconds assumed failed"
	endif
	killtask "helperchild.exe"
	killtask "opsiscripttesthelper.exe"


	comment "should be take longer than 2 seconds"
	marktime
	Winbatch_helper_wait2_showwindow1 /WaitSeconds 2
	difftime
	set $ConstTest$ = "4"
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
		comment "/WaitSeconds assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitSeconds assumed failed"
	endif
	sleepseconds 1
	if $OS$ = "Windows_NT"
		set $list1$ = shellCall('tasklist /FI "IMAGENAME eq opsiscripttesthelper.exe"')
		set $ConstTest$ = ""
		set $tmp$ = takeFirstStringContaining($list1$,"opsiscripttesthelper.exe")
		set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
		killtask "helperchild.exe"
		killtask "opsiscripttesthelper.exe"
	else
		set $list1$ = shellCall('ps -ef | grep [o]psiscripttesthelper"')
		set $ConstTest$ = ""
		set $tmp$ = takeFirstStringContaining($list1$,"opsiscripttesthelper")
		set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), "opsiscripttesthelper")
		killtask "helperchild"
		killtask "opsiscripttesthelper"
	endif
	if ($ConstTest$ = $CompValue$)
		comment "/WaitSeconds assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitSeconds assumed failed"
	endif
	killtask "helperchild.exe"
	killtask "opsiscripttesthelper.exe"

	comment "should be take exactly 2 seconds even if the program takes longer"
	marktime
	Winbatch_helper_wait2_showwindow5 /WaitSeconds 2 /LetThemgo
	difftime
	set $ConstTest$ = "2"
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
		comment "/WaitForProcessEnding assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitForProcessEnding assumed failed"
	endif
	sleepseconds 1
	if $OS$ = "Windows_NT"
		set $list1$ = shellCall('tasklist /FI "IMAGENAME eq opsiscripttesthelper.exe"')
		set $ConstTest$ = "opsiscripttesthelper.exe"
		set $tmp$ = takeFirstStringContaining($list1$,"opsiscripttesthelper.exe")
		set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
		killtask "helperchild.exe"
		killtask "opsiscripttesthelper.exe"
	else
		set $list1$ = shellCall('ps -ef | grep [o]psiscripttesthelper"')
		set $ConstTest$ = "opsiscripttesthelper"
		set $tmp$ = takeFirstStringContaining($list1$,"opsiscripttesthelper")
		set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), "opsiscripttesthelper")
		killtask "helperchild"
		killtask "opsiscripttesthelper"
	endif
	if ($ConstTest$ = $CompValue$)
		comment "/WaitSeconds assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitSeconds assumed failed"
	endif
	killtask "helperchild.exe"
	killtask "opsiscripttesthelper.exe"
	
	message "Winbatch_testing exitcode"
	marktime
	Winbatch_exitcode_42_noquote
	difftime
	set $ConstTest$ = "0"
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
		comment "/WaitForProcessEnding assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/WaitForProcessEnding assumed failed"
	endif
	set $ConstTest$ = "42"
	set $CompValue$ = getLastExitCode
	if ($ConstTest$ = $CompValue$)
		comment "Winbatch_testing exitcode passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "Winbatch_testing exitcode failed"
	endif
	killtask "opsiscripttesthelper"
	killtask "opsiscripttesthelper.exe"
	
	message "Winbatch_testing exitcode"
	marktime
	Winbatch_exitcode_42_doublequote
	difftime
	set $ConstTest$ = "0"
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
		comment "/Winbatch_testing assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/Winbatch_testing assumed failed"
	endif
	set $ConstTest$ = "42"
	set $CompValue$ = getLastExitCode
	if ($ConstTest$ = $CompValue$)
		comment "Winbatch_testing exitcode passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "Winbatch_testing exitcode failed"
	endif
	message "Winbatch_testing exitcode"
	marktime
	Winbatch_exitcode_43_noquote_with_param
	difftime
	set $ConstTest$ = "0"
	set $difftime$ = getDiffTimeSec
	set $CompValue$ = $difftime$
	if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
		comment "/Winbatch_testing assumed passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "/Winbatch_testing assumed failed"
	endif
	set $ConstTest$ = "43"
	set $CompValue$ = getLastExitCode
	if ($ConstTest$ = $CompValue$)
		comment "Winbatch_testing exitcode passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "Winbatch_testing exitcode failed"
	endif
	set $ConstTest$ = "43"
	set $CompValue$ = getLastExitCode
	if ($ConstTest$ = $CompValue$)
		comment "Winbatch_testing exitcode passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "Winbatch_testing exitcode failed"
	endif
	message "Winbatch_testing exitcode"
	Winbatch_exitcode_43_doublequote_with_param
	set $ConstTest$ = "43"
	set $CompValue$ = getLastExitCode
	if ($ConstTest$ = $CompValue$)
		comment "Winbatch_testing exitcode passed"
	else
		set $TestResult$ = "not o.k."
		LogWarning "Winbatch_testing exitcode failed"
	endif
	
	; using single quotes in winbatch will not work because the win api does not know what this is
	;Winbatch_exitcode_4711_singlequote_with_param
	;Winbatch_exitcode_4711_singlequote
	
	message "Winbatch_testing shell connection"
	;if $MsVersion$ < "6"
	if $OS$ = "Windows_NT"
		if CompareDotSeparatedNumbers(GetMsVersionInfo,"6.0") < "0"
			comment "Working this way is deprecated since 4.11.2"
			Winbatch_msi_shellexecute /TimeOutSeconds 15
			set $ConstTest$ = "0"
			set $CompValue$ = getLastExitCode
			if ($ConstTest$ = $CompValue$)
				comment "Winbatch_testing shell connection passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "Winbatch_testing shell connection failed"
			endif
		else
			comment "Installing via shellexecute may fail with UAC and should not be used"
		endif
		
		message "Winbatch_testing msiexec call"
		Winbatch_msi_standard
		set $ConstTest$ = "0"
		set $CompValue$ = getLastExitCode
		if ($ConstTest$ = $CompValue$)
			comment "Winbatch_testing msiexec call passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "Winbatch_testing msiexec call failed"
		endif
		
		comment "cleanup ..."
		sleepseconds 5
		if not (GetRegistryStringValue32("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{E19B367E-992C-4BD5-86D1-804C10184D71}] DisplayName") = "")
			comment "MSI id {E19B367E-992C-4BD5-86D1-804C10184D71} (dummy.msi) found in registry, starting msiexec to uninstall"
			Winbatch_msi_uninstall
		endif
		
		
		
		if FileExists("%ScriptPath%\test-files\testFiles\myinnosetup.exe")
			winbatch_myinno
			if FileExists("%CurrentAppdataDir%\myprog.exe")
				comment "winbatch_myinno passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "winbatch_myinno failed"
			endif
		else
			set $TestResult$ = "not o.k."
			LogWarning "winbatch_myinno failed"
		endif
		
		if FileExists("%ProgramFiles32Dir%\myinnosetup\unins000.exe")
			winbatch_myinno_uninstall
		endif
		
		if FileExists("%ScriptPath%\test-files\testFiles\myinnosetup.exe")
			winbatch_wow_myinno
			includelog "c:\opsi.org\log\winbatch_wow_myinno.log" "100"
			if FileExists("%CurrentAppdataDir%\myprog.exe")
				comment "winbatch_myinno passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "winbatch_myinno failed"
			endif
		else
			set $TestResult$ = "not o.k."
			LogWarning "winbatch_myinno failed"
		endif
		
		if FileExists("%ProgramFiles32Dir%\myinnosetup\unins000.exe")
			winbatch_myinno_uninstall
		endif
		
		if CompareDotSeparatedNumbers("%WinstVersion%","4.11.3") >= "0"
			comment ""
			comment "-------------------------------------"
			comment "Testing: "
			message "/runelevated"
			Files_copy_msi_exe_2_c
		
			message "Winbatch_testing local msiexec call /RunElevated /TimeoutSeconds 30"
			Winbatch_msi_standard_from_c /RunElevated /TimeoutSeconds 30
			set $ConstTest$ = "0"
			set $CompValue$ = getLastExitCode
			;if GetMSVersionInfo INT>= "6"
			if CompareDotSeparatedNumbers(GetMsVersionInfo,"6.0") >= "0"
				set $ConstTest$ = "0"
			else
				set $ConstTest$ = "0"
			endif
			if ($ConstTest$ = $CompValue$)
				comment "Winbatch_testing msiexec call /RunElevated passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "Winbatch_testing msiexec call /RunElevated failed"
			endif
		
			comment "cleanup ..."
			sleepseconds 5
			if not (GetRegistryStringValue32("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{E19B367E-992C-4BD5-86D1-804C10184D71}] DisplayName") = "")
				comment "MSI id {E19B367E-992C-4BD5-86D1-804C10184D71} (dummy.msi) found in registry, starting msiexec to uninstall"
				Winbatch_msi_uninstall /RunElevated
			endif
		
			Files_copy_helper_2_c
		
			message "testing winbatch_start_helper_c /RunElevated"
			winbatch_start_helper_c /RunElevated
			set $list1$ = loadTextFile ($HomeTestFiles$+"\testFiles\opsi-script-test-helper-win\admin.log")
			message "testing winbatch_start_helper_asadmin_c /RunElevated"
			winbatch_start_helper_asadmin_c /RunElevated
			set $list1$ = loadTextFile ($HomeTestFiles$+"\testFiles\opsi-script-test-helper-win\admin.log")
			message "testing winbatch_start_helper_asinvoker_c /RunElevated"
			winbatch_start_helper_asinvoker_c /RunElevated
			set $list1$ = loadTextFile ($HomeTestFiles$+"\testFiles\opsi-script-test-helper-win\admin.log")
		
			marktime
			message "testing Winbatch_startprocess_with_child_nowait_from_c /RunElevated /WaitForProcessEnding "helperchild.exe" /TimeoutSeconds 10"
			Winbatch_startprocess_with_child_nowait_from_c /RunElevated /WaitForProcessEnding "helperchild.exe" /TimeoutSeconds 10
			difftime
			comment "difftime should be 5 seconds"
			set $tmp$ = getDiffTimeSec
			if $tmp$ INT>= "10"
				set $TestResult$ = "not o.k."
				LogWarning "/WaitForProcessEnding /RunElevated assumed failed"
			else
				sleepseconds 1
				;set $list1$ = getOutStreamFromSection ('DosInAnIcon_getTask_helperchild')
				set $list1$ = getprocesslist
				set $ConstTest$ = ""
				set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
				set $CompValue$ = takeString(0, splitString($tmp$,";"))
				if ($ConstTest$ = $CompValue$)
					comment "/WaitForProcessEnding /RunElevated assumed passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "/WaitForProcessEnding /RunElevated assumed failed"
				endif
			endif
			killtask "helperchild.exe"
			killtask "opsiscripttesthelper.exe"
		
			;if GetMSVersionInfo INT>= "6"
			if CompareDotSeparatedNumbers(GetMsVersionInfo,"6.0") >= "0"
				message "testing Winbatch_powercfg_hibernate_off "
				Winbatch_powercfg_hibernate_off
				set $ConstTest$ = "1"
				set $CompValue$ = getLastExitCode
				if ($ConstTest$ = $CompValue$)
					comment "Is expected to fail without /runelevated"
				else
					set $TestResult$ = "not o.k."
					LogWarning "Winbatch_powercfg_hibernate_off worked unexpected correct "
				endif
				
				message "testing Winbatch_powercfg_hibernate_off /RunElevated"
				Winbatch_powercfg_hibernate_off /RunElevated
				set $ConstTest$ = "0"
				set $CompValue$ = getLastExitCode
				if ($ConstTest$ = $CompValue$)
					comment "Winbatch_testing /RunElevated passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "testing /RunElevated failed"
				endif
			endif ; nt6
		Files_clean_from_c
		endif ; 4.11.3
	endif ; windows
	
	if $OS$ = "Windows_NT"
		if CompareDotSeparatedNumbers("%WinstVersion%","4.11.3.5") >= "0"
			if $INST_SystemType$ = "64 Bit System"
				comment ""
				comment "-------------------------------------"
				comment "Testing: "
				message "winbatch /64bit"
				Winbatch_regedit_s_64 /64bit
				set $ConstTest$ = "64"
				set $CompValue$ = GetRegistryStringValue64("[HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test] bitByRegedit-s")
				if ($ConstTest$ = $CompValue$)
					comment "Winbatch /64bit passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "Winbatch /64bit  failed"
				endif
				Registry_opsi_org_delete_test /64bit
				Winbatch_regedit_s_32 /64bit
				comment "This call should fail because ther is no c:\windows\system32\regedit.exe on 64 bit systems"
				set $ConstTest$ = ""
				set $CompValue$ = GetRegistryStringValue32("[HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test] bitByRegedit-s")
				if ($ConstTest$ = $CompValue$)
					comment "Winbatch /32bit passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "Winbatch /323bit  failed"
				endif
				Winbatch_regedit_s_32 /32bit
				set $ConstTest$ = "64"
				set $CompValue$ = GetRegistryStringValue32("[HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test] bitByRegedit-s")
				if ($ConstTest$ = $CompValue$)
					comment "Winbatch /32bit passed"
				else
					set $TestResult$ = "not o.k."
					LogWarning "Winbatch /323bit  failed"
				endif
				Registry_opsi_org_delete_test /32bit
			endif ; 64bit
		endif ; 4.11.3.5
	endif ; windows
	
	if CompareDotSeparatedNumbers("%WinstVersion%","4.11.6.0") >= "0"
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "processCall "
		
		if $OS$ = "Windows_NT"
			message "processCall /WaitForWindowAppearing"
			marktime
			set $tmp$ = processCall('"%ScriptPath%\'+$opsi_script_test_helper_bin$+'" --fork-and-stop=2') /WaitForWindowAppearing "opsi-helper-child"
			difftime
			comment "difftime should be about 2 seconds"
			;set $list1$ = getOutStreamFromSection ('DosInAnIcon_getTask_helperchild')
			set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			set $ConstTest$ = "helperchild.exe"
			if ($ConstTest$ = $CompValue$)
				comment "/WaitForWindowAppearing assumed passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "/WaitForWindowAppearing assumed failed"
			endif
			marktime
			sleepSeconds 5
			difftime
			;set $list1$ = getOutStreamFromSection ('DosInAnIcon_getTask_helperchild')
			set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			set $ConstTest$ = ""
			if ($ConstTest$ = $CompValue$)
				comment "/WaitForWindowAppearing assumed passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "/WaitForWindowAppearing assumed failed"
			endif
			killtask "helperchild.exe"
			killtask "opsiscripttesthelper.exe"
		endif ; windows
		
		message "processCall /WaitForProcessEnding"
		marktime
		set $string1$ =  ExtractFileName ($opsi_script_test_helper_child_bin$) 
		set $tmp$ = '"%ScriptPath%' + $pathDelim$ + $opsi_script_test_helper_bin$ + '" --fork-and-stop=2'
		set $tmp$ = processCall($tmp$)  /WaitForProcessEnding $string1$
		difftime
		comment "difftime should be 5 seconds"
		set $ConstTest$ = "6"
		set $difftime$ = getDiffTimeSec
		set $CompValue$ = $difftime$
		if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		sleepseconds 1
		if $OS$ = "Windows_NT"
			set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
			set $ConstTest$ = ""
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			killtask "helperchild.exe"
			killtask "opsiscripttesthelper.exe"
		else
			set $list1$ = shellCall('ps -ef | grep [h]elperchild"')
			set $ConstTest$ = ""
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild")
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), "helperchild")
			killtask "helperchild"
			killtask "opsiscripttesthelper"
		endif
		if ($ConstTest$ = $CompValue$)
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		
		message 'processCall /WaitForProcessEnding "helperchild.exe" /TimeOutSeconds 20'
		marktime
		set $string1$ =  ExtractFileName ($opsi_script_test_helper_child_bin$)
		set $tmp$ = processCall('"%ScriptPath%'+$pathDelim$+$opsi_script_test_helper_bin$+'" --fork-and-stop=2')  /WaitForProcessEnding $string1$ /TimeOutSeconds 20
		difftime
		if $OS$ = "Windows_NT"
			set $ConstTest$ = "6"
		else
			comment "difftime should be 6 seconds - unix wait for the parent"
			set $ConstTest$ = "6"
		endif
		set $difftime$ = getDiffTimeSec
		set $CompValue$ = $difftime$
		if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		sleepseconds 1
		if $OS$ = "Windows_NT"
			set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
			set $ConstTest$ = ""
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			killtask "helperchild.exe"
			killtask "opsiscripttesthelper.exe"
		else
			set $list1$ = shellCall('ps -ef | grep [h]elperchild"')
			set $ConstTest$ = ""
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild")
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), "helperchild")
			killtask "helperchild"
			killtask "opsiscripttesthelper"
		endif
		if ($ConstTest$ = $CompValue$)
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		
		message 'processCall /WaitForProcessEnding "helperchild.exe" /TimeOutSeconds 2'
		marktime
		set $string1$ =  ExtractFileName ($opsi_script_test_helper_child_bin$)
		set $tmp$ = processCall('"%ScriptPath%'+$pathDelim$+$opsi_script_test_helper_bin$+'" --fork-and-stop=2')  /WaitForProcessEnding $string1$ /TimeOutSeconds 2
		difftime
		comment "difftime should be 2 seconds"
		set $ConstTest$ = "2"
		set $difftime$ = getDiffTimeSec
		set $CompValue$ = $difftime$
		if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		sleepseconds 1
		if $OS$ = "Windows_NT"
			set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
			set $ConstTest$ = "helperchild.exe"
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			killtask "helperchild.exe"
			killtask "opsiscripttesthelper.exe"
		else
			set $list1$ = shellCall('ps -ef | grep [h]elperchild"')
			set $ConstTest$ = "helperchild"
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild")
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), "helperchild")
			killtask "helperchild"
			killtask "opsiscripttesthelper"
		endif
		if ($ConstTest$ = $CompValue$)
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		
		comment "same test without /WaitForProcessEnding"
		marktime
		set $string1$ =  ExtractFileName ($opsi_script_test_helper_child_bin$)
		set $tmp$ = processCall('"%ScriptPath%'+$pathDelim$+$opsi_script_test_helper_bin$+'" --fork-and-stop=2')
		difftime
		
		if $OS$ = "Windows_NT"
			set $ConstTest$ = "2"
			comment "difftime should be 2 seconds"
		else
			comment "difftime should be 6 seconds - unix wait for the parent"
			set $ConstTest$ = "6"
		endif
		set $difftime$ = getDiffTimeSec
		set $CompValue$ = $difftime$
		if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		sleepseconds 1
		if $OS$ = "Windows_NT"
			set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
			set $ConstTest$ = "helperchild.exe"
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			killtask "helperchild.exe"
			killtask "opsiscripttesthelper.exe"
		else
			set $list1$ = shellCall('ps -ef | grep [h]elperchild"')
			set $ConstTest$ = ""
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild")
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), "helperchild")
			killtask "helperchild"
			killtask "opsiscripttesthelper"
		endif
		if ($ConstTest$ = $CompValue$)
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		

		comment "same test without /WaitForProcessEnding but /TimeOutSeconds 20"
		marktime
		set $string1$ =  ExtractFileName ($opsi_script_test_helper_child_bin$)
		set $tmp$ = processCall('"%ScriptPath%'+$pathDelim$+$opsi_script_test_helper_bin$+'" --fork-and-stop=2')  /TimeOutSeconds 20
		difftime
		if $OS$ = "Windows_NT"
			set $ConstTest$ = "2"
		else
			comment "difftime should be 6 seconds - unix wait for the parent"
			set $ConstTest$ = "6"
		endif
		set $difftime$ = getDiffTimeSec
		set $CompValue$ = $difftime$
		if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		sleepseconds 1
		if $OS$ = "Windows_NT"
			set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
			set $ConstTest$ = ""
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			killtask "helperchild.exe"
			killtask "opsiscripttesthelper.exe"
		else
			set $list1$ = shellCall('ps -ef | grep [h]elperchild"')
			set $ConstTest$ = ""
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild")
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), "helperchild")
			killtask "helperchild"
			killtask "opsiscripttesthelper"
		endif
		if ($ConstTest$ = $CompValue$)
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		
		if $OS$ = "Windows_NT"
			;/WaitForWindowVanish sees only Windows of 32 Bit applications
			message "processCall /WaitForWindowVanish"
			marktime
			set $tmp$ = processCall('"%ScriptPath%\'+$opsi_script_test_helper_bin$+'" --fork-and-stop=2') /WaitForWindowVanish "opsi-helper-child"
			difftime
			comment "difftime should be 5 seconds"
			sleepseconds 1
			;set $list1$ = getOutStreamFromSection ('DosInAnIcon_getTask_helperchild')
			set $list1$ = shellCall('tasklist /FI "IMAGENAME eq helperchild.exe"')
			set $tmp$ = takeFirstStringContaining($list1$,"helperchild.exe")
			set $CompValue$ = takeString(0, splitStringOnWhitespace($tmp$))
			set $ConstTest$ = ""
			if ($ConstTest$ = $CompValue$)
				comment "/WaitForWindowVanish assumed passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "/WaitForWindowVanish assumed failed"
			endif
		endif
		
		message "processCall /WaitSeconds"
		comment "should be take 2 seconds even the program is finished before 2 seconds"
		marktime
		set $string1$ = ExtractFileName($opsi_script_test_helper_child_bin$)
		set $tmp$ = processCall('"%ScriptPath%'+$pathDelim$+$opsi_script_test_helper_bin$+'"') /WaitSeconds 2
		difftime
		if $OS$ = "Windows_NT"
			set $ConstTest$ = "2"
		else
			comment "no fork here"
			set $ConstTest$ = "2"
		endif
		set $difftime$ = getDiffTimeSec
		set $CompValue$ = $difftime$
		if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		set $string2$ = ExtractFileName($opsi_script_test_helper_bin$)
		if $OS$ = "Windows_NT"
			set $list1$ = shellCall('tasklist /FI "IMAGENAME eq '+$string2$+'"')
			set $ConstTest$ = ""
			set $tmp$ = takeFirstStringContaining($list1$,$string2$)
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $string2$)
			killtask $string1$
			killtask $string2$
		else
			set $list1$ = shellCall('ps -ef | grep [o]psiscripttesthelper"')
			set $ConstTest$ = ""
			set $tmp$ = takeFirstStringContaining($list1$,$string2$)
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $string2$)
			killtask $string1$
			killtask $string2$
		endif
		if ($ConstTest$ = $CompValue$)
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		
		
		comment "should be take longer than 2 seconds"
		marktime
		;Winbatch_helper_wait2_showwindow1
		set $string1$ =  ExtractFileName ($opsi_script_test_helper_child_bin$)
		set $tmp$ = processCall('"%ScriptPath%'+$pathDelim$+$opsi_script_test_helper_bin$+'" --wait=2 --showwindow=1') /WaitSeconds 2
		difftime
		if $OS$ = "Windows_NT"
			set $ConstTest$ = "5"
		else
			comment "no fork here"
			set $ConstTest$ = "3"
		endif
		set $difftime$ = getDiffTimeSec
		set $CompValue$ = $difftime$
		if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		set $string2$ = ExtractFileName($opsi_script_test_helper_bin$)
		if $OS$ = "Windows_NT"
			set $list1$ = shellCall('tasklist /FI "IMAGENAME eq '+$string2$+'"')
			set $ConstTest$ = ""
			set $tmp$ = takeFirstStringContaining($list1$,$string2$)
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $string2$)
			killtask $string1$
			killtask $string2$
		else
			set $list1$ = shellCall('ps -ef | grep [o]psiscripttesthelper"')
			set $ConstTest$ = ""
			set $tmp$ = takeFirstStringContaining($list1$,$string2$)
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $string2$)
			killtask $string1$
			killtask $string2$
		endif
		if ($ConstTest$ = $CompValue$)
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		
		comment "should be take exactly 2 seconds even if the program takes longer"
		marktime
		;Winbatch_helper_wait2_showwindow5
		set $string1$ = ExtractFileName($opsi_script_test_helper_child_bin$)
		set $tmp$ = processCall('"%ScriptPath%'+$pathDelim$+$opsi_script_test_helper_bin$+'" --wait=2 --showwindow=5') /WaitSeconds 2 /LetThemgo
		difftime
		comment "difftime should be 2 seconds"
		set $ConstTest$ = "2"
		set $difftime$ = getDiffTimeSec
		set $CompValue$ = $difftime$
		if ($ConstTest$ int>= calculate($CompValue$+'-1')) and ($ConstTest$ int<= calculate($CompValue$+'+1'))
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		set $string2$ = ExtractFileName($opsi_script_test_helper_bin$)
		if $OS$ = "Windows_NT"
			set $list1$ = shellCall('tasklist /FI "IMAGENAME eq '+$string2$+'"')
			set $ConstTest$ = $string2$
			set $tmp$ = takeFirstStringContaining($list1$,$string2$)
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $string2$)
			killtask $string1$
			killtask $string2$
		else
			set $list1$ = shellCall('ps -ef | grep [o]psiscripttesthelper"')
			set $ConstTest$ = $string2$
			set $tmp$ = takeFirstStringContaining($list1$,$string2$)
			set $CompValue$ = takeFirstStringContaining( splitStringOnWhitespace($tmp$), $string2$)
			killtask $string1$
			killtask $string2$
		endif
		if ($ConstTest$ = $CompValue$)
			comment "processCall assumed passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall assumed failed"
		endif
		


		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		
		message "processCall exitcode"
		;Winbatch_exitcode_42_noquote
		set $ConstTest$ = "42"
		set $CompValue$ =  processCall('"%ScriptPath%'+$pathDelim$+$opsi_script_test_helper_bin$+'"')
		if ($ConstTest$ = $CompValue$)
			comment "processCall exitcode passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall exitcode failed"
		endif
		killtask $string1$
		killtask $string2$
		
		message "processCall exitcode"
		;Winbatch_exitcode_42_doublequote
		set $ConstTest$ = "42"
		set $CompValue$ = processCall('"%ScriptPath%'+$pathDelim$+$opsi_script_test_helper_bin$+'"  --log')
		if ($ConstTest$ = $CompValue$)
			comment "processCall exitcode passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall exitcode failed"
		endif
		message "processCall exitcode"
		;Winbatch_exitcode_43_noquote_with_param
		set $ConstTest$ = "43"
		set $CompValue$ = processCall('"%ScriptPath%'+$pathDelim$+$opsi_script_test_helper_bin$+'"  --exit-code=43')
		if ($ConstTest$ = $CompValue$)
			comment "processCall exitcode passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall exitcode failed"
		endif
		message "processCall exitcode"
		;Winbatch_exitcode_43_doublequote_with_param
		set $ConstTest$ = "43"
		set $CompValue$ = processCall('"%ScriptPath%'+$pathDelim$+$opsi_script_test_helper_bin$+'" --exit-code=43')
		if ($ConstTest$ = $CompValue$)
			comment "processCall exitcode passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "processCall exitcode failed"
		endif

		if $OS$ = "Windows_NT"
			message "processCall msiexec call"
			;Winbatch_msi_standard
			set $ConstTest$ = "0"
			set $CompValue$ = processCall('msiexec /i "%ScriptPath%\test-files\testFiles\dummy.msi" /l* "'+$HomeTestFiles$+'\dummy.install_log.txt" /qb! ALLUSERS=2 REBOOT=ReallySuppress')
			if ($ConstTest$ = $CompValue$)
				comment "processCall msiexec call passed"
			else
				set $TestResult$ = "not o.k."
				LogWarning "processCall msiexec call failed"
			endif
			
			comment "cleanup ..."
			sleepseconds 5
			if not (GetRegistryStringValue32("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{E19B367E-992C-4BD5-86D1-804C10184D71}] DisplayName") = "")
				comment "MSI id {E19B367E-992C-4BD5-86D1-804C10184D71} (dummy.msi) found in registry, starting msiexec to uninstall"
				set $CompValue$ = processCall('msiexec /x {E19B367E-992C-4BD5-86D1-804C10184D71} /qb! REBOOT=ReallySuppress')
			endif
		endif ; windows
	endif ; 4.11.6.0

	
	if ($OS$ = "Linux") or ($OS$ = 'macos')
		;set $TestResult$ = "not implemented"
		set $TestResult$ = "o.k."
		comment ""
		comment "-------------------------------------"
		comment "Testing: "
		message "Winbatch"
		Winbatch_top /LetThemGo
		set $ConstTest$ = "ping"
		set $CompValue$ = ""
		set $list1$ = getProcessList
		set $list2$ = getListContaining($list1$,$ConstTest$)
		for %aktprocess% in $list2$ do sub_getprocess_by_shortcommand
		if ($ConstTest$ = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
		killtask "ping"
		set $ConstTest$ = "ping"
		set $CompValue$ = ""
		set $list1$ = getProcessList
		set $list2$ = getListContaining($list1$,$ConstTest$)
		for %aktprocess% in $list2$ do sub_getprocess_by_shortcommand
		if ("" = $CompValue$)
			comment "passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "failed"
		endif
	endif ; Linux

	sub_compareResult
	set $winst_winbatch$ = $SubResult$
endif


;----------------   start   sections for dosbatch/winbatch tests ---------------------------------
[Files_empty_folder]
Delete -s -f $HomeTestFiles$

[WinBatch_testing]
$ping5command$

[Winbatch_top]
/bin/bash -c "ping 127.0.0.1 &"

[DosInAnIcon_getTask_ping]
@echo off
tasklist /FI "IMAGENAME eq ping.exe"

[DosInAnIcon_getTask_helper]
@echo off
tasklist /FI "IMAGENAME eq opsiscripttesthelper.exe"

[DosInAnIcon_getTask_helperchild]
@echo off
tasklist /FI "IMAGENAME eq helperchild.exe"

[Winbatch_startprocess_with_child_nowait]
"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$" --fork-and-stop=4

[Winbatch_startprocess_with_child_nowait_from_c]
"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$" --fork-and-stop=4


[WinBatch_testing2]
%ScriptPath%\dos\dummy2.bat

[Winbatch_exitcode_42_noquote]
"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$"

[Winbatch_exitcode_42_singlequote]
'%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$'

[Winbatch_exitcode_42_doublequote]
"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$"

[Winbatch_exitcode_43_noquote_with_param]
%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$ --exit-code=43


[Winbatch_exitcode_43_singlequote_with_param]
'%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$' --exit-code=43

[Winbatch_exitcode_43_doublequote_with_param]
"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$" --exit-code=43

[Winbatch_helper_wait2_showwindow1]
"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$" --wait=2 --showwindow=1

[Winbatch_helper_wait2_showwindow5]
"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$" --wait=2 --showwindow=5

[Winbatch_helper_showwindow1]
"%ScriptPath%$pathDelim$$opsi_script_test_helper_bin$" --fork-and-stop=3

[Winbatch_msi_shellexecute]
"%ScriptPath%\test-files\testFiles\dummy.msi" /l* "$HomeTestFiles$\dummy.install_log.txt" /qb! ALLUSERS=2 REBOOT=ReallySuppress

[Winbatch_msi_standard]
msiexec /i "%ScriptPath%\test-files\testFiles\dummy.msi" /l* "$HomeTestFiles$\dummy.install_log.txt" /qb! ALLUSERS=2 REBOOT=ReallySuppress

[Winbatch_msi_standard_from_c]
msiexec /i "$HomeTestFiles$\testFiles\dummy.msi" /l* "$HomeTestFiles$\dummy.install_log.txt" /qb! ALLUSERS=2 REBOOT=ReallySuppress

[winbatch_myinno]
"%ScriptPath%\test-files\testFiles\myinnosetup.exe" /silent

[winbatch_myinno_from_c]
"$HomeTestFiles$\testFiles\myinnosetup.exe" /silent

[winbatch_myinno_uninstall]
"%ProgramFiles32Dir%\myinnosetup\unins000.exe" /silent

[winbatch_wow_myinno]
"%winstdir%\winst32.exe" "%scriptpath%\standalone-tests\myinno_winbatch.ins" /logfile "c:\opsi.org\log\winbatch_wow_myinno.log" /batch

[Winbatch_regedit_s_64]
"%systemroot%\regedit.exe" /s "%scriptpath%\test-files\64bit.reg"

[Winbatch_regedit_s_32]
"%system%\regedit.exe" /s "%scriptpath%\test-files\64bit.reg"

[winbatch_wow_myinno_from_c]
"%winstdir%\winst32.exe" "%scriptpath%\myinno_from_c_winbatch.ins" /logfile "c:\opsi.org\log\winbatch_wow_myinno.log" /batch

[Winbatch_msi_standard_from_c_indirect]
;"%WinstDir%\..\action_processor_starter.exe" <hostId> <hostKey> <controlServerPort> <logFile> <logLevel> <depotRemoteUrl> <depotDrive> <depotServerUsername> <depotServerPassword> <sessionId> <actionProcessorDesktop> <actionProcessorCommand> <actionProcessorTimeout> <runAsUser> <runAsPassword> <createEnvironment>
;"%WinstDir%\..\action_processor_starter.exe" "%HostID%" <hostKey> "4441"  "8" <depotRemoteUrl> "%ScriptDrive%" <depotServerUsername> <depotServerPassword> 0 "defaukt" "msiexec /i c:\tmp\testFiles\dummy.msi /l* c:\tmp\dummy.install_log.txt /qb! ALLUSERS=2 REBOOT=ReallySuppress" 30 "" "" false

[winbatch_start_helper_asadmin_c]
"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$" --log="$HomeTestFiles$\testFiles\opsi-script-test-helper-win\admin.log"

[winbatch_start_helper_asinvoker_c]
"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$" --log="$HomeTestFiles$\testFiles\opsi-script-test-helper-win\admin.log"

[winbatch_start_helper_c]
"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$" --log="$HomeTestFiles$\testFiles\opsi-script-test-helper-win\admin.log"

;[DosInAnIcon_start_helper_c]
;"$HomeTestFiles$\testFiles\$opsi_script_test_helper_bin$" --log="$HomeTestFiles$\testFiles\opsi-script-test-helper-win\admin.log"
;
;[DosInAnIcon_start_helper_asadmin_c]
;"$HomeTestFiles$\testFiles\opsi-script-test-helper-win\opsiwinsttesthelperasadmin.exe" --log="$HomeTestFiles$\testFiles\opsi-script-test-helper-win\admin.log"
;
;[DosInAnIcon_start_helper_asinvoker_c]
;"$HomeTestFiles$\testFiles\opsi-script-test-helper-win\opsiwinsttesthelperasinvoker.exe" --log="$HomeTestFiles$\testFiles\opsi-script-test-helper-win\admin.log"
;
[Files_copy_msi_exe_2_c]
copy "%ScriptPath%\test-files\testFiles\*.msi" "$HomeTestFiles$\testFiles"
copy "%ScriptPath%\test-files\testFiles\*.exe" "$HomeTestFiles$\testFiles"

[Files_copy_helper_2_c]
copy "%ScriptPath%\opsi-script-test-helper-win\*.exe" "$HomeTestFiles$\testFiles\opsi-script-test-helper-win"

[Files_clean_from_c]
del -s -f "$HomeTestFiles$\testFiles"


[Winbatch_msi_uninstall]
msiexec /x {E19B367E-992C-4BD5-86D1-804C10184D71} /qb! REBOOT=ReallySuppress

[Winbatch_powercfg_hibernate_off]
powercfg /hibernate off

;[DosInAnIcon_powercfg_hibernate_off]
;powercfg /hibernate off
;echo %ERRORLEVEL%
;exit %ERRORLEVEL%
;
;[DosBatch_1]
;c:
;mkdir $HomeTestFiles$
;cd $HomeTestFiles$
;echo dummy > dosbatch_1.txt
;
;[DosInAnIcon_1]
;c:
;mkdir $HomeTestFiles$
;cd $HomeTestFiles$
;echo dummy > dosinanicon_1.txt
;
;[DosBatch_1b]
;c:
;mkdir $HomeTestFiles$
;cd $HomeTestFiles$
;echo dummy > dosinanicon_1.txt
;
;[Execwith_1b]
;c:
;mkdir $HomeTestFiles$
;cd $HomeTestFiles$
;echo dummy > dosinanicon_1.txt
;
;[DosInAnIcon_remove_test_from_system32]
;%SystemDrive%
;cd "%System%"
;del "dummy.txt"
;
;[DosInAnIcon_kill_notepad]
;taskkill /F /IM notepad.exe
;
;[DosInAnIcon_exit42]
;set exitcode=42
;exit %exitcode%
;
;[DosInAnIcon_exit1]
;rem create an errolevel= 1
;VERIFY OTHER 2> NUL
;echo %ERRORLEVEL%
;exit %ERRORLEVEL%
;
;[ShellInAnIcon_exitcode42]
;set exitcode=0
;VERIFY OTHER 2> NUL
;if %ERRORLEVEL% NEQ 0 set exitcode=%ERRORLEVEL%
;echo %exitcode%
;"%ScriptPath%\$opsi_script_test_helper_bin$"
;if %ERRORLEVEL% NEQ 0 set exitcode=%ERRORLEVEL%
;exit %exitcode%
;
;
;[DosBatchUseradd]
;net user "$opsiadminuser$" "$opsiadminpwd$" /add
;net localgroup Administratoren /add "$opsiadminuser$"
;
;[DosBatchUserdel]
;net user "$opsiadminuser$" /delete
;rmdir /s /q "%ProfileDir%\$opsiadminuser$"
;
;[ExecWithSetup]
;; http://msdn.microsoft.com/library/ee942965%28v=VS.100%29.aspx
;; return exit code via stdout as winst cannot read exit codes from ExecWith
;$ExitCode = RunAsWait("$opsiadminuser$", @ComputerName, "$opsiadminpwd$", 1,  '"$HomeTestFiles$\testFiles\myinnosetup.exe" /silent')
;if not @error then
;	ConsoleWrite($exitcode)
;endif
;
;;;;;;;;;;;;;;;;;;;;;
;
;[ShellInAnIcon_exit43]
;set -x
;exit 43
;
;
;[ShellBatch_ping]
;set -x
;ping -c 4 localhost
;
;[ShellBatch_1]
;set -x
;mkdir -p $HomeTestFiles$
;cd $HomeTestFiles$
;echo dummy > shellbatch_1.txt
;
;[ShellInAnIcon_1]
;set -x
;mkdir -p $HomeTestFiles$
;cd $HomeTestFiles$
;echo dummy > shellinanicon_1.txt
;
;[DosInAnIcon_with_parameter]
;echo Hello %1%
;
;[ShellInAnIcon_with_parameter]
;echo Hello $1

;----------------   stop   sections for dosbatch/winbatch tests ---------------------------------
